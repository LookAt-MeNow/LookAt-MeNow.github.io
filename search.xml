<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webserver</title>
      <link href="/2023/10/27/webserver/"/>
      <url>/2023/10/27/webserver/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> c++ </tag>
            
            <tag> socket </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2023/10/25/docker/"/>
      <url>/2023/10/25/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>查看内核</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/10/25/docker/image-20231025193644393.png"></p><p>更新源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce-18.03.1.ce  <span class="token comment">#如有需要可更改安装版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start dockesystemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> <span class="token comment">#开机自启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、常见命令"><a href="#二、常见命令" class="headerlink" title="二、常见命令"></a>二、常见命令</h2><p><img src="/2023/10/25/docker/image-20231025194901217.png"></p><p><strong>docker run是创建并运行 != docker start</strong></p><p><a href="https://docs.docker.com/reference/">官方文档</a></p><p><img src="/2023/10/25/docker/image-20231025194831435.png"></p><p><a href="https://hub.docker.com/">官方仓库</a></p><p>拉取Nginx镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/10/25/docker/image-20231025195355073.png"></p><p>查看当前本地镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/10/25/docker/image-20231025195639822.png" alt="image-20231025195639822"></p><p>保存镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> save <span class="token parameter variable">-o</span> nginx.tar nginx:latest  <span class="token comment"># -o 文件名  镜像名:版本号</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/10/25/docker/image-20231025195736280.png"></p><p>删除镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/10/25/docker/image-20231025195845232.png"></p><p>加载镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> load <span class="token parameter variable">-i</span> nginx.tar <span class="token comment"># -i 文件名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/10/25/docker/image-20231025200054611.png"></p><p>运行容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 nginx <span class="token comment"># -d 后台运行并输出容器ID --name 指定名称 主机端口:容器端口 容器名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/10/25/docker/image-20231025203058645.png" alt="image-20231025203058645"></p><p><strong>出现错误</strong></p><p>根据错误提示得知80端口已经被占用，查看80端口情况<code>netstat -ntulp | grep 80</code>，并且此时这个容器并不会运行</p><p><strong>解决方案</strong></p><p>更换一个没有被占用的端口，8080端口没有被占用，使用8080端口，根据自己需求改变</p><hr><p><img src="/2023/10/25/docker/image-20231025203425577.png" alt="image-20231025203425577"></p><p><strong>出现错误</strong></p><p>根据错误提示，nginx这个名字已经被占用了，所有创建失败。</p><p><strong>解决方案</strong></p><p>换一个名字<code>docker ps #查看运行中的容器</code></p><p><img src="/2023/10/25/docker/image-20231025203758226.png" alt="成功创建"></p><p>此时应该有三个容器ID，第一个容器由于端口占用没有成功创建，第二个由于名称占用没有成功创建，但是依旧产生了容器ID，删除这两个没有的容器ID</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> -q<span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span>  <span class="token comment">#删除无法运行的容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>关闭运行的镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动运行的镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/10/25/docker/image-20231025204549564.png"></p><p>查看日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs <span class="token builtin class-name">test</span> <span class="token comment">#容器名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> nginx <span class="token function">bash</span> <span class="token comment">#-it(说明命令行交互) 容器名 用bash交互</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/10/25/docker/image-20231025205121712.png"></p><p>docker模拟了linux的系统root@*** 这个是容器的id</p><p>删除容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> 容器名 <span class="token parameter variable">-f</span> <span class="token comment">#运行中的容器不能直接删，-f可以强制删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置别名</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"alias dis='docker images'"</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc<span class="token builtin class-name">echo</span> <span class="token string">"alias dps='docker ps --format <span class="token entity" title="\&quot;">\"</span>table {{.ID}}<span class="token entity" title="\t">\t</span>{{.Ports}}<span class="token entity" title="\t">\t</span>{{.Status}}<span class="token entity" title="\t">\t</span>{{.Names}}<span class="token entity" title="\&quot;">\"</span>'"</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc<span class="token builtin class-name">source</span> ~/.bashrc <span class="token comment">#刷新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/10/25/docker/image-20231025211427220.png"></p><h2 id="三、数据卷"><a href="#三、数据卷" class="headerlink" title="三、数据卷"></a>三、数据卷</h2><p><img src="/2023/10/25/docker/image-20231025211456010.png" alt="案例"></p><p><img src="/2023/10/25/docker/image-20231025211903131.png" alt="进入容器"></p><p>尝试修改index.html发现没有vi的包，docker的容器虽然模拟了linux，但是也仅仅就是包含了运行nginx必备的包，所以直接在容器内修改是困难的，而数据卷就是容器内目录与宿主机目录之间映射的桥梁（有点类似wsl吗）</p><p><strong>数据卷是一个虚拟的目录</strong></p><p><img src="/2023/10/25/docker/image-20231025214749565.png"></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker volume create</td><td>创建数据卷</td></tr><tr><td>docker volume ls</td><td>查看所有的数据卷</td></tr><tr><td>docker volume rm</td><td>删除指定的数据卷</td></tr><tr><td>docker volume inspect</td><td>查看某个数据卷的详情</td></tr><tr><td>docker volume prune</td><td>清楚数据卷</td></tr></tbody></table><p>在执行docker run命令的时候使用 -v 数据卷:容器内目录完成数据卷挂载，<strong>如果已经创建了容器，就不能进行数据卷挂载</strong></p><p>创建一个数据卷</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">-v</span> html:/usr/share/nginx/html nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/10/25/docker/image-20231025220143151.png"></p><p>Mountpoint是宿主机的物理地址</p><p><img src="/2023/10/25/docker/image-20231025220225221.png"></p><p>此时操作这个宿主机这个目录会同步到容器<code>/usr/share/nginx/html</code>这个目录下</p><h2 id="四、本地目录挂载"><a href="#四、本地目录挂载" class="headerlink" title="四、本地目录挂载"></a>四、本地目录挂载</h2>]]></content>
      
      
      <categories>
          
          <category> liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8位2进制CPU设计和实现</title>
      <link href="/2023/09/22/8-wei-2-jin-zhi-cpu-she-ji-he-shi-xian/"/>
      <url>/2023/09/22/8-wei-2-jin-zhi-cpu-she-ji-he-shi-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="半加器"><a href="#半加器" class="headerlink" title="半加器"></a>半加器</h3><p><code>半加器</code>电路是指对两个输入数据<code>位相加</code>，输出一个<code>结果位</code>和<code>进位</code>，<code>没有进位输入</code>的加法器电路。 是实现两个<code>一位二进制数</code>的<code>加法运算电路</code>。</p><p>实现原理</p><p>结果S是AB的异或进位C是AB的与<br>$$<br>S = \overline{A}B + \overline{B}A<br>$$</p><p>$$<br>C = AB<br>$$</p><p>真值表：</p><table><thead><tr><th>A</th><th>B</th><th>S</th><th>C</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><p>电路实现：</p><p><img src="/2023/09/22/8-wei-2-jin-zhi-cpu-she-ji-he-shi-xian/image-20231022215644719.png" alt="半加器"></p><p><img src="/2023/09/22/8-wei-2-jin-zhi-cpu-she-ji-he-shi-xian/image-20231024112756566.png" alt="测试电路"></p><h3 id="全加器"><a href="#全加器" class="headerlink" title="全加器"></a>全加器</h3><p>门电路实现<code>两个二进制数相加</code>并求出和的组合线路，称为<code>一位全加器</code>。一位全加器可以处理低位<code>进位</code>，并输出本位加法进位。</p><p>实现原理<br>$$<br>S_i = A_i \bigoplus B_i\bigoplus C_{i-1}<br>$$</p><p>$$<br>C_i=A_iC_i+A_iB_i+B_iC_{i-1}<br>$$</p><p>真值表：</p><table><thead><tr><th>C1</th><th>A</th><th>B</th><th>S</th><th>C2</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>电路实现：</p><p><img src="/2023/09/22/8-wei-2-jin-zhi-cpu-she-ji-he-shi-xian/image-20231022222714508.png" alt="全加器"></p><p><img src="/2023/09/22/8-wei-2-jin-zhi-cpu-she-ji-he-shi-xian/image-20231024112738351.png" alt="测试电路"></p><h4 id="8位串行加法器"><a href="#8位串行加法器" class="headerlink" title="8位串行加法器"></a>8位串行加法器</h4><p><img src="/2023/09/22/8-wei-2-jin-zhi-cpu-she-ji-he-shi-xian/image-20231024112647739.png" alt="8位串行加法器"></p><p><img src="/2023/09/22/8-wei-2-jin-zhi-cpu-she-ji-he-shi-xian/image-20231024112722939.png" alt="测试电路"></p><h4 id="8位并行加法器"><a href="#8位并行加法器" class="headerlink" title="8位并行加法器"></a>8位并行加法器</h4>]]></content>
      
      
      <categories>
          
          <category> 计组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIN聊天室</title>
      <link href="/2023/09/12/gin-liao-tian-shi/"/>
      <url>/2023/09/12/gin-liao-tian-shi/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> go </tag>
            
            <tag> gin </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ros小车搭建</title>
      <link href="/2023/07/13/ros-xiao-che-da-jian/"/>
      <url>/2023/07/13/ros-xiao-che-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、硬件准备"><a href="#一、硬件准备" class="headerlink" title="一、硬件准备"></a>一、硬件准备</h2><p>上位机：树莓派4B*1（TF卡16G以上、读卡器）</p><p>下位机：arduino 2560*1</p><p>L298N电机驱动板*1</p><p>霍尔编码器减速电机*2</p><p>A1M8激光雷达</p><p>12V转5V降压模块</p><p>12V电源*1</p><p>充电宝*1</p><p>万向轮*1</p><p>面包板*1</p><p>杜邦线诺干</p><p>亚克力板*2</p><h2 id="二、设计思路"><a href="#二、设计思路" class="headerlink" title="二、设计思路"></a>二、设计思路</h2><p>双轮差速ros小车，通过下位机来控制小车运动，上位机输入指令，通过ros_arduino_bridge建立arduino和树莓派的消息通信。由于电机需要12V电压不能直接用arduino的供电，需要通过电机驱动板作为媒介，编码器直接连接到arduino。树莓派作为主机，PC作为从机来查看建图等功能的实现。</p><p><img src="/2023/07/13/ros-xiao-che-da-jian/image-20230715152319518.png" alt="具体接线"></p><p><img src="/2023/07/13/ros-xiao-che-da-jian/image-20230715152858031.png"></p><h2 id="三、下位机程序"><a href="#三、下位机程序" class="headerlink" title="三、下位机程序"></a>三、下位机程序</h2><h3 id="1-ros-arduino-bridge"><a href="#1-ros-arduino-bridge" class="headerlink" title="1.ros_arduino__bridge"></a>1.ros_arduino__bridge</h3><p>该功能包包含Arduino库和用来控制Arduino的ROS驱动包，它旨在成为在ROS下运行Arduino控制的机器人的完整解决方案。</p><p>其中当前主要关注的是:功能包集中一个兼容不同驱动的机器人的基本控制器（base controller），它可以接收ROS Twist类型的消息，可以发布里程计数据。</p><p><strong>下载:</strong></p><p>进入ROS工作空间的src目录,输入命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/hbrobotics/ros_arduino_bridge.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>文件说明</strong></p><pre class="line-numbers language-none"><code class="language-none">├── ros_arduino_bridge                      # metapackage (元功能包)│   ├── CMakeLists.txt│   └── package.xml├── ros_arduino_firmware                    #固件包，更新到Arduino│   ├── CMakeLists.txt│   ├── package.xml│   └── src│       └── libraries                       #库目录│           ├── MegaRobogaiaPololu          #针对Pololu电机控制器，MegaRobogaia编码器的头文件定义│           │   ├── commands.h              #定义命令头文件│           │   ├── diff_controller.h       #差分轮PID控制头文件│           │   ├── MegaRobogaiaPololu.ino  #PID实现文件│           │   ├── sensors.h               #传感器相关实现，超声波测距，Ping函数│           │   └── servos.h                #伺服器头文件│           └── ROSArduinoBridge            #Arduino相关库定义│               ├── commands.h              #定义命令│               ├── diff_controller.h       #差分轮PID控制头文件│               ├── encoder_driver.h        #编码器驱动头文件│               ├── encoder_driver.ino      #编码器驱动实现, 读取编码器数据，重置编码器等│               ├── motor_driver.h          #电机驱动头文件│               ├── motor_driver.ino        #电机驱动实现，初始化控制器，设置速度│               ├── ROSArduinoBridge.ino    #核心功能实现，程序入口│               ├── sensors.h               #传感器头文件及实现│               ├── servos.h                #伺服器头文件，定义插脚，类│               └── servos.ino              #伺服器实现├── ros_arduino_msgs                        #消息定义包│   ├── CMakeLists.txt│   ├── msg                                 #定义消息│   │   ├── AnalogFloat.msg                 #定义模拟IO浮点消息│   │   ├── Analog.msg                      #定义模拟IO数字消息│   │   ├── ArduinoConstants.msg            #定义常量消息│   │   ├── Digital.msg                     #定义数字IO消息│   │   └── SensorState.msg                 #定义传感器状态消息│   ├── package.xml│   └── srv                                 #定义服务│       ├── AnalogRead.srv                  #模拟IO输入│       ├── AnalogWrite.srv                 #模拟IO输出│       ├── DigitalRead.srv                 #数字IO输入│       ├── DigitalSetDirection.srv　　　　 #数字IO设置方向│       ├── DigitalWrite.srv                #数字IO输入│       ├── ServoRead.srv                   #伺服电机输入│       └── ServoWrite.srv                  #伺服电机输出└── ros_arduino_python                      #ROS相关的Python包，用于上位机，树莓派等开发板或电脑等。    ├── CMakeLists.txt    ├── config                              #配置目录    │   └── arduino_params.yaml             #定义相关参数，端口，rate，PID，sensors等默认参数。由arduino.launch调用    ├── launch    │   └── arduino.launch                  #启动文件    ├── nodes    │   └── arduino_node.py                 #python文件,实际处理节点，由arduino.launch调用，即可单独调用。    ├── package.xml    ├── setup.py    └── src                                 #Python类包目录        └── ros_arduino_python            ├── arduino_driver.py           #Arduino驱动类            ├── arduino_sensors.py          #Arduino传感器类            ├── base_controller.py          #基本控制类，订阅cmd_vel话题，发布odom话题            └── __init__.py                 #类包默认空文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ros_arduino_bridge/ros_arduino_firmware/src/libraries/ROSArduinoBridge</li><li>ros_arduino_bridge/ros_arduino_python/config/arduino_params.yaml</li></ul><p>前者是Arduino端的固件包实现，需要修改并上传至Arduino电路板；</p><p>后者是ROS端的一个配置文件，相关驱动已经封装完毕，我们只需要修改配置信息即可。</p><h3 id="2-添加编码器驱动"><a href="#2-添加编码器驱动" class="headerlink" title="2.添加编码器驱动"></a>2.添加编码器驱动</h3><p><img src="/2023/07/13/ros-xiao-che-da-jian/image-20230717155016726.png"></p><p>在主文件中自定义的编码器驱动和电机驱动</p><p>在encoder_driver的头文件添加引脚定义以及需要用到的函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#define ARDUINO_MY_COUNTER  //定义引脚  #define LEFT_A 18 //5  #define LEFT_B 19 //4  #define RIGHT_A 21 //2  #define RIGHT_B 20 //3  //声明函数  //1.初始化函数：设置引脚操作模式，添加中断  void initEncoder();  //2.中断函数  void leftEncoderEvent();  void rightEncoderEvent();#endif//------------------------------------------------------------------   long readEncoder(int i);void resetEncoder(int i);void resetEncoders();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>encoder_driver文件内容</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifdef USE_BASE#ifdef defined ARDUINO_MY_COUNTER  //功能左右电机的脉冲计数  //计数器  volatile long left_count = 0L;  volatile long right_count = 0L;  //初始化  void initEncoder(){    pinMode(LEFT_A,INPUT);    pinMode(LEFT_B,INPUT);    pinMode(RIGHT_A,INPUT);    pinMode(RIGHT_B,INPUT);    //添加中断    attachInterrupt(5,leftEncoderEvent,CHANGE);    //attachInterrupt(4,leftEncoderEvent,CHANGE);    attachInterrupt(2,rightEncoderEvent,CHANGE);    //attachInterrupt(1,rightEncoderEvent,CHANGE);  }  //编写中断的回调函数   void leftEncoderEvent(){    if(digitalRead(LEFT_A) == HIGH){      if(digitalRead(LEFT_B) == HIGH){        left_count++;      } else {        left_count--;      }    } else {      if(digitalRead(LEFT_B) == LOW){        left_count++;      } else {        left_count--;      }    }   }   void rightEncoderEvent(){    if(digitalRead(RIGHT_A) == HIGH){      if(digitalRead(RIGHT_B) == HIGH){        right_count++;      } else {        right_count--;      }    } else {      if(digitalRead(RIGHT_B) == LOW){        right_count++;      } else {        right_count--;      }    }     }  //实现编码器数据读和重置   long readEncoder(int i){    if (i == LEFT)      return left_count;    if (i == RIGHT)      return right_count;  }  void resetEncoder(int i){    if (i == LEFT){      left_count = 0L;      return;    } else {       right_count = 0L;      return;    }  }#endif/* Wrap the encoder reset function */void resetEncoders() {  resetEncoder(LEFT);  resetEncoder(RIGHT);}#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用两倍频计数</p><h3 id="3-添加电机驱动模块"><a href="#3-添加电机驱动模块" class="headerlink" title="3.添加电机驱动模块"></a>3.添加电机驱动模块</h3><p>在motor_driver的头文件添加引脚定义以及需要用到的函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#define L298N_MOTOR_DRIVER  #define LEFT_DIR1 7  #define LEFT_DIR2 8  #define LEFT_PWM 5  #define RIGHT_DIR1 9  #define RIGHT_DIR2 10  #define RIGHT_PWM 6#endifvoid initMotorController();void setMotorSpeed(int i, int spd);void setMotorSpeeds(int leftSpeed, int rightSpeed);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>motor_driver内容</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifdef USE_BASE#ifdef defined L298N_MOTOR_DRIVER  //初始化  void initMotorController(){    pinMode(LEFT_DIR1,OUTPUT);    pinMode(LEFT_DIR2,OUTPUT);    pinMode(LEFT_PWM,OUTPUT);    pinMode(RIGHT_DIR1,OUTPUT);    pinMode(RIGHT_DIR2,OUTPUT);    pinMode(RIGHT_PWM,OUTPUT);  }  //设置单个电机的速度  void setMotorSpeed(int i, int spd){    unsigned char reverse = 0;    if (spd &lt; 0)    {      spd = -spd;      reverse = 1;    }    if (spd &gt; 255)      spd = 255;        if (i == LEFT) {       if(reverse == 1) { //正转        digitalWrite(LEFT_DIR1,HIGH);        digitalWrite(LEFT_DIR2,LOW);      }      else if (reverse == 0) {         digitalWrite(LEFT_DIR1,LOW);        digitalWrite(LEFT_DIR2,HIGH);      }       analogWrite(LEFT_PWM,spd);    }    if (i == RIGHT) {       if(reverse == 1) { //正转        digitalWrite(RIGHT_DIR1,HIGH);        digitalWrite(RIGHT_DIR2,LOW);      }      else if (reverse == 0) {         digitalWrite(RIGHT_DIR1,LOW);        digitalWrite(RIGHT_DIR2,HIGH);      }      analogWrite(RIGHT_PWM,spd);    }  }  //设置两个电机的速度  void setMotorSpeeds(int leftSpeed, int rightSpeed){    setMotorSpeed(RIGHT, rightSpeed);    setMotorSpeed(LEFT, leftSpeed);  }#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-实现PID调试"><a href="#4-实现PID调试" class="headerlink" title="4.实现PID调试"></a>4.实现PID调试</h3><p><img src="/2023/07/13/ros-xiao-che-da-jian/image-20230717160548057.png"></p><p>之前调试上面kp kd ki三个值直到稳定</p><p><img src="/2023/07/13/ros-xiao-che-da-jian/image-20230717160629152.png" alt="选择调试左轮还是右轮，单个调试精度更高"></p><h3 id="5-添加舵机驱动"><a href="#5-添加舵机驱动" class="headerlink" title="5.添加舵机驱动"></a>5.添加舵机驱动</h3><p><img src="/2023/07/13/ros-xiao-che-da-jian/image-20230717161208957.png" alt="ROSArduinoBridge已经定义好了"></p><p><a href="https://blog.csdn.net/qq_42748213/article/details/104432430">Arduino servo库函数_</a></p><p>servos.h文件</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifndef SERVOS_H#define SERVOS_H#define N_SERVOS 4 //定义四轴机械臂int stepDelay [N_SERVOS] = { 0, 0 }; // ms// Pinsbyte servoPins [N_SERVOS] = { 11 , 12 , 44 ,45 }; //定义引脚// 初始位置byte servoInitPosition [N_SERVOS] = { 90, 90 , 90 , 90 }; // [0, 180] degreesclass SweepServo //定义舵机类{  public:    SweepServo();    void initServo(        int servoPin, //引脚        int stepDelayMs, // ms        int initPosition); //初始位置    void doSweep();     void setTargetPosition(int position);    Servo getServo();  private:    Servo servo;    int stepDelayMs;    int currentPositionDegrees;    int targetPositionDegrees;    long lastSweepCommand;};SweepServo servos [N_SERVOS]; //创建对象#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>servos文件</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifdef USE_SERVOS// 构造函数SweepServo::SweepServo(){  this-&gt;currentPositionDegrees = 0;  this-&gt;targetPositionDegrees = 0;  this-&gt;lastSweepCommand = 0;}// 舵机初始化void SweepServo::initServo(    int servoPin,    int stepDelayMs,    int initPosition){  this-&gt;servo.attach(servoPin);  this-&gt;stepDelayMs = stepDelayMs;  this-&gt;currentPositionDegrees = initPosition;  this-&gt;targetPositionDegrees = initPosition;   this-&gt;lastSweepCommand = millis();}//舵机的扫描运动void SweepServo::doSweep(){  //获取当前时间和上一次扫描命令的时间差  int delta = millis() - this-&gt;lastSweepCommand;  // 检查是否到达下一个步进的时间  if (delta &gt; this-&gt;stepDelayMs) {    // 检查步进的方向    if (this-&gt;targetPositionDegrees &gt; this-&gt;currentPositionDegrees) {      // 如果目标位置大于当前位置，就增加当前位置的角度      this-&gt;currentPositionDegrees++;      // 把当前位置的角度写入舵机      this-&gt;servo.write(this-&gt;currentPositionDegrees);    }    else if (this-&gt;targetPositionDegrees &lt; this-&gt;currentPositionDegrees) {      // 如果目标位置小于当前位置，就减少当前位置的角度      this-&gt;currentPositionDegrees--;      // 把当前位置的角度写入舵机      this-&gt;servo.write(this-&gt;currentPositionDegrees);    }    // 如果目标位置等于当前位置，就不做任何操作    // 重置计时器    this-&gt;lastSweepCommand = millis();  }}// 设置偏转角度void SweepServo::setTargetPosition(int position){  this-&gt;targetPositionDegrees = position;}// 操作舵机目标Servo SweepServo::getServo(){  return this-&gt;servo;}#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、上位机程序"><a href="#四、上位机程序" class="headerlink" title="四、上位机程序"></a>四、上位机程序</h2><h3 id="1-树莓派4B安装ubuntu18-ROS环境"><a href="#1-树莓派4B安装ubuntu18-ROS环境" class="headerlink" title="1.树莓派4B安装ubuntu18+ROS环境"></a>1.树莓派4B安装ubuntu18+ROS环境</h3><p>最新版的4B是不支持自定义镜像的安装，需要再安装驱动放到镜像文件中，准备一个16G以上的内存卡和读卡器，使用Raspberry Pi Imager官方软件写入镜像文件</p><p><img src="/2023/07/13/ros-xiao-che-da-jian/image-20230717163906875.png" alt="桌面版预装ROS"></p><p><img src="/2023/07/13/ros-xiao-che-da-jian/image-20230717163946726.png" alt="固件文件"></p><p>将下载好的固件文件直接放在烧录好系统的内存卡中，全部覆盖文件</p><p>如果要安装别的版本，2022.4.4 版本更新的时候将默认用户 pi 删除，取消了默认的账户密码，也就是原来一直使用 的 pi 和对应的默认密码 raspberry 被取消了，如果用旧的方法写入最新系统，最后远程 SSH 也会报 Access Denied 报错。</p><p>而且自定的镜像的话需要安装上面的固件</p><p><a href="https://www.raspberrypi.com/software/">官方烧录工具</a></p><h3 id="2-分布式框架搭建"><a href="#2-分布式框架搭建" class="headerlink" title="2.分布式框架搭建"></a>2.分布式框架搭建</h3><p>1.树莓派设置静态IP</p><p>2.分别修改不同计算机的 /etc/hosts 文件，在该文件中加入对方的IP地址和计算机名:</p><p>主机端: 从机的IP    从机计算机名</p><p>从机端: 主机的IP    主机计算机名</p><p>3.配置~/.bashrc</p><p>树莓派端：</p><p>export ROS_MASTER_URI=http://主机IP:11311<br>export ROS_HOSTNAME=主机IP</p><p>PC端：</p><p>export ROS_MASTER_URI=http://主机IP:11311<br>export ROS_HOSTNAME=从机IP</p><p>测试</p><p>启动小乌龟案例，roscore必须在树莓派开</p><p>(补充：.bashrc是在用户目录的下的隐藏文件使用<code>cd home/你用用户名 &amp;&amp; vi .bashrc</code>打开)</p><h3 id="3-ssh远程连接"><a href="#3-ssh远程连接" class="headerlink" title="3.ssh远程连接"></a>3.ssh远程连接</h3><p>1.安装SSH客户端与服务端</p><p> <code>sudo apt- install openssh-server</code></p><p><code>sudo apt-get install openssh-client</code></p><p>2.服务端启动SSH服务</p><p>树莓派启动 ssh 服务:</p><p><code>sudo /etc/init.d/ssh start</code></p><p>设置开机自启</p><p><code>sudo systemctl enable ssh</code></p><p>3.客户端远程登陆服务端</p><p><code>ssh 账号@ip地址</code></p><p>然后根据提示，录入登陆密码，即可成功登陆。</p><p>4.实现数据传输</p><p>上传文件:</p><p><code>scp 本地文件路径 账号@ip:树莓派路径</code></p><p>上传文件夹:</p><p><code>scp -r 本地文件夹路径 账号@ip:树莓派路径</code></p><p>之后树莓派就不需要显示器了，接通电源之后直接使用PC机远程连接</p><h3 id="4-控制实现"><a href="#4-控制实现" class="headerlink" title="4.控制实现"></a>4.控制实现</h3><p>以下都是远程连接树莓派，在树莓派的操作</p><p>先将之前的ros_arduino_bridge上传到树莓派</p><p>安装功能包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python-serial<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/你的用户名/ros_arduino_bridge-indigo-devel/ros_arduino_python/config<span class="token function">cp</span> arduino_params.yaml my_arduino_params.yaml<span class="token function">vi</span> my_arduino_params.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文件内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">port: /dev/ttyUSB0 <span class="token comment">#视情况设置，一般设置为 /dev/ttyACM0 或 /dev/ttyUSB0</span>baud: <span class="token number">57600</span> <span class="token comment">#波特率</span>timeout: <span class="token number">0.1</span> <span class="token comment">#超时时间</span>rate: <span class="token number">50</span>sensorstate_rate: <span class="token number">10</span>use_base_controller: True  <span class="token comment">#启用基座控制器</span>base_controller_rate: <span class="token number">10</span>   base_frame: base_footprint <span class="token comment">#base_frame 设置</span><span class="token comment"># === Robot drivetrain parameters</span>wheel_diameter: <span class="token number">0.065</span> <span class="token comment">#车轮直径</span>wheel_track: <span class="token number">0.21</span> <span class="token comment">#轮间距</span>encoder_resolution: <span class="token number">3960</span><span class="token comment">#编码器精度(一圈的脉冲数 * 倍频 * 减速比)</span><span class="token comment">#gear_reduction: 1 #减速比</span><span class="token comment">#motors_reversed: False #转向取反</span><span class="token comment"># === PID parameters PID参数，根据3.4的PID调试结果填写</span>Kp: <span class="token number">5</span>Kd: <span class="token number">45</span>Ki: <span class="token number">0</span>Ko: <span class="token number">50</span>accel_limit: <span class="token number">1.0</span><span class="token comment"># === Sensor definitions.  Examples only - edit for your robot.</span><span class="token comment">#     Sensor type can be one of the follow (case sensitive!):</span><span class="token comment">#      * Ping</span><span class="token comment">#      * GP2D12</span><span class="token comment">#      * Analog</span><span class="token comment">#      * Digital</span><span class="token comment">#      * PololuMotorCurrent</span><span class="token comment">#      * PhidgetsVoltage</span><span class="token comment">#      * PhidgetsCurrent (20 Amp, DC)</span>sensors: <span class="token punctuation">{</span>  <span class="token comment">#motor_current_left:   {pin: 0, type: PololuMotorCurrent, rate: 5},</span>  <span class="token comment">#motor_current_right:  {pin: 1, type: PololuMotorCurrent, rate: 5},</span>  <span class="token comment">#ir_front_center:      {pin: 2, type: GP2D12, rate: 10},</span>  <span class="token comment">#sonar_front_center:   {pin: 5, type: Ping, rate: 10},</span>  arduino_led:          <span class="token punctuation">{</span>pin: <span class="token number">13</span>, type: Digital, rate: <span class="token number">5</span>, direction: output<span class="token punctuation">}</span> //闪烁LED<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-源码解析"><a href="#5-源码解析" class="headerlink" title="5.源码解析"></a>5.源码解析</h3><p><img src="/2023/07/13/ros-xiao-che-da-jian/image-20230717171155386.png" alt="文件结构"></p><h4 id="launch文件"><a href="#launch文件" class="headerlink" title="launch文件"></a>launch文件</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;launch<span class="token punctuation">&gt;</span>   &lt;node name="arduino" pkg="ros_arduino_python" type="arduino_node.py" output="screen"<span class="token punctuation">&gt;</span>      &lt;<span class="token tag">!--</span>加载一个参数文件到参数服务器 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token scalar string">      &lt;rosparam file="$(find ros_arduino_python)/config/my_arduino_params.yaml" command="load" /&gt;</span>   &lt;/node<span class="token punctuation">&gt;</span>&lt;/launch<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="nodes文件"><a href="#nodes文件" class="headerlink" title="nodes文件"></a>nodes文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> ros_arduino_python<span class="token punctuation">.</span>arduino_driver <span class="token keyword">import</span> Arduino  <span class="token comment"># 导入Arduino驱动类</span><span class="token keyword">from</span> ros_arduino_python<span class="token punctuation">.</span>arduino_sensors <span class="token keyword">import</span> <span class="token operator">*</span>       <span class="token comment"># 导入Arduino驱动类</span><span class="token keyword">from</span> ros_arduino_msgs<span class="token punctuation">.</span>srv <span class="token keyword">import</span> <span class="token operator">*</span>                     <span class="token comment"># 导入Arduino相关的服务消息类型</span><span class="token keyword">from</span> ros_arduino_python<span class="token punctuation">.</span>base_controller <span class="token keyword">import</span> BaseController <span class="token comment">#导入基础控制类</span><span class="token keyword">from</span> geometry_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Twist                    <span class="token comment"># 导入Twist消息类型，用于表示速度和角速度</span><span class="token keyword">import</span> os<span class="token punctuation">,</span> time  <span class="token comment">#系统时间操作功能包</span><span class="token keyword">import</span> thread    <span class="token comment">#多线程</span><span class="token keyword">from</span> serial<span class="token punctuation">.</span>serialutil <span class="token keyword">import</span> SerialException          <span class="token comment"># 导入SerialException异常类，用于处理串口通信错误</span><span class="token keyword">class</span> <span class="token class-name">ArduinoROS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment"># 定义一个类，表示Arduino与ROS的交互</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">'arduino'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span>rospy<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>   <span class="token comment"># 初始化一个节点，命名为arduino，并设置日志等级为INFO</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取节点的名称，并赋值给self.name属性</span>        rospy<span class="token punctuation">.</span>on_shutdown<span class="token punctuation">(</span>self<span class="token punctuation">.</span>shutdown<span class="token punctuation">)</span>  <span class="token comment"># 注册一个回调函数，在节点关闭时执行</span>        self<span class="token punctuation">.</span>port <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~port"</span><span class="token punctuation">,</span> <span class="token string">"/dev/ttyUSB0"</span><span class="token punctuation">)</span> <span class="token comment"># 获取串口参数，默认为/dev/ttyACM0，并赋值给self.port属性</span>        self<span class="token punctuation">.</span>baud <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~baud"</span><span class="token punctuation">,</span> <span class="token number">57600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 获取波特率参数，默认为57600，并赋值给self.baud属性</span>        self<span class="token punctuation">.</span>timeout <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~timeout"</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment"># 获取超时参数，默认为0.5秒，并赋值给self.timeout属性</span>        self<span class="token punctuation">.</span>base_frame <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~base_frame"</span><span class="token punctuation">,</span> <span class="token string">'base_link'</span><span class="token punctuation">)</span> <span class="token comment"># 获取基础坐标系参数</span>        self<span class="token punctuation">.</span>motors_reversed <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~motors_reversed"</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 获取电机反转参数，默认为False，并赋值给self.motors_reversed属性</span>        self<span class="token punctuation">.</span>rate <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~rate"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 获取节点运行频率参数，默认为50Hz，并赋值给self.rate属性</span>        r <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Rate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>rate<span class="token punctuation">)</span>  <span class="token comment"># 创建一个Rate对象，用于控制节点运行速度</span>        self<span class="token punctuation">.</span>sensorstate_rate <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~sensorstate_rate"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获取传感器状态发布频率参数，默认为10Hz，并赋值给self.sensorstate_rate属性</span>                self<span class="token punctuation">.</span>use_base_controller <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~use_base_controller"</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 获取是否使用基础控制器参数，默认为False，并赋值给self.use_base_controller属性</span>                now <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Time<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取当前时间，并赋值给now变量</span>        self<span class="token punctuation">.</span>t_delta_sensors <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Duration<span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>sensorstate_rate<span class="token punctuation">)</span>  <span class="token comment"># 计算传感器状态发布间隔时间，并赋值给self.t_delta_sensors属性</span>        self<span class="token punctuation">.</span>t_next_sensors <span class="token operator">=</span> now <span class="token operator">+</span> self<span class="token punctuation">.</span>t_delta_sensors <span class="token comment"># 计算下一次传感器状态发布时间，并赋值给self.t_next_sensors属性</span>                self<span class="token punctuation">.</span>cmd_vel <span class="token operator">=</span> Twist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建一个Twist对象，用于存储速度和角速度命令，并赋值给self.cmd_vel属性</span>        self<span class="token punctuation">.</span>cmd_vel_pub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Publisher<span class="token punctuation">(</span><span class="token string">'cmd_vel'</span><span class="token punctuation">,</span> Twist<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 创建一个发布者对象，用于发布速度和角速度命令到cmd_vel话题，并设置队列大小为5，并赋值给self.cmd_vel_pub属性</span>        self<span class="token punctuation">.</span>sensorStatePub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Publisher<span class="token punctuation">(</span><span class="token string">'~sensor_state'</span><span class="token punctuation">,</span> SensorState<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个发布者对象，用于发布传感器状态到~sensor_state话题，并设置队列大小为5，并赋值给self.sensorStatePub属性</span>        rospy<span class="token punctuation">.</span>Service<span class="token punctuation">(</span><span class="token string">'~servo_write'</span><span class="token punctuation">,</span> ServoWrite<span class="token punctuation">,</span> self<span class="token punctuation">.</span>ServoWriteHandler<span class="token punctuation">)</span><span class="token comment"># 创建一个服务对象，用于提供~servo_write服务，接收ServoWrite类型的请求，并调用self.ServoWriteHandler方法处理</span>        rospy<span class="token punctuation">.</span>Service<span class="token punctuation">(</span><span class="token string">'~servo_read'</span><span class="token punctuation">,</span> ServoRead<span class="token punctuation">,</span> self<span class="token punctuation">.</span>ServoReadHandler<span class="token punctuation">)</span> <span class="token comment"># 创建一个服务对象，用于提供~servo_read服务，接收ServoRead类型的请求，并调用self.ServoReadHandler方法处理</span>        rospy<span class="token punctuation">.</span>Service<span class="token punctuation">(</span><span class="token string">'~digital_set_direction'</span><span class="token punctuation">,</span> DigitalSetDirection<span class="token punctuation">,</span> self<span class="token punctuation">.</span>DigitalSetDirectionHandler<span class="token punctuation">)</span> <span class="token comment"># 创建一个服务对象，用于提供~digital_set_direction服务，接收DigitalSetDirection类型的请求，并调用self.DigitalSetDirectionHandler方法处理</span>        rospy<span class="token punctuation">.</span>Service<span class="token punctuation">(</span><span class="token string">'~digital_write'</span><span class="token punctuation">,</span> DigitalWrite<span class="token punctuation">,</span> self<span class="token punctuation">.</span>DigitalWriteHandler<span class="token punctuation">)</span> <span class="token comment"># 创建一个服务对象，用于提供~digital_write服务，接收DigitalWrite类型的请求，并调用self.DigitalWriteHandler方法处理</span>        rospy<span class="token punctuation">.</span>Service<span class="token punctuation">(</span><span class="token string">'~digital_read'</span><span class="token punctuation">,</span> DigitalRead<span class="token punctuation">,</span> self<span class="token punctuation">.</span>DigitalReadHandler<span class="token punctuation">)</span><span class="token comment"># 创建一个服务对象，用于提供~digital_read服务，接收DigitalRead类型的请求，并调用self.DigitalReadHandler方法处理</span>        rospy<span class="token punctuation">.</span>Service<span class="token punctuation">(</span><span class="token string">'~analog_write'</span><span class="token punctuation">,</span> AnalogWrite<span class="token punctuation">,</span> self<span class="token punctuation">.</span>AnalogWriteHandler<span class="token punctuation">)</span> <span class="token comment"># 创建一个服务对象，用于提供~analog_write服务，接收AnalogWrite类型的请求，并调用self.AnalogWriteHandler方法处理</span>        rospy<span class="token punctuation">.</span>Service<span class="token punctuation">(</span><span class="token string">'~analog_read'</span><span class="token punctuation">,</span> AnalogRead<span class="token punctuation">,</span> self<span class="token punctuation">.</span>AnalogReadHandler<span class="token punctuation">)</span><span class="token comment"># 创建一个服务对象，用于提供~analog_read服务，接收AnalogRead类型的请求，并调用self.AnalogReadHandler方法处理</span>        self<span class="token punctuation">.</span>controller <span class="token operator">=</span> Arduino<span class="token punctuation">(</span>self<span class="token punctuation">.</span>port<span class="token punctuation">,</span> self<span class="token punctuation">.</span>baud<span class="token punctuation">,</span> self<span class="token punctuation">.</span>timeout<span class="token punctuation">,</span> self<span class="token punctuation">.</span>motors_reversed<span class="token punctuation">)</span> <span class="token comment"># 创建一个Arduino对象，用于与Arduino通信，并赋值给self.controller属性</span>        self<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 调用Arduino对象的connect方法，连接Arduino设备</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Connected to Arduino on port "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>port <span class="token operator">+</span> <span class="token string">" at "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>baud<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" baud"</span><span class="token punctuation">)</span> <span class="token comment"># 打印日志信息，显示已经连接到Arduino设备</span>             mutex <span class="token operator">=</span> thread<span class="token punctuation">.</span>allocate_lock<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个互斥锁对象，用于同步多线程操作，并赋值给mutex变量</span>        self<span class="token punctuation">.</span>mySensors <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建一个空列表对象，用于存储传感器对象，并赋值给self.mySensors属性</span>        sensor_params <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~sensors"</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 获取传感器参数，默认为空字典，并赋值给sensor_params变量</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> params <span class="token keyword">in</span> sensor_params<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 遍历传感器参数中的每一项</span>       <span class="token comment">#这里并没有使用到传感器</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                params<span class="token punctuation">[</span><span class="token string">'direction'</span><span class="token punctuation">]</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                params<span class="token punctuation">[</span><span class="token string">'direction'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'input'</span>            <span class="token keyword">if</span> params<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Ping"</span><span class="token punctuation">:</span>                sensor <span class="token operator">=</span> Ping<span class="token punctuation">(</span>self<span class="token punctuation">.</span>controller<span class="token punctuation">,</span> name<span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'pin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>base_frame<span class="token punctuation">)</span>            <span class="token keyword">elif</span> params<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"GP2D12"</span><span class="token punctuation">:</span>                sensor <span class="token operator">=</span> GP2D12<span class="token punctuation">(</span>self<span class="token punctuation">.</span>controller<span class="token punctuation">,</span> name<span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'pin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>base_frame<span class="token punctuation">)</span>            <span class="token keyword">elif</span> params<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Digital'</span><span class="token punctuation">:</span>                sensor <span class="token operator">=</span> DigitalSensor<span class="token punctuation">(</span>self<span class="token punctuation">.</span>controller<span class="token punctuation">,</span> name<span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'pin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>base_frame<span class="token punctuation">,</span> direction<span class="token operator">=</span>params<span class="token punctuation">[</span><span class="token string">'direction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> params<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Analog'</span><span class="token punctuation">:</span>                sensor <span class="token operator">=</span> AnalogSensor<span class="token punctuation">(</span>self<span class="token punctuation">.</span>controller<span class="token punctuation">,</span> name<span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'pin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>base_frame<span class="token punctuation">,</span> direction<span class="token operator">=</span>params<span class="token punctuation">[</span><span class="token string">'direction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> params<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'PololuMotorCurrent'</span><span class="token punctuation">:</span>                sensor <span class="token operator">=</span> PololuMotorCurrent<span class="token punctuation">(</span>self<span class="token punctuation">.</span>controller<span class="token punctuation">,</span> name<span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'pin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>base_frame<span class="token punctuation">)</span>            <span class="token keyword">elif</span> params<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'PhidgetsVoltage'</span><span class="token punctuation">:</span>                sensor <span class="token operator">=</span> PhidgetsVoltage<span class="token punctuation">(</span>self<span class="token punctuation">.</span>controller<span class="token punctuation">,</span> name<span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'pin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>base_frame<span class="token punctuation">)</span>            <span class="token keyword">elif</span> params<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'PhidgetsCurrent'</span><span class="token punctuation">:</span>                sensor <span class="token operator">=</span> PhidgetsCurrent<span class="token punctuation">(</span>self<span class="token punctuation">.</span>controller<span class="token punctuation">,</span> name<span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'pin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'rate'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>base_frame<span class="token punctuation">)</span>       <span class="token comment">#-----------------------------------------------------------------------------         </span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>mySensors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sensor<span class="token punctuation">)</span>                rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" published on topic "</span> <span class="token operator">+</span> rospy<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/sensor/"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                rospy<span class="token punctuation">.</span>logerr<span class="token punctuation">(</span><span class="token string">"Sensor type "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" not recognized."</span><span class="token punctuation">)</span><span class="token keyword">if</span> self<span class="token punctuation">.</span>use_base_controller<span class="token punctuation">:</span>  <span class="token comment"># 如果self.use_base_controller属性为真</span>            self<span class="token punctuation">.</span>myBaseController <span class="token operator">=</span> BaseController<span class="token punctuation">(</span>self<span class="token punctuation">.</span>controller<span class="token punctuation">,</span> self<span class="token punctuation">.</span>base_frame<span class="token punctuation">,</span> self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"_base_controller"</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个BaseController对象，用于控制机器人的运动，并赋值给self.myBaseController属性</span>        <span class="token keyword">while</span> <span class="token keyword">not</span> rospy<span class="token punctuation">.</span>is_shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 当节点没有关闭时，循环执行以下代码</span>            <span class="token keyword">for</span> sensor <span class="token keyword">in</span> self<span class="token punctuation">.</span>mySensors<span class="token punctuation">:</span>  <span class="token comment"># 遍历self.mySensors列表中的每一个传感器对象</span>                mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取互斥锁，防止其他线程干扰</span>                sensor<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用传感器对象的poll方法，读取传感器数据并发布到相应话题</span>                mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 释放互斥锁，允许其他线程操作</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>use_base_controller<span class="token punctuation">:</span>  <span class="token comment"># 如果self.use_base_controller属性为真</span>                mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取互斥锁，防止其他线程干扰</span>                self<span class="token punctuation">.</span>myBaseController<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用基础控制器对象的poll方法，读取速度和角速度命令并发送给Arduino</span>                mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 释放互斥锁，允许其他线程操作</span>            now <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Time<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取当前时间，并赋值给now变量</span>            <span class="token keyword">if</span> now <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>t_next_sensors<span class="token punctuation">:</span>  <span class="token comment"># 如果当前时间大于下一次传感器状态发布时间</span>                msg <span class="token operator">=</span> SensorState<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个SensorState对象，用于存储所有传感器的名称和值，并赋值给msg变量</span>                msg<span class="token punctuation">.</span>header<span class="token punctuation">.</span>frame_id <span class="token operator">=</span> self<span class="token punctuation">.</span>base_frame  <span class="token comment"># 设置消息头中的坐标系为self.base_frame属性</span>                msg<span class="token punctuation">.</span>header<span class="token punctuation">.</span>stamp <span class="token operator">=</span> now  <span class="token comment"># 设置消息头中的时间戳为当前时间</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>mySensors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 遍历self.mySensors列表中的每一个传感器对象的索引</span>                    msg<span class="token punctuation">.</span>name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mySensors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment"># 把传感器对象的名称添加到msg.name列表中</span>                    msg<span class="token punctuation">.</span>value<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mySensors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># 把传感器对象的值添加到msg.value列表中</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment"># 尝试执行以下代码</span>                    self<span class="token punctuation">.</span>sensorStatePub<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>  <span class="token comment"># 调用self.sensorStatePub发布者对象的publish方法，发布msg消息到~sensor_state话题</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>  <span class="token comment"># 如果发生异常</span>                    <span class="token keyword">pass</span>  <span class="token comment"># 不做任何处理</span>                self<span class="token punctuation">.</span>t_next_sensors <span class="token operator">=</span> now <span class="token operator">+</span> self<span class="token punctuation">.</span>t_delta_sensors  <span class="token comment"># 更新下一次传感器状态发布时间为当前时间加上传感器状态发布间隔时间</span>            r<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用Rate对象的sleep方法，让节点按照设定的频率运行</span><span class="token comment">#----------------------------------------------------------------------------------------------</span>    <span class="token keyword">def</span> <span class="token function">ServoWriteHandler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个方法，用于处理~servo_write服务的请求，参数为req</span>        self<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>servo_write<span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># 调用Arduino对象的servo_write方法，向指定id的舵机写入指定值</span>        <span class="token keyword">return</span> ServoWriteResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 返回一个ServoWriteResponse对象，表示服务响应</span>    <span class="token keyword">def</span> <span class="token function">ServoReadHandler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个方法，用于处理~servo_read服务的请求，参数为req</span>        pos <span class="token operator">=</span> self<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>servo_read<span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>  <span class="token comment"># 调用Arduino对象的servo_read方法，从指定id的舵机读取位置，并赋值给pos变量</span>        <span class="token keyword">return</span> ServoReadResponse<span class="token punctuation">(</span>pos<span class="token punctuation">)</span>  <span class="token comment"># 返回一个ServoReadResponse对象，表示服务响应，包含pos变量</span>    <span class="token keyword">def</span> <span class="token function">DigitalSetDirectionHandler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个方法，用于处理~digital_set_direction服务的请求，参数为req</span>        self<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>pin_mode<span class="token punctuation">(</span>req<span class="token punctuation">.</span>pin<span class="token punctuation">,</span> req<span class="token punctuation">.</span>direction<span class="token punctuation">)</span>  <span class="token comment"># 调用Arduino对象的pin_mode方法，设置指定引脚的方向</span>        <span class="token keyword">return</span> DigitalSetDirectionResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 返回一个DigitalSetDirectionResponse对象，表示服务响应</span>    <span class="token keyword">def</span> <span class="token function">DigitalWriteHandler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个方法，用于处理~digital_write服务的请求，参数为req</span>        self<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>digital_write<span class="token punctuation">(</span>req<span class="token punctuation">.</span>pin<span class="token punctuation">,</span> req<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># 调用Arduino对象的digital_write方法，向指定引脚写入数字值</span>        <span class="token keyword">return</span> DigitalWriteResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 返回一个DigitalWriteResponse对象，表示服务响应</span>    <span class="token keyword">def</span> <span class="token function">DigitalReadHandler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个方法，用于处理~digital_read服务的请求，参数为req</span>        value <span class="token operator">=</span> self<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>digital_read<span class="token punctuation">(</span>req<span class="token punctuation">.</span>pin<span class="token punctuation">)</span>  <span class="token comment"># 调用Arduino对象的digital_read方法，从指定引脚读取数字值，并赋值给value变量</span>        <span class="token keyword">return</span> DigitalReadResponse<span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment"># 返回一个DigitalReadResponse对象，表示服务响应，包含value变量</span>    <span class="token keyword">def</span> <span class="token function">AnalogWriteHandler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个方法，用于处理~analog_write服务的请求，参数为req</span>        self<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>analog_write<span class="token punctuation">(</span>req<span class="token punctuation">.</span>pin<span class="token punctuation">,</span> req<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># 调用Arduino对象的analog_write方法，向指定引脚写入模拟值</span>        <span class="token keyword">return</span> AnalogWriteResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 返回一个AnalogWriteResponse对象，表示服务响应</span>    <span class="token keyword">def</span> <span class="token function">AnalogReadHandler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个方法，用于处理~analog_read服务的请求，参数为req</span>        value <span class="token operator">=</span> self<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>analog_read<span class="token punctuation">(</span>req<span class="token punctuation">.</span>pin<span class="token punctuation">)</span>  <span class="token comment"># 调用Arduino对象的analog_read方法，从指定引脚读取模拟值，并赋值给value变量</span>        <span class="token keyword">return</span> AnalogReadResponse<span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment"># 返回一个AnalogReadResponse对象，表示服务响应，包含value变量</span>    <span class="token keyword">def</span> <span class="token function">shutdown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个方法，在节点关闭时执行</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Shutting down Arduino Node..."</span><span class="token punctuation">)</span>  <span class="token comment"># 打印日志信息，显示正在关闭Arduino节点</span>             <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment"># 尝试执行以下代码</span>            rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Stopping the robot..."</span><span class="token punctuation">)</span>  <span class="token comment"># 打印日志信息，显示正在停止机器人</span>            self<span class="token punctuation">.</span>cmd_vel_pub<span class="token punctuation">.</span>Publish<span class="token punctuation">(</span>Twist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 调用self.cmd_vel_pub发布者对象的publish方法，发布一个空的Twist消息到cmd_vel话题，让机器人停止运动</span>            rospy<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 等待2秒</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>  <span class="token comment"># 如果发生异常</span>            <span class="token keyword">pass</span>  <span class="token comment"># 不做任何处理</span>             <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment"># 尝试执行以下代码</span>            self<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用Arduino对象的close方法，关闭与Arduino设备的连接</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>  <span class="token comment"># 如果发生异常</span>            <span class="token keyword">pass</span>  <span class="token comment"># 不做任何处理</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>  <span class="token comment"># 最后执行以下代码</span>            rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Serial port closed."</span><span class="token punctuation">)</span>  <span class="token comment"># 打印日志信息，显示串口已经关闭</span>            os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 强制退出程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  <span class="token comment"># 如果这个文件是主程序</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment"># 尝试执行以下代码</span>        myArduino <span class="token operator">=</span> ArduinoROS<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个ArduinoROS对象，并赋值给myArduino变量</span>    <span class="token keyword">except</span> SerialException<span class="token punctuation">:</span>  <span class="token comment"># 如果发生SerialException异常</span>        rospy<span class="token punctuation">.</span>logerr<span class="token punctuation">(</span><span class="token string">"Serial exception trying to open port."</span><span class="token punctuation">)</span>  <span class="token comment"># 打印错误信息，显示尝试打开串口时发生异常</span>        os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 强制退出程序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="src文件"><a href="#src文件" class="headerlink" title="src文件"></a>src文件</h4><h5 id="arduino-driver-py"><a href="#arduino-driver-py" class="headerlink" title="arduino_driver.py"></a>arduino_driver.py</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> thread<span class="token keyword">from</span> math <span class="token keyword">import</span> pi <span class="token keyword">as</span> PI<span class="token punctuation">,</span> degrees<span class="token punctuation">,</span> radians<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token punctuation">,</span> traceback<span class="token keyword">from</span> serial<span class="token punctuation">.</span>serialutil <span class="token keyword">import</span> SerialException<span class="token keyword">from</span> serial <span class="token keyword">import</span> Serial SERVO_MAX <span class="token operator">=</span> <span class="token number">180</span> <span class="token comment">#舵机最大角度</span>SERVO_MIN <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment">#舵机最小角度</span><span class="token keyword">class</span> <span class="token class-name">Arduino</span><span class="token punctuation">:</span>      N_ANALOG_PORTS <span class="token operator">=</span> <span class="token number">6</span>  <span class="token comment">#模拟端口数量</span>    N_DIGITAL_PORTS <span class="token operator">=</span> <span class="token number">12</span>  <span class="token comment">#数字端口的数量</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token string">"/dev/ttyUSB0"</span><span class="token punctuation">,</span> baudrate<span class="token operator">=</span><span class="token number">57600</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> motors_reversed<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>PID_RATE <span class="token operator">=</span> <span class="token number">30</span> <span class="token comment">#固定值，不可改变</span>        self<span class="token punctuation">.</span>PID_INTERVAL <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">30</span>  <span class="token comment">#PID控制器间隔时间</span>        self<span class="token punctuation">.</span>port <span class="token operator">=</span> port        self<span class="token punctuation">.</span>baudrate <span class="token operator">=</span> baudrate         self<span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout         self<span class="token punctuation">.</span>encoder_count <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#编码计数</span>        self<span class="token punctuation">.</span>writeTimeout <span class="token operator">=</span> timeout        self<span class="token punctuation">.</span>interCharTimeout <span class="token operator">=</span> timeout <span class="token operator">/</span> <span class="token number">30.</span>        self<span class="token punctuation">.</span>motors_reversed <span class="token operator">=</span> motors_reversed <span class="token comment">#电机是否反转</span>        self<span class="token punctuation">.</span>mutex <span class="token operator">=</span> thread<span class="token punctuation">.</span>allocate_lock<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>analog_sensor_cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>N_ANALOG_PORTS        self<span class="token punctuation">.</span>digital_sensor_cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>N_DIGITAL_PORTS    <span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#定义函数连接Arduino</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"Connecting to Arduino on port"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>port<span class="token punctuation">,</span> <span class="token string">"..."</span>            self<span class="token punctuation">.</span>port <span class="token operator">=</span> Serial<span class="token punctuation">(</span>port<span class="token operator">=</span>self<span class="token punctuation">.</span>port<span class="token punctuation">,</span> baudrate<span class="token operator">=</span>self<span class="token punctuation">.</span>baudrate<span class="token punctuation">,</span> timeout<span class="token operator">=</span>self<span class="token punctuation">.</span>timeout<span class="token punctuation">,</span> writeTimeout<span class="token operator">=</span>self<span class="token punctuation">.</span>writeTimeout<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            test <span class="token operator">=</span> self<span class="token punctuation">.</span>get_baud<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#再次调用self.get_baud方法，获取Arduino设备的波特率，并赋值给test变量</span>            <span class="token keyword">if</span> test <span class="token operator">!=</span> self<span class="token punctuation">.</span>baudrate<span class="token punctuation">:</span>                 time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                 test <span class="token operator">=</span> self<span class="token punctuation">.</span>get_baud<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> test <span class="token operator">!=</span> self<span class="token punctuation">.</span>baudrate<span class="token punctuation">:</span> <span class="token comment"># 如果test变量仍然不等于self.baudrate属性</span>                    <span class="token keyword">raise</span> SerialException <span class="token comment">#异常退出</span>            <span class="token keyword">print</span> <span class="token string">"Connected at"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>baudrate            <span class="token keyword">print</span> <span class="token string">"Arduino is ready."</span>        <span class="token keyword">except</span> SerialException<span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"Serial Exception:"</span>            <span class="token keyword">print</span> sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">"Traceback follows:"</span>            traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">"Cannot connect to Arduino!"</span>            os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">open</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#打开串口</span>        self<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#关闭串口</span>        self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个实例方法，用于发送命令到Arduino设备，参数为cmd</span>        self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cmd <span class="token operator">+</span> <span class="token string">'\r'</span><span class="token punctuation">)</span>  <span class="token comment"># 调用Serial对象的write方法，写入cmd参数加上回车符到串口</span>    <span class="token keyword">def</span> <span class="token function">recv</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#定义一个实例方法，用于接收Arduino设备的响应，参数为timeout，默认为0.5秒</span>        timeout <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> self<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>        c <span class="token operator">=</span> <span class="token string">''</span>        value <span class="token operator">=</span> <span class="token string">''</span>        attempts <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#记录字符大小</span>        <span class="token keyword">while</span> c <span class="token operator">!=</span> <span class="token string">'\r'</span><span class="token punctuation">:</span>  <span class="token comment"># 当c变量不等于回车符时</span>            c <span class="token operator">=</span> self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 调用Serial对象的read方法，从串口读取一个字节，并赋值给c变量</span>            value <span class="token operator">+=</span> c  <span class="token comment"># 把c变量的值追加到value变量中</span>            attempts <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 把attempts变量加1</span>            <span class="token keyword">if</span> attempts <span class="token operator">*</span> self<span class="token punctuation">.</span>interCharTimeout <span class="token operator">&gt;</span> timeout<span class="token punctuation">:</span>  <span class="token comment"># 如果attempts变量乘以self.interCharTimeout属性大于timeout变量</span>                <span class="token keyword">return</span> <span class="token boolean">None</span>        value <span class="token operator">=</span> value<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span> <span class="token comment"># 把value变量中的回车符去掉，并赋值给value变量</span>        <span class="token keyword">return</span> value <span class="token comment"># 返回value变量</span>    <span class="token keyword">def</span> <span class="token function">recv_ack</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个实例方法，用于接收Arduino设备的确认信号</span>        ack <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span> <span class="token comment"># 调用self.recv方法，接收Arduino设备的响应，并赋值给ack变量</span>        <span class="token keyword">return</span> ack <span class="token operator">==</span> <span class="token string">'OK'</span>    <span class="token keyword">def</span> <span class="token function">recv_int</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义一个实例方法，用于接收Arduino设备的整数响应</span>        value <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">recv_array</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            values <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timeout <span class="token operator">*</span> self<span class="token punctuation">.</span>N_ANALOG_PORTS<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个实例方法，用于执行命令并返回整数响应，参数为cmd</span>        self<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 调用互斥锁对象的acquire方法，获取锁</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>flushInput<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 调用Serial对象的flushInput方法，清空输入缓冲区</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        ntries <span class="token operator">=</span> <span class="token number">1</span>        attempts <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cmd <span class="token operator">+</span> <span class="token string">'\r'</span><span class="token punctuation">)</span> <span class="token comment"># 调用Serial对象的write方法，写入cmd参数加上回车符到串口</span>            value <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token comment"># 调用self.recv方法，接收Arduino设备的响应，并赋值给value变量</span>            <span class="token keyword">while</span> attempts <span class="token operator">&lt;</span> ntries <span class="token keyword">and</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">or</span> value <span class="token operator">==</span> <span class="token string">'Invalid Command'</span> <span class="token keyword">or</span> value <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token comment"># 当已经尝试次数小于尝试次数且value变量为空字符串或者'Invalid Command'或者None时，循环执行以下代码</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>flushInput<span class="token punctuation">(</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cmd <span class="token operator">+</span> <span class="token string">'\r'</span><span class="token punctuation">)</span>                    value <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span> <span class="token string">"Exception executing command: "</span> <span class="token operator">+</span> cmd                attempts <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">"Exception executing command: "</span> <span class="token operator">+</span> cmd            value <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">execute_array</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>flushInput<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        ntries <span class="token operator">=</span> <span class="token number">1</span>        attempts <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cmd <span class="token operator">+</span> <span class="token string">'\r'</span><span class="token punctuation">)</span>            values <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_array<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> attempts <span class="token operator">&lt;</span> ntries <span class="token keyword">and</span> <span class="token punctuation">(</span>values <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">or</span> values <span class="token operator">==</span> <span class="token string">'Invalid Command'</span> <span class="token keyword">or</span> values <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">or</span> values <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>flushInput<span class="token punctuation">(</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cmd <span class="token operator">+</span> <span class="token string">'\r'</span><span class="token punctuation">)</span>                    values <span class="token operator">=</span> self<span class="token punctuation">.</span>recv_array<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Exception executing command: "</span> <span class="token operator">+</span> cmd<span class="token punctuation">)</span>                attempts <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">"Exception executing command: "</span> <span class="token operator">+</span> cmd            <span class="token keyword">raise</span> SerialException            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            values <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> values    <span class="token keyword">def</span> <span class="token function">execute_ack</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 定义一个实例方法，用于执行命令并返回确认信号，参数为cmd</span>        self<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>flushInput<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        ntries <span class="token operator">=</span> <span class="token number">1</span>        attempts <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cmd <span class="token operator">+</span> <span class="token string">'\r'</span><span class="token punctuation">)</span>            ack <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>            <span class="token keyword">while</span> attempts <span class="token operator">&lt;</span> ntries <span class="token keyword">and</span> <span class="token punctuation">(</span>ack <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">or</span> ack <span class="token operator">==</span> <span class="token string">'Invalid Command'</span> <span class="token keyword">or</span> ack <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>flushInput<span class="token punctuation">(</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>port<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cmd <span class="token operator">+</span> <span class="token string">'\r'</span><span class="token punctuation">)</span>                    ack <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span> <span class="token string">"Exception executing command: "</span> <span class="token operator">+</span> cmd            attempts <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">"execute_ack exception when executing"</span><span class="token punctuation">,</span> cmd            <span class="token keyword">print</span> sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ack <span class="token operator">==</span> <span class="token string">'OK'</span>    <span class="token keyword">def</span> <span class="token function">update_pid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Kp<span class="token punctuation">,</span> Kd<span class="token punctuation">,</span> Ki<span class="token punctuation">,</span> Ko<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 定义一个实例方法，用于更新PID控制器的参数，参数为Kp, Kd, Ki, Ko</span>        <span class="token keyword">print</span> <span class="token string">"Updating PID parameters"</span>        cmd <span class="token operator">=</span> <span class="token string">'u '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>Kp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>Kd<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>Ki<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>Ko<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>execute_ack<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_baud</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义一个实例方法，用于获取Arduino设备的波特率</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">get_encoder_counts</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义一个实例方法，用于获取编码器的计数</span>        values <span class="token operator">=</span> self<span class="token punctuation">.</span>execute_array<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"Encoder count was not 2"</span>            <span class="token keyword">raise</span> SerialException            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>motors_reversed<span class="token punctuation">:</span>                values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> values    <span class="token keyword">def</span> <span class="token function">reset_encoders</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义一个实例方法，用于重置编码器</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>execute_ack<span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment">#---------------------------------------------------------------------------------------</span>    <span class="token keyword">def</span> <span class="token function">drive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> right<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 定义一个实例方法，用于驱动电机，参数为right和left</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>motors_reversed<span class="token punctuation">:</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token operator">-</span>left<span class="token punctuation">,</span> <span class="token operator">-</span>right        <span class="token keyword">return</span> self<span class="token punctuation">.</span>execute_ack<span class="token punctuation">(</span><span class="token string">'m %d %d'</span> <span class="token operator">%</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 返回调用self.execute_ack方法，执行'm %d %d'命令并返回确认信号的值，其中%d分别用right和left变量的值替换</span>    <span class="token keyword">def</span> <span class="token function">drive_m_per_s</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> right<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 定义一个实例方法，用于以米/秒为单位驱动电机，参数为right和left</span>        left_revs_per_second <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>wheel_diameter <span class="token operator">*</span> PI<span class="token punctuation">)</span>        right_revs_per_second <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>wheel_diameter <span class="token operator">*</span> PI<span class="token punctuation">)</span>        left_ticks_per_loop <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>left_revs_per_second <span class="token operator">*</span> self<span class="token punctuation">.</span>encoder_resolution <span class="token operator">*</span> self<span class="token punctuation">.</span>PID_INTERVAL <span class="token operator">*</span> self<span class="token punctuation">.</span>gear_reduction<span class="token punctuation">)</span>        right_ticks_per_loop  <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>right_revs_per_second <span class="token operator">*</span> self<span class="token punctuation">.</span>encoder_resolution <span class="token operator">*</span> self<span class="token punctuation">.</span>PID_INTERVAL <span class="token operator">*</span> self<span class="token punctuation">.</span>gear_reduction<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>drive<span class="token punctuation">(</span>right_ticks_per_loop <span class="token punctuation">,</span> left_ticks_per_loop <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义一个实例方法，用于停止电机</span>        self<span class="token punctuation">.</span>drive<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 调用self.drive方法，向电机发送0值</span>    <span class="token keyword">def</span> <span class="token function">analog_read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pin<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 定义一个实例方法，用于从模拟端口读取值，参数为pin</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'a %d'</span> <span class="token operator">%</span>pin<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">analog_write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pin<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 定义一个实例方法，用于向模拟端口写入值，参数为pin和value</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>execute_ack<span class="token punctuation">(</span><span class="token string">'x %d %d'</span> <span class="token operator">%</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">digital_read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pin<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义一个实例方法，用于从数字端口读取值，参数为pin</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'d %d'</span> <span class="token operator">%</span>pin<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">digital_write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pin<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 定义一个实例方法，用于向数字端口写入值，参数为pin和value</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>execute_ack<span class="token punctuation">(</span><span class="token string">'w %d %d'</span> <span class="token operator">%</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pin_mode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pin<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#定义一个实例方法，用于设置引脚的模式，参数为pin和mode</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>execute_ack<span class="token punctuation">(</span><span class="token string">'c %d %d'</span> <span class="token operator">%</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">servo_write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 定义一个实例方法，用于向舵机写入位置，参数为id和pos</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>execute_ack<span class="token punctuation">(</span><span class="token string">'s %d %d'</span> <span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span>SERVO_MAX<span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>SERVO_MIN<span class="token punctuation">,</span> degrees<span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">servo_read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 定义一个实例方法，用于从舵机读取位置，参数为id</span>        <span class="token keyword">return</span> radians<span class="token punctuation">(</span>self<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'t %d'</span> <span class="token operator">%</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">ping</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pin<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'p %d'</span> <span class="token operator">%</span>pin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">"posix"</span><span class="token punctuation">:</span>        portName <span class="token operator">=</span> <span class="token string">"/dev/ttyACM0"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        portName <span class="token operator">=</span> <span class="token string">"COM43"</span> <span class="token comment"># Windows style COM port.</span>    baudRate <span class="token operator">=</span> <span class="token number">57600</span>    myArduino <span class="token operator">=</span> Arduino<span class="token punctuation">(</span>port<span class="token operator">=</span>portName<span class="token punctuation">,</span> baudrate<span class="token operator">=</span>baudRate<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>    myArduino<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Sleeping for 1 second..."</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Reading on analog port 0"</span><span class="token punctuation">,</span> myArduino<span class="token punctuation">.</span>analog_read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Reading on digital port 0"</span><span class="token punctuation">,</span> myArduino<span class="token punctuation">.</span>digital_read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Blinking the LED 3 times"</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        myArduino<span class="token punctuation">.</span>digital_write<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Connection test successful."</span><span class="token punctuation">,</span>    myArduino<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    myArduino<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Shutting down Arduino."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果修改了commands.h文件的内容，需要对应修改操作字符</strong></p><h5 id="base-controller-py"><a href="#base-controller-py" class="headerlink" title="base_controller.py"></a>base_controller.py</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> roslib<span class="token punctuation">;</span> roslib<span class="token punctuation">.</span>load_manifest<span class="token punctuation">(</span><span class="token string">'ros_arduino_python'</span><span class="token punctuation">)</span><span class="token keyword">import</span> rospy<span class="token keyword">import</span> os<span class="token keyword">from</span> math <span class="token keyword">import</span> sin<span class="token punctuation">,</span> cos<span class="token punctuation">,</span> pi<span class="token keyword">from</span> geometry_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Quaternion<span class="token punctuation">,</span> Twist<span class="token punctuation">,</span> Pose<span class="token comment"># 导入geometry_msgs包中的Quaternion, Twist, Pose消息类型，用于表示姿态、速度和位置</span><span class="token keyword">from</span> nav_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Odometry<span class="token comment"># 导入nav_msgs包中的Odometry消息类型，用于表示里程计数据</span><span class="token keyword">from</span> tf<span class="token punctuation">.</span>broadcaster <span class="token keyword">import</span> TransformBroadcaster<span class="token comment"># 导入tf包中的TransformBroadcaster类，用于发布坐标变换</span><span class="token keyword">class</span> <span class="token class-name">BaseController</span><span class="token punctuation">:</span> <span class="token comment"># 定义一个类，表示基础控制器，用于接收Twist命令和发布Odometry数据</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arduino<span class="token punctuation">,</span> base_frame<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"base_controllers"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>arduino <span class="token operator">=</span> arduino <span class="token comment"># 定义一个实例属性</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>base_frame <span class="token operator">=</span> base_frame        self<span class="token punctuation">.</span>rate <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~base_controller_rate"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 定义一个实例属性，表示发布频率，并赋值为从参数服务器获取~base_controller_rate参数的值转换为浮点数，默认为10</span>        self<span class="token punctuation">.</span>timeout <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~base_controller_timeout"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>stopped <span class="token operator">=</span> <span class="token boolean">False</span>                         pid_params <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 定义一个变量pid_params，并赋值为空字典，用于存储PID控制器的参数</span>        pid_params<span class="token punctuation">[</span><span class="token string">'wheel_diameter'</span><span class="token punctuation">]</span> <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~wheel_diameter"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>         pid_params<span class="token punctuation">[</span><span class="token string">'wheel_track'</span><span class="token punctuation">]</span> <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~wheel_track"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        pid_params<span class="token punctuation">[</span><span class="token string">'encoder_resolution'</span><span class="token punctuation">]</span> <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~encoder_resolution"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>         pid_params<span class="token punctuation">[</span><span class="token string">'gear_reduction'</span><span class="token punctuation">]</span> <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~gear_reduction"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>        pid_params<span class="token punctuation">[</span><span class="token string">'Kp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~Kp"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>        pid_params<span class="token punctuation">[</span><span class="token string">'Kd'</span><span class="token punctuation">]</span> <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~Kd"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>        pid_params<span class="token punctuation">[</span><span class="token string">'Ki'</span><span class="token punctuation">]</span> <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~Ki"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        pid_params<span class="token punctuation">[</span><span class="token string">'Ko'</span><span class="token punctuation">]</span> <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~Ko"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>accel_limit <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">'~accel_limit'</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>motors_reversed <span class="token operator">=</span> rospy<span class="token punctuation">.</span>get_param<span class="token punctuation">(</span><span class="token string">"~motors_reversed"</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>                <span class="token comment"># Set up PID parameters and check for missing values</span>        self<span class="token punctuation">.</span>setup_pid<span class="token punctuation">(</span>pid_params<span class="token punctuation">)</span>                    <span class="token comment"># How many encoder ticks are there per meter?</span>        self<span class="token punctuation">.</span>ticks_per_meter <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder_resolution <span class="token operator">*</span> self<span class="token punctuation">.</span>gear_reduction  <span class="token operator">/</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>wheel_diameter <span class="token operator">*</span> pi<span class="token punctuation">)</span> <span class="token comment"># 计算每米需要转动的编码器计数，并赋值给self.ticks_per_meter属性</span>                <span class="token comment"># What is the maximum acceleration we will tolerate when changing wheel speeds?</span>        self<span class="token punctuation">.</span>max_accel <span class="token operator">=</span> self<span class="token punctuation">.</span>accel_limit <span class="token operator">*</span> self<span class="token punctuation">.</span>ticks_per_meter <span class="token operator">/</span> self<span class="token punctuation">.</span>rate        <span class="token comment">#计算改变轮速时允许的最大加速度，并赋值给self.max_accel属性</span>        <span class="token comment"># Track how often we get a bad encoder count (if any)</span>        self<span class="token punctuation">.</span>bad_encoder_count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 定义一个实例属性，表示错误的编码器计数次数，并赋值为0             </span>        now <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Time<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>then <span class="token operator">=</span> now <span class="token comment"># time for determining dx/dy</span>        self<span class="token punctuation">.</span>t_delta <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Duration<span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>rate<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>t_next <span class="token operator">=</span> now <span class="token operator">+</span> self<span class="token punctuation">.</span>t_delta        <span class="token comment"># Internal data        </span>        self<span class="token punctuation">.</span>enc_left <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token comment"># encoder readings</span>        self<span class="token punctuation">.</span>enc_right <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span>                      <span class="token comment"># position in xy plane</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>th <span class="token operator">=</span> <span class="token number">0</span>                     <span class="token comment"># rotation in radians</span>        self<span class="token punctuation">.</span>v_left <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>v_right <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>v_des_left <span class="token operator">=</span> <span class="token number">0</span>             <span class="token comment"># cmd_vel setpoint</span>        self<span class="token punctuation">.</span>v_des_right <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>last_cmd_vel <span class="token operator">=</span> now<span class="token comment">#-------------------------------------------------------------------------------------</span>        <span class="token comment"># Subscriptions</span>        rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span><span class="token string">"cmd_vel"</span><span class="token punctuation">,</span> Twist<span class="token punctuation">,</span> self<span class="token punctuation">.</span>cmdVelCallback<span class="token punctuation">)</span><span class="token comment"># 创建一个订阅者对象，订阅cmd_vel话题，消息类型为Twist，回调函数为self.cmdVelCallback</span>                self<span class="token punctuation">.</span>arduino<span class="token punctuation">.</span>reset_encoders<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>odomPub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Publisher<span class="token punctuation">(</span><span class="token string">'odom'</span><span class="token punctuation">,</span> Odometry<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个发布者对象，发布odom话题，消息类型为Odometry，队列大小为5，并赋值给self.odomPub属性</span>        self<span class="token punctuation">.</span>odomBroadcaster <span class="token operator">=</span> TransformBroadcaster<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个TransformBroadcaster对象，并赋值给self.odomBroadcaster属性</span>                rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Started base controller for a base of "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>wheel_track<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"m wide with "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>encoder_resolution<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ticks per rev"</span><span class="token punctuation">)</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Publishing odometry data at: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>rate<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Hz using "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_frame<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" as base frame"</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">setup_pid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pid_params<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义一个实例方法，用于设置PID控制器的参数，参数为pid_params</span>           missing_params <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> param <span class="token keyword">in</span> pid_params<span class="token punctuation">:</span>            <span class="token keyword">if</span> pid_params<span class="token punctuation">[</span>param<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*** PID Parameter "</span> <span class="token operator">+</span> param <span class="token operator">+</span> <span class="token string">" is missing. ***"</span><span class="token punctuation">)</span>                missing_params <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">if</span> missing_params<span class="token punctuation">:</span>            os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                        self<span class="token punctuation">.</span>wheel_diameter <span class="token operator">=</span> pid_params<span class="token punctuation">[</span><span class="token string">'wheel_diameter'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>wheel_track <span class="token operator">=</span> pid_params<span class="token punctuation">[</span><span class="token string">'wheel_track'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>encoder_resolution <span class="token operator">=</span> pid_params<span class="token punctuation">[</span><span class="token string">'encoder_resolution'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>gear_reduction <span class="token operator">=</span> pid_params<span class="token punctuation">[</span><span class="token string">'gear_reduction'</span><span class="token punctuation">]</span>                self<span class="token punctuation">.</span>Kp <span class="token operator">=</span> pid_params<span class="token punctuation">[</span><span class="token string">'Kp'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>Kd <span class="token operator">=</span> pid_params<span class="token punctuation">[</span><span class="token string">'Kd'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>Ki <span class="token operator">=</span> pid_params<span class="token punctuation">[</span><span class="token string">'Ki'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>Ko <span class="token operator">=</span> pid_params<span class="token punctuation">[</span><span class="token string">'Ko'</span><span class="token punctuation">]</span>                self<span class="token punctuation">.</span>arduino<span class="token punctuation">.</span>update_pid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>Kp<span class="token punctuation">,</span> self<span class="token punctuation">.</span>Kd<span class="token punctuation">,</span> self<span class="token punctuation">.</span>Ki<span class="token punctuation">,</span> self<span class="token punctuation">.</span>Ko<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">poll</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义一个实例方法，用于轮询Arduino设备和发布里程计数据</span>        now <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Time<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取当前时间</span>        <span class="token keyword">if</span> now <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>t_next<span class="token punctuation">:</span> <span class="token comment"># 如果当前时间超过了下一次轮询的时间</span>            <span class="token comment"># Read the encoders # 读取编码器的值</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                left_enc<span class="token punctuation">,</span> right_enc <span class="token operator">=</span> self<span class="token punctuation">.</span>arduino<span class="token punctuation">.</span>get_encoder_counts<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 尝试从Arduino获取左右编码器的计数</span>            <span class="token keyword">except</span><span class="token punctuation">:</span> <span class="token comment"># 如果出现异常</span>                self<span class="token punctuation">.</span>bad_encoder_count <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># 增加错误计数</span>                rospy<span class="token punctuation">.</span>logerr<span class="token punctuation">(</span><span class="token string">"Encoder exception count: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>bad_encoder_count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 记录错误日志</span>                <span class="token keyword">return</span> <span class="token comment"># 返回，不进行后续操作</span>                                        dt <span class="token operator">=</span> now <span class="token operator">-</span> self<span class="token punctuation">.</span>then <span class="token comment"># 计算时间间隔</span>            self<span class="token punctuation">.</span>then <span class="token operator">=</span> now <span class="token comment"># 更新上一次轮询的时间</span>            dt <span class="token operator">=</span> dt<span class="token punctuation">.</span>to_sec<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 将时间间隔转换为秒</span>                        <span class="token comment"># Calculate odometry # 计算里程计数据</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>enc_left <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token comment"># 如果左编码器的值为空</span>                dright <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 右侧移动距离为0</span>                dleft <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 左侧移动距离为0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 否则</span>                dright <span class="token operator">=</span> <span class="token punctuation">(</span>right_enc <span class="token operator">-</span> self<span class="token punctuation">.</span>enc_right<span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>ticks_per_meter <span class="token comment"># 根据编码器计数和每米刻度数，计算右侧移动距离</span>                dleft <span class="token operator">=</span> <span class="token punctuation">(</span>left_enc <span class="token operator">-</span> self<span class="token punctuation">.</span>enc_left<span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>ticks_per_meter <span class="token comment"># 计算左侧移动距离</span>            self<span class="token punctuation">.</span>enc_right <span class="token operator">=</span> right_enc <span class="token comment"># 更新右编码器的值</span>            self<span class="token punctuation">.</span>enc_left <span class="token operator">=</span> left_enc <span class="token comment"># 更新左编码器的值</span>                        dxy_ave <span class="token operator">=</span> <span class="token punctuation">(</span>dright <span class="token operator">+</span> dleft<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token comment"># 计算平均移动距离</span>            dth <span class="token operator">=</span> <span class="token punctuation">(</span>dright <span class="token operator">-</span> dleft<span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>wheel_track <span class="token comment"># 根据两侧移动距离和轮距，计算转角变化量</span>            vxy <span class="token operator">=</span> dxy_ave <span class="token operator">/</span> dt <span class="token comment"># 计算线速度</span>            vth <span class="token operator">=</span> dth <span class="token operator">/</span> dt <span class="token comment"># 计算角速度</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>dxy_ave <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 如果有移动距离</span>                dx <span class="token operator">=</span> cos<span class="token punctuation">(</span>dth<span class="token punctuation">)</span> <span class="token operator">*</span> dxy_ave <span class="token comment"># 计算x方向的位移分量</span>                dy <span class="token operator">=</span> <span class="token operator">-</span>sin<span class="token punctuation">(</span>dth<span class="token punctuation">)</span> <span class="token operator">*</span> dxy_ave <span class="token comment"># 计算y方向的位移分量</span>                self<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token punctuation">(</span>cos<span class="token punctuation">(</span>self<span class="token punctuation">.</span>th<span class="token punctuation">)</span> <span class="token operator">*</span> dx <span class="token operator">-</span> sin<span class="token punctuation">(</span>self<span class="token punctuation">.</span>th<span class="token punctuation">)</span> <span class="token operator">*</span> dy<span class="token punctuation">)</span> <span class="token comment"># 根据当前角度，更新x坐标</span>                self<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token punctuation">(</span>sin<span class="token punctuation">(</span>self<span class="token punctuation">.</span>th<span class="token punctuation">)</span> <span class="token operator">*</span> dx <span class="token operator">+</span> cos<span class="token punctuation">(</span>self<span class="token punctuation">.</span>th<span class="token punctuation">)</span> <span class="token operator">*</span> dy<span class="token punctuation">)</span> <span class="token comment"># 更新y坐标</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dth <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 如果有转角变化量</span>                self<span class="token punctuation">.</span>th <span class="token operator">+=</span> dth  <span class="token comment"># 更新当前角度</span>                quaternion <span class="token operator">=</span> Quaternion<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个四元数对象，用于表示方向</span>            quaternion<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0.0</span>  <span class="token comment"># 设置x分量为0 </span>            quaternion<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0.0</span>  <span class="token comment"># 设置y分量为0</span>            quaternion<span class="token punctuation">.</span>z <span class="token operator">=</span> sin<span class="token punctuation">(</span>self<span class="token punctuation">.</span>th <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token comment"># 根据当前角度，计算z分量</span>            quaternion<span class="token punctuation">.</span>w <span class="token operator">=</span> cos<span class="token punctuation">(</span>self<span class="token punctuation">.</span>th <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token comment"># 计算w分量</span>                <span class="token comment"># Create the odometry transform frame broadcaster. 创建一个里程计变换帧广播器，用于发布里程计数据和机器人姿态变换信息。</span>            self<span class="token punctuation">.</span>odomBroadcaster<span class="token punctuation">.</span>sendTransform<span class="token punctuation">(</span>                <span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 发送机器人的位置信息，z坐标为0 </span>                <span class="token punctuation">(</span>quaternion<span class="token punctuation">.</span>x<span class="token punctuation">,</span> quaternion<span class="token punctuation">.</span>y<span class="token punctuation">,</span> quaternion<span class="token punctuation">.</span>z<span class="token punctuation">,</span> quaternion<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 发送机器人的方向信息，用四元数表示</span>                rospy<span class="token punctuation">.</span>Time<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 发送当前时间戳</span>                self<span class="token punctuation">.</span>base_frame<span class="token punctuation">,</span> <span class="token comment"># 发送机器人的基准坐标系名称，即"base_link"</span>                <span class="token string">"odom"</span>  <span class="token comment"># 发送里程计坐标系名称，即"odom"</span>                <span class="token punctuation">)</span>                odom <span class="token operator">=</span> Odometry<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个里程计对象，用于存储里程计数据</span>            odom<span class="token punctuation">.</span>header<span class="token punctuation">.</span>frame_id <span class="token operator">=</span> <span class="token string">"odom"</span> <span class="token comment"># 设置里程计数据的参考坐标系为"odom"</span>            odom<span class="token punctuation">.</span>child_frame_id <span class="token operator">=</span> self<span class="token punctuation">.</span>base_frame <span class="token comment"># 设置里程计数据的子坐标系为机器人的基准坐标系</span>            odom<span class="token punctuation">.</span>header<span class="token punctuation">.</span>stamp <span class="token operator">=</span> now <span class="token comment"># 设置里程计数据的时间戳为当前时间</span>            odom<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">=</span> self<span class="token punctuation">.</span>x <span class="token comment"># 设置机器人的x坐标</span>            odom<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">=</span> self<span class="token punctuation">.</span>y <span class="token comment"># 设置机器人的y坐标</span>            odom<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>position<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 设置机器人的z坐标为0</span>            odom<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>orientation <span class="token operator">=</span> quaternion <span class="token comment"># 设置机器人的方向，用四元数表示</span>            odom<span class="token punctuation">.</span>twist<span class="token punctuation">.</span>twist<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>x <span class="token operator">=</span> vxy <span class="token comment"># 设置机器人的线速度</span>            odom<span class="token punctuation">.</span>twist<span class="token punctuation">.</span>twist<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 设置机器人的y方向线速度为0</span>            odom<span class="token punctuation">.</span>twist<span class="token punctuation">.</span>twist<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>z <span class="token operator">=</span> vth <span class="token comment"># 设置机器人的角速度</span>            self<span class="token punctuation">.</span>odomPub<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>odom<span class="token punctuation">)</span> <span class="token comment"># 发布里程计数据</span>                        <span class="token keyword">if</span> now <span class="token operator">&gt;</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>last_cmd_vel <span class="token operator">+</span> rospy<span class="token punctuation">.</span>Duration<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 如果当前时间超过了上一次接收到速度控制指令的时间加上超时时间</span>                self<span class="token punctuation">.</span>v_des_left <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 将期望的左轮速度设为0</span>                self<span class="token punctuation">.</span>v_des_right <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 将期望的右轮速度设为0</span>                            <span class="token keyword">if</span> self<span class="token punctuation">.</span>v_left <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>v_des_left<span class="token punctuation">:</span> <span class="token comment"># 如果当前的左轮速度小于期望的左轮速度</span>                self<span class="token punctuation">.</span>v_left <span class="token operator">+=</span> self<span class="token punctuation">.</span>max_accel <span class="token comment"># 增加左轮速度，以达到最大加速度</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>v_left <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>v_des_left<span class="token punctuation">:</span> <span class="token comment"># 如果当前的左轮速度超过了期望的左轮速度</span>                    self<span class="token punctuation">.</span>v_left <span class="token operator">=</span> self<span class="token punctuation">.</span>v_des_left <span class="token comment"># 将当前的左轮速度设为期望的左轮速度</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 否则，如果当前的左轮速度大于期望的左轮速度</span>                self<span class="token punctuation">.</span>v_left <span class="token operator">-=</span> self<span class="token punctuation">.</span>max_accel <span class="token comment"># 减小左轮速度，以达到最大加速度</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>v_left <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>v_des_left<span class="token punctuation">:</span> <span class="token comment"># 如果当前的左轮速度低于了期望的左轮速度</span>                    self<span class="token punctuation">.</span>v_left <span class="token operator">=</span> self<span class="token punctuation">.</span>v_des_left <span class="token comment"># 将当前的左轮速度设为期望的左轮速度</span>                        <span class="token keyword">if</span> self<span class="token punctuation">.</span>v_right <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>v_des_right<span class="token punctuation">:</span> <span class="token comment"># 如果当前的右轮速度小于期望的右轮速度</span>                self<span class="token punctuation">.</span>v_right <span class="token operator">+=</span> self<span class="token punctuation">.</span>max_accel <span class="token comment"># 增加右轮速度，以达到最大加速度</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>v_right <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>v_des_right<span class="token punctuation">:</span> <span class="token comment"># 如果当前的右轮速度超过了期望的右轮速度</span>                    self<span class="token punctuation">.</span>v_right <span class="token operator">=</span> self<span class="token punctuation">.</span>v_des_right <span class="token comment"># 将当前的右轮速度设为期望的右轮速度</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 否则，如果当前的右轮速度大于期望的右轮速度</span>                self<span class="token punctuation">.</span>v_right <span class="token operator">-=</span> self<span class="token punctuation">.</span>max_accel <span class="token comment"># 减小右轮速度，以达到最大加速度</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>v_right <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>v_des_right<span class="token punctuation">:</span> <span class="token comment"># 如果当前的右轮速度低于了期望的右轮速度</span>                    self<span class="token punctuation">.</span>v_right <span class="token operator">=</span> self<span class="token punctuation">.</span>v_des_right <span class="token comment"># 将当前的右轮速度设为期望的右轮速度</span>                        <span class="token comment"># Set motor speeds in encoder ticks per PID loop  根据每个PID循环中编码器刻度数，设置电机转速</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>stopped<span class="token punctuation">:</span> <span class="token comment"># 如果没有停止电机运行</span>                self<span class="token punctuation">.</span>arduino<span class="token punctuation">.</span>drive<span class="token punctuation">(</span>self<span class="token punctuation">.</span>v_left<span class="token punctuation">,</span> self<span class="token punctuation">.</span>v_right<span class="token punctuation">)</span> <span class="token comment"># 调用Arduino对象的drive方法，传入左右轮转速</span>                            self<span class="token punctuation">.</span>t_next <span class="token operator">=</span> now <span class="token operator">+</span> self<span class="token punctuation">.</span>t_delta <span class="token comment"># 更新下一次轮询时间，增加一个时间间隔量</span>     <span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 定义一个实例方法，用于停止电机</span>        self<span class="token punctuation">.</span>stopped <span class="token operator">=</span> <span class="token boolean">True</span>        self<span class="token punctuation">.</span>arduino<span class="token punctuation">.</span>drive<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">cmdVelCallback</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义一个实例方法，用于处理速度命令的回调函数，参数为req</span>        <span class="token comment"># Handle velocity-based movement requests</span>        self<span class="token punctuation">.</span>last_cmd_vel <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Time<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> req<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>x         <span class="token comment"># m/s</span>        th <span class="token operator">=</span> req<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>z       <span class="token comment"># rad/s</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment"># Turn in place</span>            right <span class="token operator">=</span> th <span class="token operator">*</span> self<span class="token punctuation">.</span>wheel_track  <span class="token operator">*</span> self<span class="token punctuation">.</span>gear_reduction <span class="token operator">/</span> <span class="token number">2.0</span>            left <span class="token operator">=</span> <span class="token operator">-</span>right        <span class="token keyword">elif</span> th <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment"># Pure forward/backward motion</span>            left <span class="token operator">=</span> right <span class="token operator">=</span> x        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># Rotation about a point in space</span>            left <span class="token operator">=</span> x <span class="token operator">-</span> th <span class="token operator">*</span> self<span class="token punctuation">.</span>wheel_track  <span class="token operator">*</span> self<span class="token punctuation">.</span>gear_reduction <span class="token operator">/</span> <span class="token number">2.0</span>            right <span class="token operator">=</span> x <span class="token operator">+</span> th <span class="token operator">*</span> self<span class="token punctuation">.</span>wheel_track  <span class="token operator">*</span> self<span class="token punctuation">.</span>gear_reduction <span class="token operator">/</span> <span class="token number">2.0</span>                    self<span class="token punctuation">.</span>v_des_left <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>left <span class="token operator">*</span> self<span class="token punctuation">.</span>ticks_per_meter <span class="token operator">/</span> self<span class="token punctuation">.</span>arduino<span class="token punctuation">.</span>PID_RATE<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>v_des_right <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>right <span class="token operator">*</span> self<span class="token punctuation">.</span>ticks_per_meter <span class="token operator">/</span> self<span class="token punctuation">.</span>arduino<span class="token punctuation">.</span>PID_RATE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-控制小车运动"><a href="#6-控制小车运动" class="headerlink" title="6.控制小车运动"></a>6.控制小车运动</h3><p>使用teleop_twist_keyboard功能包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-melodic-teleop-twist-keyboard <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun teleop_twist_keyboard teleop_twist_keyboard.py <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据提示运动小车。</p><p>控制原理</p><ol><li>teleop_twist_keyboard功能包会将计算出的线速度和角速度封装成一个geometry_msgs/Twist类型的消息，并发布到/cmd_vel话题上。</li><li>ros小车运动的节点需要订阅/cmd_vel话题，并根据收到的Twist消息来控制底盘的电机转速或者发送控制指令给下位机。</li><li>我们在 base_controller 节点订阅这个话题，接收速度数据，在转换成与底盘通信的格式，然后写入串口(poll函数)</li><li>当小车底盘接收到串口发来的速度后，就控制电机运转，从而实现键盘控制小车的移动</li></ol><h3 id="7-控制机械臂"><a href="#7-控制机械臂" class="headerlink" title="7.控制机械臂"></a>7.控制机械臂</h3><p>待…(后续使用QT实现)</p><h2 id="五、传感器使用"><a href="#五、传感器使用" class="headerlink" title="五、传感器使用"></a>五、传感器使用</h2><h3 id="1-激光雷达"><a href="#1-激光雷达" class="headerlink" title="1.激光雷达"></a>1.激光雷达</h3><p>这里使用的是思岚A1M8</p><p>安装驱动包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> catkin_ws/src<span class="token function">git</span> clone https://github.com/slamtec/rplidar_ros<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token builtin class-name">cd</span> src/rplidar_ros/scripts/./create_udev_rules.sh <span class="token comment">#默认的是ttyUSBX,但是由于每次可能不一样，直接将雷达端口映射(将端口 ttyUSBX 映射到 rplidar):</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>launch文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>launch<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>node <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"rplidarNode"</span>          <span class="token assign-left variable">pkg</span><span class="token operator">=</span><span class="token string">"rplidar_ros"</span>  <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"rplidarNode"</span> <span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token string">"screen"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"serial_port"</span>         <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"string"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"/dev/rplidar"</span>/<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"serial_baudrate"</span>     <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"int"</span>    <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"115200"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>--A1/A2 --<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span>--param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"serial_baudrate"</span>     <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"int"</span>    <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"256000"</span>--<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>--A3 --<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"frame_id"</span>            <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"string"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"laser"</span>/<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"inverted"</span>            <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"bool"</span>   <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"false"</span>/<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"angle_compensate"</span>    <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"bool"</span>   <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"true"</span>/<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>/node<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/launch<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思岚雷达A1,2波特率一般是1152000   A3 ,4波特率是256000不能搞错了</p><p>一般性错误</p><ul><li>波特率设置错误</li><li>端口号错误</li><li>端口没有权限</li><li>供电不足(换根线试试)</li></ul><p>执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch rplidar_ros rplidar.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再开一个终端执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rviz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 LaserScan 插件即可显示雷达信息</p><h3 id="2-USB相机"><a href="#2-USB相机" class="headerlink" title="2.USB相机"></a>2.USB相机</h3><p>使用单目相机(便宜捏)</p><p>安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ros-melodic-usb-cam<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>launch文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>launch<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>node <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"usb_cam"</span> <span class="token assign-left variable">pkg</span><span class="token operator">=</span><span class="token string">"usb_cam"</span> <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"usb_cam_node"</span> <span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token string">"screen"</span> <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"video_device"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"/dev/video0"</span> /<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"image_width"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"640"</span> /<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"image_height"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"480"</span> /<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"pixel_format"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"yuyv"</span> /<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"camera_frame_id"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"usb_cam"</span> /<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"io_method"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"mmap"</span>/<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>/node<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>node <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"image_view"</span> <span class="token assign-left variable">pkg</span><span class="token operator">=</span><span class="token string">"image_view"</span> <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"image_view"</span> <span class="token assign-left variable">respawn</span><span class="token operator">=</span><span class="token string">"false"</span> <span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token string">"screen"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>remap <span class="token assign-left variable">from</span><span class="token operator">=</span><span class="token string">"image"</span> <span class="token assign-left variable">to</span><span class="token operator">=</span><span class="token string">"/usb_cam/image_raw"</span>/<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"autosize"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>/node<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/launch<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>节点 usb_cam 用于启动相机，节点 image_view 以图形化窗口的方式显示图像数据，需要查看相机的端口并修改 usb_cam 中的 video_device 参数，并且如果将摄像头连接到了树莓派，且通过 ssh 远程访问树莓派的话，需要注释 image_view 节点，因为在终端中无法显示图形化界面。</p><p>执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch usb_cam usb_cam-test.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再开一个终端执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rviz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 LaserScan 插件即可显示相机信息</p><h3 id="3-集成启动底盘、雷达、相机"><a href="#3-集成启动底盘、雷达、相机" class="headerlink" title="3.集成启动底盘、雷达、相机"></a>3.集成启动底盘、雷达、相机</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> catkin_ws/srccatkin_create_pkg car_start roscpp rospy std_msgs ros_arduino_python usb_cam rplidar_ros <span class="token comment">#新建功能包</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make<span class="token builtin class-name">cd</span> src/car_start/launch<span class="token function">vi</span> car_start.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>car_start.launch内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find ros_arduino_python)/launch/arduino.launch<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--底盘--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find usb_cam)/launch/usb_cam-test.launch<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--相机--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find rplidar_ros)/launch/rplidar.launch<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--雷达--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> car_tf_start.launch <span class="token comment">#坐标转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find mycar_start)/launch/start.launch<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera2basefootprint<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tf2_ros<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static_transform_publisher<span class="token punctuation">"</span></span> <span class="token attr-name">args</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.08 0 0.1 0 0 0 /base_footprint /camera_link<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rplidar2basefootprint<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tf2_ros<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static_transform_publisher<span class="token punctuation">"</span></span> <span class="token attr-name">args</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0.1 0 0 0 /base_footprint /laser<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以后直接运行<code>roslaunch car_start car_tf_start.launch</code>即可同时运行雷达相机底盘控制</p><h2 id="六、SLAM建图"><a href="#六、SLAM建图" class="headerlink" title="六、SLAM建图"></a>六、SLAM建图</h2><p><a href="https://www.bilibili.com/video/BV1Ci4y1L7ZZ/">参考视频</a></p><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h3><p>安装必要功能包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-melodic-gmapping <span class="token comment">#gmapping 包(用于构建地图)</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-melodic-map-server <span class="token comment">#地图服务包(用于保存与读取地图)</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-melodic-navigation <span class="token comment"># navigation 包(用于定位以及路径规划)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建功能包，并导入依赖: gmapping map_server amcl move_base</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> catkin_ws/srccatkin_create_pkg nav roscpp rospy std_msgs gmapping map_server amcl move_base <span class="token comment">#新建功能包</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 创建机器人模型相关的功能包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> catkin_ws/srccatkin_create_pkg car_description urdf xacro<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make<span class="token builtin class-name">cd</span> /src/car_description<span class="token function">mkdir</span> urdf <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> urdf<span class="token function">touch</span> car.urdf.xacro <span class="token comment">#创建机器人模型，各种部件</span><span class="token function">touch</span> car_base.urdf.xacro <span class="token comment">#机器人底盘实现</span><span class="token function">touch</span> car_camera.urdf.xacro <span class="token comment">#机器人摄像头实现</span><span class="token function">touch</span> car_laser.urdf.xacro <span class="token comment">#机器人雷达实现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>car.urdf.xacro内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>robot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mycar<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xacro</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://wiki.ros.org/xacro<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>include</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car_base.urdf.xacro<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>include</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car_camera.urdf.xacro<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>include</span> <span class="token attr-name">filename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car_laser.urdf.xacro<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>robot</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>car_base.urdf.xacro</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>robot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mycar<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xacro</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://wiki.ros.org/xacro<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footprint_radius<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.001<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_footprint<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>visual</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>geometry</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sphere</span> <span class="token attr-name">radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${footprint_radius}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>geometry</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>visual</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_radius<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_length<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.08<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lidi<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.015<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_joint_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${base_length / 2 + lidi}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_link<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>visual</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>geometry</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cylinder</span> <span class="token attr-name">radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.1<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.08<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>geometry</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>origin</span> <span class="token attr-name">xyz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token attr-name">rpy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>material</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baselink_color<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color</span> <span class="token attr-name">rgba</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0 0.5 0.2 0.5<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>material</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>visual</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>joint</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link2footprint<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fixed<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span> <span class="token attr-name">link</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_footprint<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">link</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_link<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>origin</span> <span class="token attr-name">xyz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0.055<span class="token punctuation">"</span></span> <span class="token attr-name">rpy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>joint</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wheel_radius<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0325<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wheel_length<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.015<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PI<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.1415927<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wheel_joint_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${(base_length / 2 + lidi - wheel_radius) * -1}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>macro</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wheel_func<span class="token punctuation">"</span></span> <span class="token attr-name">params</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wheel_name flag<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${wheel_name}_wheel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>visual</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>geometry</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cylinder</span> <span class="token attr-name">radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${wheel_radius}<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${wheel_length}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>geometry</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>origin</span> <span class="token attr-name">xyz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token attr-name">rpy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${PI / 2} 0 0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>material</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wheel_color<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color</span> <span class="token attr-name">rgba</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0 0.3<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>material</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>visual</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>joint</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${wheel_name}2link<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>continuous<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span> <span class="token attr-name">link</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_link<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">link</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${wheel_name}_wheel<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>origin</span> <span class="token attr-name">xyz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 ${0.1 * flag} ${wheel_joint_z}<span class="token punctuation">"</span></span> <span class="token attr-name">rpy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>axis</span> <span class="token attr-name">xyz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 1 0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>joint</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xacro:</span>macro</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>wheel_func</span> <span class="token attr-name">wheel_name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">flag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>wheel_func</span> <span class="token attr-name">wheel_name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">flag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small_wheel_radius<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0075<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small_joint_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${(base_length / 2 + lidi - small_wheel_radius) * -1}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>macro</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small_wheel_func<span class="token punctuation">"</span></span> <span class="token attr-name">params</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small_wheel_name flag<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${small_wheel_name}_wheel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>visual</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>geometry</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sphere</span> <span class="token attr-name">radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${small_wheel_radius}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>geometry</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>origin</span> <span class="token attr-name">xyz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token attr-name">rpy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>material</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wheel_color<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color</span> <span class="token attr-name">rgba</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0 0.3<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>material</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>visual</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>joint</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${small_wheel_name}2link<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>continuous<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span> <span class="token attr-name">link</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_link<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">link</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${small_wheel_name}_wheel<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>origin</span> <span class="token attr-name">xyz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${0.08 * flag} 0 ${small_joint_z}<span class="token punctuation">"</span></span> <span class="token attr-name">rpy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>axis</span> <span class="token attr-name">xyz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 1 0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>joint</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xacro:</span>macro</span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>small_wheel_func</span> <span class="token attr-name">small_wheel_name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>front<span class="token punctuation">"</span></span> <span class="token attr-name">flag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>small_wheel_func</span> <span class="token attr-name">small_wheel_name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>back<span class="token punctuation">"</span></span> <span class="token attr-name">flag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>robot</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>car_camera.urdf.xacro</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>robot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mycar<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xacro</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://wiki.ros.org/xacro<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_length<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.02<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_width<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.05<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_height<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.05<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_camera_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.08<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_camera_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_camera_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${base_length / 2 + camera_height / 2}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>visual</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>geometry</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>box</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${camera_length} ${camera_width} ${camera_height}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>geometry</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>origin</span> <span class="token attr-name">xyz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token attr-name">rpy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>material</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color</span> <span class="token attr-name">rgba</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0 0.8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>material</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>visual</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>joint</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera2base<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fixed<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span> <span class="token attr-name">link</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_link<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">link</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>origin</span> <span class="token attr-name">xyz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${joint_camera_x} ${joint_camera_y} ${joint_camera_z}<span class="token punctuation">"</span></span> <span class="token attr-name">rpy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>joint</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>robot</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>car_laser.urdf.xacro</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>robot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mycar<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xacro</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://wiki.ros.org/xacro<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support_radius<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.01<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support_length<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.15<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser_radius<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.03<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser_length<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.05<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_support_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_support_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_support_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${base_length / 2 + support_length / 2}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_laser_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_laser_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xacro:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_laser_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${support_length / 2 + laser_length / 2}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>visual</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>geometry</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cylinder</span> <span class="token attr-name">radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${support_radius}<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${support_length}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>geometry</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>material</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color</span> <span class="token attr-name">rgba</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.8 0.5 0.0 0.5<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>material</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>visual</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>joint</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support2base<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fixed<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span> <span class="token attr-name">link</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_link<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">link</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>origin</span> <span class="token attr-name">xyz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${joint_support_x} ${joint_support_y} ${joint_support_z}<span class="token punctuation">"</span></span> <span class="token attr-name">rpy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>joint</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>visual</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>geometry</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cylinder</span> <span class="token attr-name">radius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${laser_radius}<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${laser_length}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>geometry</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>material</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color</span> <span class="token attr-name">rgba</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0 0.5<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>material</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>visual</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>joint</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser2support<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fixed<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span> <span class="token attr-name">link</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>support<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">link</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>origin</span> <span class="token attr-name">xyz</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${joint_laser_x} ${joint_laser_y} ${joint_laser_z}<span class="token punctuation">"</span></span> <span class="token attr-name">rpy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>joint</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>robot</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在launch文件加载机器人模型</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> catkin_ws/src/my_description/launch<span class="token function">vi</span> car.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>car.launc内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_description<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find xacro)/xacro $(find mycar_description)/urdf/car.urdf.xacro<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_state_publisher<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_state_publisher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_state_publisher<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_state_publisher<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_state_publisher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_state_publisher<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将模型加载再启动文件中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>launch<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>include <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> ros_arduino_python<span class="token variable">)</span></span>/launch/arduino.launch"</span> /<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>include <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> usb_cam<span class="token variable">)</span></span>/launch/usb_cam-test.launch"</span> /<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>include <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> rplidar_ros<span class="token variable">)</span></span>/launch/rplidar.launch"</span> /<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 机器人模型加载文件 --<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>include <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> mycar_description<span class="token variable">)</span></span>/launch/car.launch"</span> /<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/launch<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-SLAM建图"><a href="#2-SLAM建图" class="headerlink" title="2.SLAM建图"></a>2.SLAM建图</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> catkin_ws/src/nav<span class="token function">mkdir</span> launch<span class="token function">touch</span> gmapping.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>launch<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>node <span class="token assign-left variable">pkg</span><span class="token operator">=</span><span class="token string">"gmapping"</span> <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"slam_gmapping"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"slam_gmapping"</span> <span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token string">"screen"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>remap <span class="token assign-left variable">from</span><span class="token operator">=</span><span class="token string">"scan"</span> <span class="token assign-left variable">to</span><span class="token operator">=</span><span class="token string">"scan"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"base_frame"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"base_footprint"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>--底盘坐标系--<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"odom_frame"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"odom"</span>/<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">!</span>--里程计坐标系--<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"map_update_interval"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"5.0"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"maxUrange"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"16.0"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"sigma"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.05"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"kernelSize"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"1"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"lstep"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.05"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"astep"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.05"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"iterations"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"5"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"lsigma"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.075"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"ogain"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"3.0"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"lskip"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"srr"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.1"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"srt"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.2"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"str"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.1"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"stt"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.2"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"linearUpdate"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"1.0"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"angularUpdate"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.5"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"temporalUpdate"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"3.0"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"resampleThreshold"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.5"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"particles"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"30"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"xmin"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"-50.0"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"ymin"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"-50.0"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"xmax"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"50.0"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"ymax"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"50.0"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"delta"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.05"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"llsamplerange"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.01"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"llsamplestep"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.01"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"lasamplerange"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.005"</span>/<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"lasamplestep"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.005"</span>/<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/node<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/launch<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行</p><p>1.树莓派：roslaunch car_start start.launch；</p><p>2.树莓派：roslaunch nav gmapping.launch；</p><p>3.PC：rosrun teleop_twist_keyboard teleop_twist_keyboard.py</p><h3 id="3-路径规划"><a href="#3-路径规划" class="headerlink" title="3.路径规划"></a>3.路径规划</h3><h4 id="1-地图存储"><a href="#1-地图存储" class="headerlink" title="1.地图存储"></a>1.地图存储</h4><pre class="line-numbers language-none"><code class="language-none">cd catkin_ws/src/navmkdir mapcd ..cd launchtouch map_save.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>map_save.launch</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find nav)/map/nav<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_save<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_server<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_saver<span class="token punctuation">"</span></span> <span class="token attr-name">args</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-f $(arg filename)<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-地图读取"><a href="#2-地图读取" class="headerlink" title="2.地图读取"></a>2.地图读取</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> catkin_ws/src/nav<span class="token function">mkdir</span> map<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token builtin class-name">cd</span> launch<span class="token function">touch</span> map_server.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>map_server.launch</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 设置地图的配置文件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav.yaml<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 运行地图服务器，并且加载设置的地图--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_server<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_server<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_server<span class="token punctuation">"</span></span> <span class="token attr-name">args</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find nav)/map/$(arg map)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-定位"><a href="#3-定位" class="headerlink" title="3.定位"></a>3.定位</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> catkin_ws/src/nav/launch<span class="token function">touch</span> amcl.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>amcl.launch</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>amcl<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>amcl<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>amcl<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Publish scans from best pose at a max of 10 Hz --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_model_type<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diff<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 里程计模式为差分 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_alpha5<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transform_tolerance<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gui_publish_rate<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10.0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser_max_beams<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>min_particles<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>max_particles<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kld_err<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.05<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kld_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.99<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_alpha1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_alpha2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- translation std dev, m --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_alpha3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_alpha4<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser_z_hit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser_z_short<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.05<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser_z_max<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.05<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser_z_rand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser_sigma_hit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser_lambda_short<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser_lambda_short<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser_model_type<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>likelihood_field<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- &lt;param name="laser_model_type" value="beam"/&gt; --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>laser_likelihood_max_dist<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update_min_d<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update_min_a<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_frame_id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 里程计坐标系 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_frame_id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base_footprint<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 添加机器人基坐标系 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>global_frame_id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 添加地图坐标系 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-move-base"><a href="#4-move-base" class="headerlink" title="4.move_base"></a>4.move_base</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> catkin_ws/src/nav/launch<span class="token function">touch</span> move_base.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>move_base.launch</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>move_base<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>move_base<span class="token punctuation">"</span></span> <span class="token attr-name">respawn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>move_base<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span> <span class="token attr-name">clear_params</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rosparam</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find nav)/param/costmap_common_params.yaml<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>load<span class="token punctuation">"</span></span> <span class="token attr-name">ns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>global_costmap<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rosparam</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find nav)/param/costmap_common_params.yaml<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>load<span class="token punctuation">"</span></span> <span class="token attr-name">ns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>local_costmap<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rosparam</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find nav)/param/local_costmap_params.yaml<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>load<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rosparam</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find nav)/param/global_costmap_params.yaml<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>load<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rosparam</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find nav)/param/base_local_planner_params.yaml<span class="token punctuation">"</span></span> <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>load<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-编写配置文件"><a href="#5-编写配置文件" class="headerlink" title="5.编写配置文件"></a>5.编写配置文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> catkin_ws/src/nav<span class="token function">mkdir</span> param<span class="token function">touch</span> costmap_common_params.yaml<span class="token function">touch</span> global_costmap_params.yaml<span class="token function">touch</span> local_costmap_params.yaml<span class="token function">touch</span> base_local_planner_params<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>costmap_common_params.yaml</p><p>该文件是move_base 在全局路径规划与本地路径规划时调用的通用参数，包括:机器人的尺寸、距离障碍物的安全距离、传感器信息等。配置参考如下:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#机器人几何参，如果机器人是圆形，设置 robot_radius,如果是其他形状设置 footprint</span><span class="token key atrule">robot_radius</span><span class="token punctuation">:</span> <span class="token number">0.12</span> <span class="token comment">#圆形</span><span class="token comment"># footprint: [[-0.12, -0.12], [-0.12, 0.12], [0.12, 0.12], [0.12, -0.12]] #其他形状</span><span class="token key atrule">obstacle_range</span><span class="token punctuation">:</span> <span class="token number">3.0</span> <span class="token comment"># 用于障碍物探测，比如: 值为 3.0，意味着检测到距离小于 3 米的障碍物时，就会引入代价地图</span><span class="token key atrule">raytrace_range</span><span class="token punctuation">:</span> <span class="token number">3.5</span> <span class="token comment"># 用于清除障碍物，比如：值为 3.5，意味着清除代价地图中 3.5 米以外的障碍物</span><span class="token comment">#膨胀半径，扩展在碰撞区域以外的代价区域，使得机器人规划路径避开障碍物</span><span class="token key atrule">inflation_radius</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token comment">#代价比例系数，越大则代价值越小</span><span class="token key atrule">cost_scaling_factor</span><span class="token punctuation">:</span> <span class="token number">3.0</span><span class="token comment">#地图类型</span><span class="token key atrule">map_type</span><span class="token punctuation">:</span> costmap<span class="token comment">#导航包所需要的传感器</span><span class="token key atrule">observation_sources</span><span class="token punctuation">:</span> scan<span class="token comment">#对传感器的坐标系和数据进行配置。这个也会用于代价地图添加和清除障碍物。例如，你可以用激光雷达传感器用于在代价地图添加障碍物，再添加kinect用于导航和清除障碍物。</span><span class="token key atrule">scan</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">sensor_frame</span><span class="token punctuation">:</span> laser<span class="token punctuation">,</span> <span class="token key atrule">data_type</span><span class="token punctuation">:</span> LaserScan<span class="token punctuation">,</span> <span class="token key atrule">topic</span><span class="token punctuation">:</span> scan<span class="token punctuation">,</span> <span class="token key atrule">marking</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span> <span class="token key atrule">clearing</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>global_costmap_params.yaml</p><p>该文件用于全局代价地图参数设置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">global_costmap</span><span class="token punctuation">:</span>  <span class="token key atrule">global_frame</span><span class="token punctuation">:</span> map <span class="token comment">#地图坐标系</span>  <span class="token key atrule">robot_base_frame</span><span class="token punctuation">:</span> base_footprint <span class="token comment">#机器人坐标系</span>  <span class="token comment"># 以此实现坐标变换</span>  <span class="token key atrule">update_frequency</span><span class="token punctuation">:</span> <span class="token number">1.0</span> <span class="token comment">#代价地图更新频率</span>  <span class="token key atrule">publish_frequency</span><span class="token punctuation">:</span> <span class="token number">1.0</span> <span class="token comment">#代价地图的发布频率</span>  <span class="token key atrule">transform_tolerance</span><span class="token punctuation">:</span> <span class="token number">0.5</span> <span class="token comment">#等待坐标变换发布信息的超时时间</span>  <span class="token key atrule">static_map</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否使用一个地图或者地图服务器来初始化全局代价地图，如果不使用静态地图，这个参数为false.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>local_costmap_params.yaml</p><p>该文件用于局部代价地图参数设置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">local_costmap</span><span class="token punctuation">:</span>  <span class="token key atrule">global_frame</span><span class="token punctuation">:</span> odom <span class="token comment">#里程计坐标系</span>  <span class="token key atrule">robot_base_frame</span><span class="token punctuation">:</span> base_footprint <span class="token comment">#机器人坐标系</span>  <span class="token key atrule">update_frequency</span><span class="token punctuation">:</span> <span class="token number">10.0</span> <span class="token comment">#代价地图更新频率</span>  <span class="token key atrule">publish_frequency</span><span class="token punctuation">:</span> <span class="token number">10.0</span> <span class="token comment">#代价地图的发布频率</span>  <span class="token key atrule">transform_tolerance</span><span class="token punctuation">:</span> <span class="token number">0.5</span> <span class="token comment">#等待坐标变换发布信息的超时时间</span>  <span class="token key atrule">static_map</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment">#不需要静态地图，可以提升导航效果</span>  <span class="token key atrule">rolling_window</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#是否使用动态窗口，默认为false，在静态的全局地图中，地图不会变化</span>  <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 局部地图宽度 单位是 m</span>  <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 局部地图高度 单位是 m</span>  <span class="token key atrule">resolution</span><span class="token punctuation">:</span> <span class="token number">0.05</span> <span class="token comment"># 局部地图分辨率 单位是 m，一般与静态地图分辨率保持一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>base_local_planner_params</p><p>基本的局部规划器参数配置，这个配置文件设定了机器人的最大和最小速度限制值，也设定了加速度的阈值</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">TrajectoryPlannerROS</span><span class="token punctuation">:</span><span class="token comment"># Robot Configuration Parameters</span>  <span class="token key atrule">max_vel_x</span><span class="token punctuation">:</span> <span class="token number">0.5</span> <span class="token comment"># X 方向最大速度</span>  <span class="token key atrule">min_vel_x</span><span class="token punctuation">:</span> <span class="token number">0.1</span> <span class="token comment"># X 方向最小速速</span>  <span class="token key atrule">max_vel_theta</span><span class="token punctuation">:</span>  <span class="token number">1.0</span> <span class="token comment"># </span>  <span class="token key atrule">min_vel_theta</span><span class="token punctuation">:</span> <span class="token number">-1.0</span>  <span class="token key atrule">min_in_place_vel_theta</span><span class="token punctuation">:</span> <span class="token number">1.0</span>  <span class="token key atrule">acc_lim_x</span><span class="token punctuation">:</span> <span class="token number">1.0</span> <span class="token comment"># X 加速限制</span>  <span class="token key atrule">acc_lim_y</span><span class="token punctuation">:</span> <span class="token number">0.0</span> <span class="token comment"># Y 加速限制</span>  <span class="token key atrule">acc_lim_theta</span><span class="token punctuation">:</span> <span class="token number">0.6</span> <span class="token comment"># 角速度加速限制</span><span class="token comment"># Goal Tolerance Parameters，目标公差</span>  <span class="token key atrule">xy_goal_tolerance</span><span class="token punctuation">:</span> <span class="token number">0.10</span>  <span class="token key atrule">yaw_goal_tolerance</span><span class="token punctuation">:</span> <span class="token number">0.05</span><span class="token comment"># Differential-drive robot configuration</span><span class="token comment"># 是否是全向移动机器人</span>  <span class="token key atrule">holonomic_robot</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># Forward Simulation Parameters，前进模拟参数</span>  <span class="token key atrule">sim_time</span><span class="token punctuation">:</span> <span class="token number">0.8</span>  <span class="token key atrule">vx_samples</span><span class="token punctuation">:</span> <span class="token number">18</span>  <span class="token key atrule">vtheta_samples</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">sim_granularity</span><span class="token punctuation">:</span> <span class="token number">0.05</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-集成"><a href="#6-集成" class="headerlink" title="6.集成"></a>6.集成</h4><p>在nav的launch目录下新建一个launch文件nav.launch</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 集成地图服务--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find nav)/launch/map_server.launch<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--集成定位实现--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find nav)/launch/amcl.launch<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--集成路径规划--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find nav)/launch/move_base.launch<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行</p><p>1.树莓派：roslaunch mycar_start start.launch；</p><p>2.树莓派：roslaunch nav nav.launch；</p><p>3.PC启动rviz。</p><h3 id="4-边规划边建图"><a href="#4-边规划边建图" class="headerlink" title="4.边规划边建图"></a>4.边规划边建图</h3><p>就是直接集成前面的</p><p>在nav的launch目录下新建一个launch文件auto_slam.launch</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>launch<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 启动SLAM节点 --<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>include <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> nav<span class="token variable">)</span></span>/launch/gmapping.launch"</span> /<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 运行move_base节点 --<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>include <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> nav<span class="token variable">)</span></span>/launch/move_base.launch"</span> /<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/launch<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行</p><p>1.树莓派：roslaunch mycar_start start.launch；</p><p>2.树莓派：roslaunch nav auto_slam.launch；</p><p>3.PC：在rviz中通过2D Nav Goal设置目标点，机器人开始自主移动并建图了；</p><p>4.PC：最后可以使用 map_server 保存地图。</p><h3 id="5-完整文件目录结构"><a href="#5-完整文件目录结构" class="headerlink" title="5.完整文件目录结构"></a>5.完整文件目录结构</h3><p><img src="/2023/07/13/ros-xiao-che-da-jian/image-20230717202938326.png" alt="mycar_description"></p><p><img src="/2023/07/13/ros-xiao-che-da-jian/image-20230717203004437.png" alt="mycar_start"></p><p><img src="/2023/07/13/ros-xiao-che-da-jian/image-20230717203026012.png" alt="nav"></p><h2 id="七、后续安排"><a href="#七、后续安排" class="headerlink" title="七、后续安排"></a>七、后续安排</h2><p>添加PCB打印电路替换杜邦线，3D打印芯片保护壳，红绿灯检测，车道检测，垃圾分类并通过机械臂收集垃圾，语言识别等。</p>]]></content>
      
      
      <categories>
          
          <category> ros </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ros </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv</title>
      <link href="/2023/07/13/opencv/"/>
      <url>/2023/07/13/opencv/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本操作"><a href="#一、基本操作" class="headerlink" title="一、基本操作"></a>一、基本操作</h2><h3 id="1-读取图片"><a href="#1-读取图片" class="headerlink" title="1.读取图片"></a>1.读取图片</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;opencv2/imgcodecs.hpp&gt; //包含opencv库的头文件，用于图像编码和解码#include &lt;opencv2/highgui.hpp&gt; //包含opencv库的头文件，用于图像显示和交互#include &lt;opencv2/imgproc.hpp&gt; //包含opencv库的头文件，用于图像处理#include &lt;iostream&gt; //包含标准库的头文件，用于输入输出流using namespace cv; //使用cv命名空间，简化代码using namespace std; //使用std命名空间，简化代码int main() //主函数{string path = "D:\\popo\\test.png"; //定义一个字符串变量，存储图像的路径Mat img = imread(path); //定义一个Mat类型的变量，用于存储读取的图像imshow("Image", img); //显示图像，第一个参数是窗口的名称，第二个参数是图像变量waitKey(0); //等待用户按键，参数是等待的毫秒数，0表示无限等待return 0; //返回0，表示程序正常结束}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Mat cv::imread(const String &amp;filename, int flags = IMREAD_COLOR)</code></p><p>后面一个参数是设置图像的色彩，默认是1也就是彩色，如果是0则是黑白照片</p><p>该函数用于从文件中加载图片</p><p><code>void cv::imshow(cosnst String &amp;winnanme, InputArray mat)</code></p><p>用于显示图像</p><p><code>int cv::waitKey(int delay = 0)</code></p><p>等待用户按键，参数是等待的毫秒数，0表示无限等待，则会一直显示照片，否则照片一闪而过</p><h3 id="2-读取视频"><a href="#2-读取视频" class="headerlink" title="2.读取视频"></a>2.读取视频</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;opencv2/imgcodecs.hpp&gt; //包含opencv库的头文件，用于图像编码和解码#include &lt;opencv2/highgui.hpp&gt; //包含opencv库的头文件，用于图像显示和交互#include &lt;opencv2/imgproc.hpp&gt; //包含opencv库的头文件，用于图像处理#include &lt;iostream&gt; //包含标准库的头文件，用于输入输出流using namespace cv; //使用cv命名空间，简化代码using namespace std; //使用std命名空间，简化代码int main() //主函数{    string path = "D:\\software\\opencv\\opencv\\sources\\samples\\data\\vtest.avi"; //定义一个字符串变量，存储视频文件的路径    VideoCapture cap(path); //定义一个VideoCapture类型的变量，用于捕捉视频文件    Mat img; //定义一个Mat类型的变量，用于存储每一帧图像    while (true) { //无限循环        cap.read(img); //从视频文件中读取一帧图像，并存储到img变量中        imshow("Image", img); //显示图像，第一个参数是窗口的名称，第二个参数是图像变量        waitKey(1); //等待用户按键，参数是等待的毫秒数，1表示等待1毫秒    }    return 0; //返回0，表示程序正常结束}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>virtual bool cv::VideoCapture::read(OutputArray image)</code></p><p> 从视频文件中读取一帧图像，并存储到img变量中</p><h3 id="3-读取摄像头"><a href="#3-读取摄像头" class="headerlink" title="3.读取摄像头"></a>3.读取摄像头</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;opencv2/imgcodecs.hpp&gt; //包含opencv库的头文件，用于图像编码和解码#include &lt;opencv2/highgui.hpp&gt; //包含opencv库的头文件，用于图像显示和交互#include &lt;opencv2/imgproc.hpp&gt; //包含opencv库的头文件，用于图像处理#include &lt;iostream&gt; //包含标准库的头文件，用于输入输出流using namespace cv; //使用cv命名空间，简化代码using namespace std; //使用std命名空间，简化代码int main() //主函数{    string path = "D:\\software\\opencv\\opencv\\sources\\samples\\data\\vtest.avi"; //定义一个字符串变量，存储视频文件的路径    VideoCapture cap(0); //定义一个VideoCapture类型的变量，用于调用摄像头    Mat img; //定义一个Mat类型的变量，用于存储每一帧图像    while (true) { //无限循环        cap.read(img); //从视频文件中读取一帧图像，并存储到img变量中        imshow("Image", img); //显示图像，第一个参数是窗口的名称，第二个参数是图像变量        waitKey(1); //等待用户按键，参数是等待的毫秒数，1表示等待1毫秒    }    return 0; //返回0，表示程序正常结束}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟上面是一样的，只不过是将cap的参数换成了0，设备引索，笔记本的摄像头就是0。</p><h2 id="二、基础函数"><a href="#二、基础函数" class="headerlink" title="二、基础函数"></a>二、基础函数</h2><h3 id="1-图像操作"><a href="#1-图像操作" class="headerlink" title="1.图像操作"></a>1.图像操作</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;opencv2/imgcodecs.hpp&gt; //包含opencv库的头文件，用于图像编码和解码#include &lt;opencv2/highgui.hpp&gt; //包含opencv库的头文件，用于图像显示和交互#include &lt;opencv2/imgproc.hpp&gt; //包含opencv库的头文件，用于图像处理#include &lt;iostream&gt; //包含标准库的头文件，用于输入输出流using namespace cv; //使用cv命名空间，简化代码using namespace std; //使用std命名空间，简化代码int main() //主函数{    string path = "D:\\popo\\test.png"; //定义一个字符串变量，存储图像的路径    Mat img = imread(path); //定义一个Mat类型的变量，用于存储读取的图像    Mat imgGray, imgBlur, imgCanny, imgDil, imgErode; //定义一些Mat类型的变量，用于存储处理后的图像    cvtColor(img, imgGray, COLOR_BGR2GRAY); //将原始图像转换为灰度图像，第一个参数是输入图像，第二个参数是输出图像，第三个参数是转换类型    GaussianBlur(img, imgBlur, Size(3, 3), 3, 0); //对原始图像进行高斯模糊，第一个参数是输入图像，第二个参数是输出图像，第三个参数是模糊核的大小，第四个参数是水平方向的标准差，第五个参数是垂直方向的标准差    Canny(imgBlur, imgCanny, 25, 75); //对模糊后的图像进行边缘检测，第一个参数是输入图像，第二个参数是输出图像，第三个参数是最小阈值，第四个参数是最大阈值    Mat kernel = getStructuringElement(MORPH_RECT, Size(3, 3)); //定义一个结构元素（核），用于膨胀和腐蚀操作，第一个参数是形状类型，第二个参数是大小    dilate(imgCanny, imgDil, kernel); //对边缘检测后的图像进行膨胀操作，第一个参数是输入图像，第二个参数是输出图像，第三个参数是结构元素（核）    erode(imgDil, imgErode, kernel); //对膨胀后的图像进行腐蚀操作，第一个参数是输入图像，第二个参数是输出图像，第三个参数是结构元素（核）    imshow("Image", img); //显示原始图像，第一个参数是窗口的名称，第二个参数是图像变量    imshow("ImageGray", imgGray); //显示灰度图像    imshow("ImageBlur", imgBlur); //显示模糊后的图像    imshow("ImageCanny", imgCanny); //显示边缘检测后的图像    imshow("ImageDilation", imgDil); //显示膨胀后的图像    imshow("ImageErode", imgErode); //显示腐蚀后的图像    waitKey(0); //等待用户按键，参数是等待的毫秒数，0表示无限等待    return 0; //返回0，表示程序正常结束}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chat by c</title>
      <link href="/2023/05/22/c-yu-yan-liao-tian-shi/"/>
      <url>/2023/05/22/c-yu-yan-liao-tian-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在linux环境下使用c配合mysql设计的聊天室</p><p>实现功能：</p><p>1.通过客户端实现用户的注册以及登录。 </p><p>2.服务端在收到用户注册或登录信息后进行处理。 </p><p>3.实现多用户同时登录的聊天室 </p><p>4.用户可以查询当前聊天室的在线状态</p><p>主要是了解linux中的锁，信号以及网络编程等概念。使用CMake编译</p><p>如果不使用CMake，可通过下面编译指令分别编译服务端和客户端以及MySQL的测试代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc mysql_connect.c <span class="token punctuation">..</span>/erro/erro.c <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span> <span class="token variable"><span class="token variable">`</span>mysql_config <span class="token parameter variable">--cflags</span> <span class="token parameter variable">--libs</span><span class="token variable">`</span></span> <span class="token comment">#mysql测试代码编译</span>gcc server.c <span class="token punctuation">..</span>/include/mysql_connection/mysql_connect.c <span class="token punctuation">..</span>/include/erro/erro.c <span class="token punctuation">..</span>/include/serverlogin/serverlogin.c <span class="token parameter variable">-o</span> server `mysql_config <span class="token parameter variable">--cflags</span> <span class="token parameter variable">--libs</span> <span class="token comment">#服务端编译</span>gcc client.c <span class="token punctuation">..</span>/include/clientlogin/clientlogin.c <span class="token parameter variable">-o</span> client  <span class="token comment">#客户端编译</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建两个表</span><span class="token comment">-- 用户信息存放表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">comment</span> <span class="token string">'id号'</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">unique</span> <span class="token keyword">comment</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>passwd <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'密码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 在线用户表</span><span class="token keyword">create</span> <span class="token keyword">table</span> user_online<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">comment</span> <span class="token string">'id号'</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">unique</span> <span class="token keyword">comment</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>state <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'状态'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="头文件定义"><a href="#头文件定义" class="headerlink" title="头文件定义"></a>头文件定义</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MYSQL_CONNECT_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_MYSQL_CONNECT_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mysql/mysql.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span><span class="token comment">// 创建用户信息结构体</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token keyword">char</span> username<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> userpasswd<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> User<span class="token punctuation">;</span><span class="token comment">// 创建用户在线信息</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token keyword">char</span> username<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> userstate<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> Onlineuser<span class="token punctuation">;</span><span class="token comment">// 定义一个结构体，用于存储MySQL连接的相关信息</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mysql_conn</span><span class="token punctuation">{</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">;</span> <span class="token comment">// 定义一个MySQL连接指针</span><span class="token keyword">char</span> <span class="token operator">*</span>hostIP<span class="token punctuation">;</span> <span class="token comment">// 定义一个字符串指针，用于存储主机名</span><span class="token keyword">char</span> <span class="token operator">*</span>user<span class="token punctuation">;</span> <span class="token comment">// 定义一个字符串指针，用于存储用户名</span><span class="token keyword">char</span> <span class="token operator">*</span>passwd<span class="token punctuation">;</span> <span class="token comment">// 定义一个字符串指针，用于存储密码</span><span class="token keyword">char</span> <span class="token operator">*</span>db<span class="token punctuation">;</span> <span class="token comment">// 定义一个字符串指针，用于存储数据库名</span><span class="token punctuation">}</span> mysql_conn<span class="token punctuation">;</span><span class="token comment">// 功能实现------------------------------------------</span><span class="token comment">// 初始化数据库</span><span class="token comment">// 返回值：MYSQL指针</span><span class="token comment">// 参数：MYSQL指针</span>MYSQL <span class="token operator">*</span><span class="token function">db_init</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 连接数据库</span><span class="token comment">// 返回值：MYSQL指针，地址，用户名，密码，数据库名称</span><span class="token comment">// 参数：MYSQL指针</span>MYSQL <span class="token operator">*</span><span class="token function">db_connect</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>hostIP<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>username<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>passwd<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3.1</span><span class="token number">.2</span> 操作实现<span class="token comment">// 显示表信息</span><span class="token comment">// 返回值：bool</span><span class="token comment">// 参数：MYSQL指针，SQL查询字符串</span>bool <span class="token function">info_table</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断表中name字段是否存在</span><span class="token comment">// 返回值：bool</span><span class="token comment">// 参数：MYSQL指针，用户名</span>bool <span class="token function">if_name_exist</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断用户名与密码是否匹配</span><span class="token comment">// 返回值： bool</span><span class="token comment">// 参数：MYSQL指针，用户名，密码</span>bool <span class="token function">judge_user</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>passwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用户注册</span><span class="token comment">// 返回值：bool</span><span class="token comment">// 参数：MYSQL指针，用户名，密码</span>bool <span class="token function">insert_user</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>passwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用户注销</span><span class="token comment">// 返回值：bool</span><span class="token comment">// 参数：MYSQL指针，用户名，密码</span>bool <span class="token function">drop_user</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 功能：用户上线</span><span class="token comment">// 参数：MYSQL指针，用户名，用户在线状态</span><span class="token comment">// 返回值：空</span>bool <span class="token function">insert_user_online</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 功能：用户下线</span><span class="token comment">// 参数：con，所需删除用户的用户名</span>bool <span class="token function">drop_user_online</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>con<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 实现结束------------------------------------------</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdbool.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mysql/mysql.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../erro/erro.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mysql_connect.h"</span></span><span class="token comment">//定义一个用于判断函数返回值的变量</span><span class="token keyword">int</span> ret<span class="token punctuation">;</span><span class="token comment">//初始化数据库</span><span class="token comment">//返回值：MYSQL指针</span><span class="token comment">//参数：MYSQL指针</span>MYSQL<span class="token operator">*</span> <span class="token function">db_init</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//在多线程环境中需要调用这个函数的</span>ret <span class="token operator">=</span> <span class="token function">mysql_library_init</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">info_erro</span><span class="token punctuation">(</span><span class="token string">"could not initialize MYSQL library"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>condb <span class="token operator">=</span> <span class="token function">mysql_init</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> condb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//连接数据库</span><span class="token comment">//返回值：MYSQL指针，地址，用户名，密码，数据库名称</span><span class="token comment">//参数：MYSQL指针</span>MYSQL<span class="token operator">*</span> <span class="token function">db_connect</span><span class="token punctuation">(</span>MYSQL<span class="token operator">*</span> condb<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>hostIP<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> username<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span>passwd<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> db<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">mysql_real_connect</span><span class="token punctuation">(</span>condb<span class="token punctuation">,</span>hostIP<span class="token punctuation">,</span>username<span class="token punctuation">,</span>passwd<span class="token punctuation">,</span>db<span class="token punctuation">,</span><span class="token number">3306</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">mysql_error</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">info_erro</span><span class="token punctuation">(</span><span class="token string">"连接错误\n可能是网络问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断连接是否错误</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"连接成功！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> condb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//显示表信息</span><span class="token comment">//返回值：bool 1：成功 0：失败</span><span class="token comment">//参数：MYSQL指针，SQL查询字符串</span>bool <span class="token function">info_table</span><span class="token punctuation">(</span>MYSQL<span class="token operator">*</span> condb<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> query<span class="token punctuation">)</span><span class="token punctuation">{</span>MYSQL_RES <span class="token operator">*</span>mysql_res<span class="token punctuation">;</span> <span class="token comment">//指向结果集对象</span>MYSQL_ROW <span class="token operator">*</span>mysql_row<span class="token punctuation">;</span> <span class="token comment">//指向结果集的一行</span>MYSQL_FIELD <span class="token operator">*</span>field<span class="token punctuation">;</span> <span class="token comment">//指向结果集的一个字段</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token comment">//判断循环变量</span><span class="token keyword">int</span> num_row<span class="token punctuation">,</span>num_col<span class="token punctuation">;</span><span class="token comment">//结果集中的行列</span><span class="token comment">//char display[100][20];//用于保存输出表的内容</span><span class="token comment">//执行查询的语句</span>ret <span class="token operator">=</span> <span class="token function">mysql_real_query</span><span class="token punctuation">(</span>condb<span class="token punctuation">,</span>query<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">info_erro</span><span class="token punctuation">(</span><span class="token string">"查询失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//保存查询结果</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mysql_res <span class="token operator">=</span> <span class="token function">mysql_store_result</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//将查询结果集保存到mysql_res，如果失败返回NULL</span><span class="token function">info_erro</span><span class="token punctuation">(</span><span class="token string">"结果保存失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span>num_row <span class="token operator">=</span> <span class="token function">mysql_num_rows</span><span class="token punctuation">(</span>mysql_res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取行数2</span>num_col <span class="token operator">=</span> <span class="token function">mysql_num_fields</span><span class="token punctuation">(</span>mysql_res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取取列数3</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"======================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 记录数组的字段</span><span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num_row<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历每一行</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mysql_row <span class="token operator">=</span> <span class="token function">mysql_fetch_row</span><span class="token punctuation">(</span>mysql_res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//获取一行的数据，如果返回NULL则说明没有数据了</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果是表头，打印表头</span><span class="token keyword">while</span><span class="token punctuation">(</span>field <span class="token operator">=</span> <span class="token function">mysql_fetch_field</span><span class="token punctuation">(</span>mysql_res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//获取每个字段的信息，如果返回空指针，表示没有字段了</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-10s"</span><span class="token punctuation">,</span>field<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印字段名</span><span class="token comment">//strcpy(display[k],field-&gt;name);//将字段名写入display数组</span><span class="token comment">//strcpy(display[0],field-&gt;name);</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mysql_fetch_lengths</span><span class="token punctuation">(</span>mysql_res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取每个字段的长度</span><span class="token keyword">for</span><span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>num_col<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-10s"</span><span class="token punctuation">,</span>mysql_row<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//strcpy(display[k2],mysql_row[j]);</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"======================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysql_free_result</span><span class="token punctuation">(</span>mysql_res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//判断表中name字段是否存在</span><span class="token comment">//返回值：bool 1：存在 0：不存在</span><span class="token comment">//参数：MYSQL指针，用户名</span>bool <span class="token function">if_name_exist</span><span class="token punctuation">(</span>MYSQL<span class="token operator">*</span> condb<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>User user1<span class="token punctuation">;</span><span class="token keyword">char</span> query<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>username<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>MYSQL_RES <span class="token operator">*</span>res<span class="token punctuation">;</span>MYSQL_ROW row<span class="token punctuation">;</span>MYSQL_FIELD <span class="token operator">*</span>field<span class="token punctuation">;</span><span class="token keyword">int</span> num_fields<span class="token punctuation">;</span><span class="token comment">//定义结果集列数</span><span class="token comment">//拼接查询语句</span><span class="token function">sprintf</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span><span class="token string">"select *from user where name = '%s'"</span><span class="token punctuation">,</span>user1<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>condb<span class="token punctuation">,</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行语句</span>res <span class="token operator">=</span> <span class="token function">mysql_store_result</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//保存查询结果</span>num_fields <span class="token operator">=</span> <span class="token function">mysql_num_fields</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row <span class="token operator">=</span> <span class="token function">mysql_fetch_row</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历每一行数据</span><span class="token keyword">if</span><span class="token punctuation">(</span>field <span class="token operator">=</span> <span class="token function">mysql_fetch_field</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//获取字段信息</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>username<span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//strcmp匹配成功返回1</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token comment">//不能使用user1.username == row[1]</span><span class="token punctuation">}</span> <span class="token comment">//这比较的只是指针</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">mysql_free_result</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysql_commit</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//提交事务</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//判断用户名与密码是否匹配</span><span class="token comment">//返回值： bool 1：匹配 0：不匹配</span><span class="token comment">//参数：MYSQL指针，用户名，密码</span>bool <span class="token function">judge_user</span><span class="token punctuation">(</span>MYSQL<span class="token operator">*</span> condb<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> passwd<span class="token punctuation">)</span><span class="token punctuation">{</span>User user1<span class="token punctuation">;</span><span class="token keyword">char</span> query<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>username<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>userpasswd<span class="token punctuation">,</span>passwd<span class="token punctuation">)</span><span class="token punctuation">;</span>MYSQL_RES <span class="token operator">*</span>res<span class="token punctuation">;</span>MYSQL_ROW row<span class="token punctuation">;</span>MYSQL_FIELD <span class="token operator">*</span>field<span class="token punctuation">;</span><span class="token keyword">int</span> num_fields<span class="token punctuation">;</span><span class="token comment">//定义结果集列数</span><span class="token comment">//拼接查询语句</span><span class="token function">sprintf</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span><span class="token string">"select *from user where name = '%s'"</span><span class="token punctuation">,</span>user1<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysql_query</span><span class="token punctuation">(</span>condb<span class="token punctuation">,</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行语句</span>res <span class="token operator">=</span> <span class="token function">mysql_store_result</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//保存查询结果</span>num_fields <span class="token operator">=</span> <span class="token function">mysql_num_fields</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row <span class="token operator">=</span> <span class="token function">mysql_fetch_row</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>field <span class="token operator">=</span> <span class="token function">mysql_fetch_field</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//strcmp如果匹配的返回值0，则使用！</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>username<span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>userpasswd<span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"登陆成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">mysql_free_result</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysql_commit</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//用户注册</span><span class="token comment">//返回值：bool</span><span class="token comment">//参数：MYSQL指针，用户名，密码</span>bool <span class="token function">insert_user</span><span class="token punctuation">(</span>MYSQL<span class="token operator">*</span> condb<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> passwd<span class="token punctuation">)</span><span class="token punctuation">{</span>User user1<span class="token punctuation">;</span><span class="token keyword">char</span> query<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>MYSQL_RES <span class="token operator">*</span>res<span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>username<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>userpasswd<span class="token punctuation">,</span>passwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断用户是否存在</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">if_name_exist</span><span class="token punctuation">(</span>condb<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"用户存在，请登陆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sprintf</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span><span class="token string">"insert into user (name,passwd) values('%s','%s')"</span><span class="token punctuation">,</span>user1<span class="token punctuation">.</span>username<span class="token punctuation">,</span>user1<span class="token punctuation">.</span>userpasswd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行查询的语句</span>ret <span class="token operator">=</span> <span class="token function">mysql_real_query</span><span class="token punctuation">(</span>condb<span class="token punctuation">,</span>query<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">mysql_rollback</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回转事物</span><span class="token function">info_erro</span><span class="token punctuation">(</span><span class="token string">"注册失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mysql_commit</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//用户注销</span><span class="token comment">//返回值：bool</span><span class="token comment">//参数：MYSQL指针，用户名，密码</span>bool <span class="token function">drop_user</span><span class="token punctuation">(</span>MYSQL<span class="token operator">*</span> condb<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> query<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">if_name_exist</span><span class="token punctuation">(</span>condb<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">info_erro</span><span class="token punctuation">(</span><span class="token string">"注销失败！请重新检查用户名\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sprintf</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span><span class="token string">"delete from user where name = '%s'"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token function">mysql_real_query</span><span class="token punctuation">(</span>condb<span class="token punctuation">,</span>query<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">if_name_exist</span><span class="token punctuation">(</span>condb<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">info_erro</span><span class="token punctuation">(</span><span class="token string">"注销失败！请重新检查用户名\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mysql_rollback</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回转事物</span><span class="token function">info_erro</span><span class="token punctuation">(</span><span class="token string">"注销失败！请重新检查用户名\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mysql_commit</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">mysql_affected_rows</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//功能：用户上线</span><span class="token comment">//参数：MYSQL指针，用户名，用户在线状态</span><span class="token comment">//返回值：空</span>bool <span class="token function">insert_user_online</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>Onlineuser user1<span class="token punctuation">;</span><span class="token keyword">char</span> query<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>username<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>userstate<span class="token punctuation">,</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span><span class="token string">"insert into user_online(name,state) values('%s','%s')"</span><span class="token punctuation">,</span>user1<span class="token punctuation">.</span>username <span class="token punctuation">,</span>user1<span class="token punctuation">.</span>userstate<span class="token punctuation">)</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token function">mysql_real_query</span><span class="token punctuation">(</span>condb<span class="token punctuation">,</span>query<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">mysql_rollback</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回转事物</span><span class="token function">info_erro</span><span class="token punctuation">(</span><span class="token string">"注册失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mysql_commit</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//功能：用户下线</span><span class="token comment">//参数：con，所需删除用户的用户名</span>bool <span class="token function">drop_user_online</span><span class="token punctuation">(</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> query<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span><span class="token string">"delete from user_online where name = '%s'"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token function">mysql_real_query</span><span class="token punctuation">(</span>condb<span class="token punctuation">,</span>query<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">mysql_rollback</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回转事物</span><span class="token function">info_erro</span><span class="token punctuation">(</span><span class="token string">"注销失败！请重新检查用户名\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mysql_commit</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">mysql_affected_rows</span><span class="token punctuation">(</span>condb<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//实现结束------------------------------------------</span><span class="token comment">/*//功能测试代码int main(){MYSQL *mysql_handle = NULL;int m,n;int len = 0;mysql_handle = db_init(mysql_handle);//连接测试mysql_handle =db_connect(mysql_handle,"47.120.41.232","root","123456","chat");//表查询测试info_table(mysql_handle,"select *from user");printf("\n*******************************\n");//插入测试insert_user(mysql_handle,"sfen","12");info_table(mysql_handle,"select *from user");printf("\n*******************************\n");//重复name测试if(if_name_exist(mysql_handle,"chen")){printf("该 用户存在\n");}else{printf("该用户不存在\n");}printf("\n*******************************\n");//name passwd不匹配测试if(judge_user(mysql_handle,"chen","12")){printf("匹配\n");}else{printf("不匹配\n");}printf("\n*******************************\n");//删除测试if(drop_user(mysql_handle,"sfen")){printf("注销成功\n");}else{printf("注销失败\n");}info_table(mysql_handle,"select *from user");printf("\n*******************************\n");printf("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n");//在线用户插入测试insert_user_online(mysql_handle,"zhang","online");info_table(mysql_handle,"select *from user_online");printf("\n*******************************\n");//在线用户删除测试drop_user_online(mysql_handle,"zhang");info_table(mysql_handle,"select *from user_online");printf("\n*******************************\n");mysql_close(mysql_handle);mysql_library_end();return 0;}*/</span><span class="token comment">//`mysql_config --cflags --libs`</span><span class="token comment">// gcc mysql_connect.c ../erro/erro.c -o test `mysql_config --cflags --libs`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h2><h3 id="头文件定义-1"><a href="#头文件定义-1" class="headerlink" title="头文件定义"></a>头文件定义</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_SERVRELOGIN_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_SERVERLOGIN_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mysql/mysql.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXLINE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token keyword">char</span> online<span class="token punctuation">[</span><span class="token number">303</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 在线用户</span><span class="token keyword">int</span> len<span class="token punctuation">;</span> <span class="token comment">// 用户数量</span><span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//消息内容</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用户账号</span><span class="token keyword">char</span> passwd<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用户密码</span><span class="token keyword">int</span> cmd<span class="token punctuation">;</span><span class="token comment">//消息类型</span><span class="token punctuation">}</span>Messges<span class="token punctuation">;</span><span class="token comment">//注册</span><span class="token keyword">void</span> <span class="token function">Reg</span><span class="token punctuation">(</span><span class="token keyword">int</span> client_socket<span class="token punctuation">,</span> Messges msg<span class="token punctuation">,</span>MYSQL <span class="token operator">*</span>conndb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//登录</span><span class="token keyword">void</span> <span class="token function">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> client_socket<span class="token punctuation">,</span>Messges msg<span class="token punctuation">,</span>MYSQL <span class="token operator">*</span>condb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作实现"><a href="#操作实现" class="headerlink" title="操作实现"></a>操作实现</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;stdlib.h&gt;#include &lt;mysql/mysql.h&gt;#include "../mysql_connection/mysql_connect.h"#include "serverlogin.h"//注册void Reg(int client_socket, Messges msg,MYSQL *conndb){//检测用户名是否存在if(if_name_exist(conndb,msg.name)){msg.cmd = -3;//用户存在，注册失败return 0;}printf("用户%s开始注册...\n",msg.name);//插入到数据库中if(insert_user(conndb,msg.name,msg.passwd)){msg.cmd = 101;//注册成功状态码insert_user_online(conndb,msg.name,"online");}else{msg.cmd = -1;//注册失败}write(client_socket,&amp;msg,sizeof(msg));}//登录void Entry(int client_socket,Messges msg,MYSQL *conndb){//检测用户名与密码是否正确if(!judge_user(conndb,msg.name,msg.passwd)){msg.cmd = -1;//登陆失败//检测用户名是否存在if(!if_name_exist(conndb,msg.name)){msg.cmd = -2;//登陆失败}}else{drop_user_online(conndb,msg.name);insert_user_online(conndb,msg.name,"online");msg.cmd = 102;}write(client_socket,&amp;msg,sizeof(msg));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="功能实现-1"><a href="#功能实现-1" class="headerlink" title="功能实现"></a>功能实现</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;pthread.h&gt;#include &lt;errno.h&gt;#include &lt;sys/wait.h&gt;#include "../include/mysql_connection/mysql_connect.h"#include "../include/erro/erro.h"#include "../include/serverlogin/serverlogin.h"#define PORT 7990const char * HostIP = "127.0.0.1";int online_count = 0;//在线人数int sockcd[100];//客户端套接字MYSQL *mysql_handle = NULL;//引入数据库Messges msg;//引入自定义的消息类型void server_thread(void* p);//启动子线程处理消息//创建一个数组用于保存线程号与用户名的关系char user_my[100][20];int main(){//创建套接字int sockfd;//服务端套接字int size = 100;//最大支持人数typedef struct sockaddr SA;//引入结构体struct sockaddr_in addr;pid_t pid;int ret;//----------------//服务器建立sockfd = socket(AF_INET,SOCK_STREAM,0);if(sockfd == -1){info_erro("创建socket失败\n");exit(1);}bzero(&amp;addr,sizeof(addr)); //等同于memset(&amp;ser_addr,0,sizeof(ser_addr));int opt = 1;setsockopt(sockfd,SOL_SOCKET,SO_REUSEADDR,(const void*)&amp;opt,opt);//端口复用addr.sin_family = AF_INET;addr.sin_port = htons(PORT);addr.sin_addr.s_addr = htonl(INADDR_ANY);//绑定IP以及端口ret = bind(sockfd,(SA*)&amp;addr,sizeof(addr));if(ret == -1){perror("绑定失败\n");exit(1);}//监听客户端连接数量ret = listen(sockfd,100);if(ret == -1){perror("设置监听失败\n");exit(1);}//----------------//连接数据库mysql_handle = db_init(mysql_handle);//连接远程数据库mysql_handle =db_connect(mysql_handle,"47.120.41.232","root","123456","chat");printf("服务器设置成功！\n");//创建多线程while(1){//设置客户端struct sockaddr_in cliaddr;socklen_t len = sizeof(cliaddr);int fd = accept(sockfd,(SA*)&amp;cliaddr,&amp;len);if(fd == -1){perror("客户端连接失败\n");continue;}else{printf("连接成功\n");}for(int i=0;i&lt;size;i++){if(sockcd[i]==0){//记录客户端的socketsockcd[i] = fd;printf("fd = %d\n",fd);//启动多线程，给客户端服务pthread_t tid;pthread_create(&amp;tid,0,server_thread,&amp;fd);pthread_detach(tid);//线程分离online_count++;//连接客户端数量break;}}}return 0;}void server_thread(void* p){int fd = *(int*)p;printf("pthread = %d\n",fd);while(1){int ret = read(fd,&amp;msg,sizeof(msg));strcpy(user_my[fd],msg.name);//绑定线程号与用户名if(ret == -1){perror("read error");break;}else if(ret == 0){printf("客户端退出\n");//printf("发送的消息码是：%d\n",msg.cmd);//printf("发送的信息类型是：%s\n",msg.msg);drop_user_online(mysql_handle,msg.name);insert_user_online(mysql_handle,msg.name,"offline");pthread_exit(0);online_count--;}/*if(msg.cmd == 8){for(int i=0;i&lt;100;i++){if(!strcmp(user_my[i],msg.name)){msg.cmd = 9;write(sockcd[i],&amp;msg,sizeof(msg));break;//printf("%s:%s\n",msg.name,msg.msg);}}}*/if(!strcmp(msg.msg,"#hello") &amp;&amp; (msg.cmd &gt; 0 &amp;&amp; msg.cmd &lt; 6)){switch(msg.cmd){case 1://注册Reg(fd,msg,mysql_handle);break;case 2://登陆Entry(fd,msg,mysql_handle);break;case 3://打印在线人数//info_table(mysql_handle,"select *from user_online");break;case 4://设置在线drop_user_online(mysql_handle,msg.name);//删除在线状态insert_user_online(mysql_handle,msg.name,"online");//添加离线状态break;case 5://设置离线drop_user_online(mysql_handle,msg.name);//删除在线状态insert_user_online(mysql_handle,msg.name,"offline");//添加离线状态break;case 8://私聊消息//查找需要聊天用户的tid;/*for(int i=0;i&lt;100;i++){printf("走的这个\n");if(!strcmp(user_my[i],msg.name)){msg.cmd = 9;write(sockcd[i],&amp;msg,sizeof(msg));//printf("%s:%s\n",msg.name,msg.msg);}}*/break;}}else {for(int i=0;i&lt;online_count;i++){if(sockcd[i] != fd){//群发消息write(sockcd[i],&amp;msg,sizeof(msg));printf("%s:%s\n",msg.name,msg.msg);}}}}}//gcc server.c ../include/mysql_connection/mysql_connect.c ../include/erro/erro.c../include/serverlogin/serverlogin.c -o server `mysql_config --cflags --libs//gcc client.c ../include/clientlogin/clientlogin.c -o client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h2><h3 id="头文件定义-2"><a href="#头文件定义-2" class="headerlink" title="头文件定义"></a>头文件定义</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_CLIENTLOGIN_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CLIENTLOGIN_</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token keyword">char</span> online<span class="token punctuation">[</span><span class="token number">303</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 在线用户</span><span class="token keyword">int</span> len<span class="token punctuation">;</span> <span class="token comment">// 用户数量</span><span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//消息内容</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用户账号</span><span class="token keyword">char</span> passwd<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用户密码</span><span class="token keyword">int</span> cmd<span class="token punctuation">;</span><span class="token comment">//消息类型</span><span class="token punctuation">}</span>Messges<span class="token punctuation">;</span><span class="token comment">//界面</span><span class="token keyword">void</span> <span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册</span><span class="token keyword">void</span> <span class="token function">Reg</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//登陆</span><span class="token keyword">void</span> <span class="token function">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//客户端向服务器发送数据</span>Messges <span class="token function">ask_ser</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作实现-1"><a href="#操作实现-1" class="headerlink" title="操作实现"></a>操作实现</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include "clientlogin.h"Messges msg;//界面void Interface(){printf("=============================\n");printf(" 1.注册\t2. 登陆\n");printf("=============================\n");}//注册void Reg(int sockfd){char name[20];char passwd[20];strcpy(msg.msg,"#hello");//发送消息helloprintf("输入用户名：\n");scanf("%s",name);while(getchar()!='\n'){}strcpy(msg.name,name);printf("输入密码：\n");scanf("%s",passwd);while(getchar()!='\n'){}strcpy(msg.passwd,passwd);msg.cmd = 1;//定义为1，表示为注册消息write(sockfd,&amp;msg,sizeof(msg));//将msg写入套接字，发送给服务器read(sockfd,&amp;msg,sizeof(msg));//读取服务器的回复printf("msg.cmd = %d\n",msg.cmd);//打印服务回复的信息类型if(msg.cmd == 101){//回复码为101注册成功printf("注册成功！\n请稍后.......\n");sleep(3);}else if(msg.cmd == -1){printf("注册失败\n请稍后........\n");sleep(3);}else if(msg.cmd == -3){printf("用户名已存在！\n请稍后");sleep(3);}}//登陆void Entry(int sockfd){char name[20];char passwd[20];strcpy(msg.msg,"#hello");//发送消息helloprintf("输入用户名：\n");scanf("%s",name);while(getchar()!='\n'){}strcpy(msg.name,name);printf("输入密码：\n");scanf("%s",passwd);while(getchar()!='\n'){}strcpy(msg.passwd,passwd);msg.cmd = 2;//2表示为登陆类型write(sockfd,&amp;msg,sizeof(msg));//将msg写入套接字，发送给服务器read(sockfd,&amp;msg,sizeof(msg));//读取服务器的回复printf("msg.cmd = %d\n",msg.cmd);//打印服务回复的信息类型if(msg.cmd == 102){//回复码为102登陆成功printf("登陆成功！\n请稍后......\n");sleep(3);}else if(msg.cmd == -1){printf("登陆失败，请检查账号或者密码！\n请稍后......\n");sleep(3);}else if(msg.cmd == -2){printf("用户不存在！\n请稍后......\n");sleep(3);}}//客户端向服务器发送注册/登录的选择Messges ask_ser(int sockfd){char choice;Interface();printf("请选择1或者2\n");scanf("%c",&amp;choice);switch (choice){case '1'://注册Reg(sockfd);break;case '2'://登陆Entry(sockfd);break;}system("clear");//清理屏幕输出return msg;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="功能实现-2"><a href="#功能实现-2" class="headerlink" title="功能实现"></a>功能实现</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/socket.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;pthread.h&gt;#include "../include/clientlogin/clientlogin.h"#include "../include/mysql_connection/mysql_connect.h"#define PORT 7990const char * HostIP = "192.168.203.137";int sockcd;//客户端socketchar user_name[20];//用户名char pass_wd[20];//用户密码Messges msg;//引入自定义的消息类型，用于连接的Messges msg_talk;//用于聊天信息void* recv_pthread(void*p);void online_num(MYSQL *conndb);int main(){int ret;int choice;pthread_t tid;MYSQL *mysql_handle = NULL;//引入数据库//连接数据库mysql_handle = db_init(mysql_handle);//连接远程数据库mysql_handle =db_connect(mysql_handle,"47.120.41.232","root","123456","chat");int create;//创建子线程专门用于接受消息sockcd = socket(AF_INET,SOCK_STREAM,0);typedef struct sockaddr SA;//引入结构体struct sockaddr_in addr;bzero(&amp;addr,sizeof(addr)); //等同于memset(&amp;ser_addr,0,sizeof(ser_addr));addr.sin_family = AF_INET;addr.sin_port = htons(PORT);inet_pton(AF_INET, HostIP, &amp;addr.sin_addr.s_addr); //指定IP 字符串类型转换为网络字节序 参3:传出参数//addr.sin_addr.s_addr = htonl(INADDR_ANY);ret = connect(sockcd,(SA*)&amp;addr,sizeof(addr));if(ret == -1){perror("无法连接\n");exit(1);}printf("连接成功\n");//客户端向服务器发送注册/登录的选择msg = ask_ser(sockcd);if(msg.cmd == -2){printf("\n");printf("%s用户还没有注册\n或者检查一下用户名是否输入错误吧\n",msg.name);printf("\n");exit(1);}if(msg.cmd == -1){printf("\n");printf("登陆失败！\n");printf("\n");exit(1);}if(msg.cmd == -3){printf("\n");printf("%s用户已注册\n",msg.name);printf("\n");exit(1);}//获取用户名strcpy(user_name,msg.name);if(msg.cmd == 101 || msg.cmd == 102){sprintf(msg.msg,"%s进入聊天室",msg.name);printf("%s进入聊天室\n",msg.name);msg.cmd = 0;write(sockcd,&amp;msg,sizeof(msg));//写给服务端}printf("=============================\n");printf(" 1.输入#hello，可选择查看状态\n");printf(" 2.输入#clear，可清除当前终端消息\n");printf(" 3.输入#exit，可退出登陆\n");printf(" 4.直接输入文字即可聊天（上三种特殊字符不可用于聊天）\n");printf("=============================\n");//create = pthread_create(&amp;tid,0,recv_pthread,0);//if(create != 0){// printf("create pthread error\n");//}//pthread_detach(tid);/*printf("选择聊天类型\n1：私聊\t2：群聊\n");int temp;scanf("%d",&amp;temp);if(temp == 1){printf("当前在线的用户\n");online_num(mysql_handle);printf("请选择聊天的对象\n");char user_to_msg[20];scanf("%s",user_to_msg);if(!if_name_exist(mysql_handle,user_to_msg)){printf("%s用户不存在！\n",user_to_msg);exit(1);}strcpy(msg_talk.name,user_to_msg);printf("输入#exit退出登录\n");while(1){//输入发送的消息scanf("%s",msg_talk.msg);if(strcmp(msg_talk.msg ,"#exit")){sprintf(msg_talk.msg,"%s退出聊天室\n",user_name);strcpy(msg_talk.name,user_name);write(sockcd,&amp;msg_talk,sizeof(msg_talk));close(sockcd);//关闭套接字exit(1);}msg_talk.cmd = 8;//私聊消息的状态码strcpy(msg.name,user_to_msg);write(sockcd,&amp;msg_talk,sizeof(msg_talk));read(sockcd,&amp;msg_talk,sizeof(msg_talk));if(msg_talk.cmd == 9){printf("%s:%s\n",msg_talk.name,msg_talk.msg);}}}*/create = pthread_create(&amp;tid,0,recv_pthread,0);if(create != 0){printf("create pthread error\n");}pthread_detach(tid);while(1){//输入发送的消息scanf("%s",msg_talk.msg);msg_talk.cmd = 0;strcpy(msg_talk.name,user_name);//客户端退出if(strcmp(msg_talk.msg,"#exit") == 0){sprintf(msg_talk.msg,"%s退出聊天室\n",user_name);strcpy(msg_talk.name,user_name);write(sockcd,&amp;msg_talk,sizeof(msg_talk));close(sockcd);//关闭套接字break;}else if(strcmp(msg_talk.msg,"#clear") == 0){system("clear");}else if(strcmp(msg_talk.msg,"#hello") == 0){printf("=============================\n");printf(" 1.查看用户状态\n");printf(" 2.设置在线状态\n");printf(" 3.设置离线状态\n");printf("=============================\n");scanf("%d",&amp;choice);switch(choice){case 1://msg_talk.cmd = 3;//write(sockcd,&amp;msg_talk,sizeof(msg_talk));//read(sockcd,&amp;msg_talk,sizeof(msg_talk));//从服务端读回信息//msg_talk.cmd = 0;//重置状态码/*printf("=============================\n");for(int i =0 ;i&lt;3;i++){printf("%-10s",msg_talk.online[i]);}for(int j = 3;j&lt;msg_talk.len;j++){}printf("\n");printf("=============================\n");*/online_num(mysql_handle);break;case 2:msg_talk.cmd = 4;strcpy(msg_talk.name,user_name);write(sockcd,&amp;msg_talk,sizeof(msg_talk));msg_talk.cmd = 0;printf("设置成功\n");break;case 3:msg_talk.cmd = 5;strcpy(msg_talk.name,user_name);write(sockcd,&amp;msg_talk,sizeof(msg_talk));msg_talk.cmd = 0;printf("设置成功\n");break;}}else{write(sockcd,&amp;msg_talk,sizeof(msg_talk));//没有选择就直接发送信息}}return 0;}void* recv_pthread(void*p){Messges msg_talk2;while(1){if(msg_talk.cmd !=3){read(sockcd,&amp;msg_talk2,sizeof(msg_talk2));}if(msg_talk.cmd == 0){printf("%s:%s\n",msg_talk2.name,msg_talk2.msg);}}}//启动子线程处理服务端消息void online_num(MYSQL *conndb){if(info_table(conndb,"select *from user_online")){//printf("查询成功!\n");}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="头文件定义-3"><a href="#头文件定义-3" class="headerlink" title="头文件定义"></a>头文件定义</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_ERRO_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_ERRO_</span></span><span class="token keyword">void</span> <span class="token function">info_erro</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="功能实现-3"><a href="#功能实现-3" class="headerlink" title="功能实现"></a>功能实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"erro.h"</span></span><span class="token keyword">void</span> <span class="token function">info_erro</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><pre class="line-numbers language-none"><code class="language-none">cmd = 0;//默认码cmd = 1;//注册消息码cmd = 2;//登陆消息码cmd = 3;//查询在线状态码cmd = 4;//设置在线码cmd = 5;//设置离线码cmd = 8;//私聊消息的状态码cmd = 9;//私聊消息的回复码cmd = -1;//错误码cmd = -2;//登陆用户名不存在错误回复码cmd = -3;//注册用户名已存在错误回复码cmd = 101;//注册成功回复码cmd = 102;//登陆成功回复<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件目录及CMake"><a href="#文件目录及CMake" class="headerlink" title="文件目录及CMake"></a>文件目录及CMake</h2><h3 id="文件树"><a href="#文件树" class="headerlink" title="文件树"></a>文件树</h3><p><img src="/2023/05/22/c-yu-yan-liao-tian-shi/image-20231025225701425.png"></p><hr><p><img src="/2023/05/22/c-yu-yan-liao-tian-shi/image-20231025225743610.png" alt="include文件"></p><p>主要代码</p><p><img src="/2023/05/22/c-yu-yan-liao-tian-shi/image-20231025225831133.png" alt="src目录"></p><p>客户端及服务端实现</p><p><img src="/2023/05/22/c-yu-yan-liao-tian-shi/image-20231025225913287.png" alt="script目录"></p><h3 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h3><h4 id="src"><a href="#src" class="headerlink" title="src"></a>src</h4><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token property">INCLUDE_DIRECTORIES</span><span class="token punctuation">(</span><span class="token punctuation">${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/include/erro<span class="token punctuation">)</span><span class="token property">INCLUDE_DIRECTORIES</span><span class="token punctuation">(</span><span class="token punctuation">${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/include/clientlogin<span class="token punctuation">)</span><span class="token property">INCLUDE_DIRECTORIES</span><span class="token punctuation">(</span><span class="token punctuation">${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/include/serverlogin<span class="token punctuation">)</span><span class="token property">INCLUDE_DIRECTORIES</span><span class="token punctuation">(</span><span class="token punctuation">${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/include/mysql_connection<span class="token punctuation">)</span><span class="token function">SET</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span>/bin<span class="token punctuation">)</span><span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span>client client.c<span class="token punctuation">)</span><span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span>server server.c<span class="token punctuation">)</span><span class="token function">TARGET_LINK_LIBRARIES</span><span class="token punctuation">(</span>client clientlogin<span class="token punctuation">)</span><span class="token function">TARGET_LINK_LIBRARIES</span><span class="token punctuation">(</span>client mysql_connection<span class="token punctuation">)</span><span class="token function">TARGET_LINK_LIBRARIES</span><span class="token punctuation">(</span>client erro<span class="token punctuation">)</span>           <span class="token comment">#链接的顺序不能随意改变!!!</span><span class="token function">TARGET_LINK_LIBRARIES</span><span class="token punctuation">(</span>client -lpthread <span class="token punctuation">)</span> <span class="token comment">#添加pthread的链接库</span><span class="token function">TARGET_LINK_LIBRARIES</span><span class="token punctuation">(</span>client  -lmysqlclient<span class="token punctuation">)</span> <span class="token comment">#添加mysql的链接库</span><span class="token function">TARGET_LINK_LIBRARIES</span><span class="token punctuation">(</span>server serverlogin<span class="token punctuation">)</span><span class="token function">TARGET_LINK_LIBRARIES</span><span class="token punctuation">(</span>server erro<span class="token punctuation">)</span><span class="token function">TARGET_LINK_LIBRARIES</span><span class="token punctuation">(</span>server mysql_connection<span class="token punctuation">)</span><span class="token function">TARGET_LINK_LIBRARIES</span><span class="token punctuation">(</span>server -lpthread<span class="token punctuation">)</span> <span class="token comment">#添加pthread的链接库</span><span class="token function">TARGET_LINK_LIBRARIES</span><span class="token punctuation">(</span>server -lmysqlclient<span class="token punctuation">)</span> <span class="token comment">#添加mysql的链接库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="clientlogin"><a href="#clientlogin" class="headerlink" title="clientlogin"></a>clientlogin</h4><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token function">AUX_SOURCE_DIRECTORY</span><span class="token punctuation">(</span>. DIR_LIB_SRCS<span class="token punctuation">)</span><span class="token function">SET</span><span class="token punctuation">(</span><span class="token variable">LIBRARY_OUTPUT_PATH</span> <span class="token punctuation">${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span>/lib<span class="token punctuation">)</span><span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>clientlogin <span class="token namespace">STATIC</span> <span class="token punctuation">${</span>DIR_LIB_SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="serverlogin"><a href="#serverlogin" class="headerlink" title="serverlogin"></a>serverlogin</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">AUX_SOURCE_DIRECTORY</span><span class="token punctuation">(</span><span class="token punctuation">.</span> DIR_LIB_SRCS<span class="token punctuation">)</span><span class="token function">SET</span><span class="token punctuation">(</span>LIBRARY_OUTPUT_PATH $<span class="token punctuation">{</span>PROJECT_BINARY_DIR<span class="token punctuation">}</span><span class="token operator">/</span>lib<span class="token punctuation">)</span><span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>serverlogin STATIC $<span class="token punctuation">{</span>DIR_LIB_SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="erro"><a href="#erro" class="headerlink" title="erro"></a>erro</h4><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token function">AUX_SOURCE_DIRECTORY</span><span class="token punctuation">(</span>. DIR_LIB_SRCS<span class="token punctuation">)</span><span class="token function">SET</span><span class="token punctuation">(</span><span class="token variable">LIBRARY_OUTPUT_PATH</span> <span class="token punctuation">${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span>/lib<span class="token punctuation">)</span><span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>erro <span class="token namespace">STATIC</span> <span class="token punctuation">${</span>DIR_LIB_SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mysql-connection"><a href="#mysql-connection" class="headerlink" title="mysql_connection"></a>mysql_connection</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">AUX_SOURCE_DIRECTORY<span class="token punctuation">(</span>. DIR_LIB_SRCS<span class="token punctuation">)</span>SET<span class="token punctuation">(</span>LIBRARY_OUTPUT_PATH <span class="token variable">${PROJECT_BINARY_DIR}</span>/lib<span class="token punctuation">)</span>ADD_LIBRARY<span class="token punctuation">(</span>mysql_connection STATIC <span class="token variable">${DIR_LIB_SRCS}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/LookAt-MeNow/Course-Design/tree/main/NetDesign">源码</a></p>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> socket </tag>
            
            <tag> c </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶</title>
      <link href="/2023/04/24/mysql-jin-jie/"/>
      <url>/2023/04/24/mysql-jin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这部分是在Linux服务器环境下运行的，所以要先准备一台Linux服务器用来部署MySQL数据库</p><p><a href="https://blog.csdn.net/qq_39150374/article/details/112471108">参考文章</a>这里使用的是centos，当然也可以使用别的Linux服务器。</p><p><a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=58&amp;vd_source=0b40190a213587c640058e43c52ee52a">mysql进阶参考视频</a></p><p><img src="/2023/04/24/mysql-jin-jie/image-20230505134416899.png" alt="使用xshell连接"></p><p><img src="/2023/04/24/mysql-jin-jie/image-20230505134502403.png" alt="在windows下的DataGrip里连接远程数据库"></p><p>主机填的是你的服务器外网ip，点击测试连接，显示向上面这样就可以。</p><h2 id="一、存储引擎"><a href="#一、存储引擎" class="headerlink" title="一、存储引擎"></a>一、存储引擎</h2><p>MySQL有多种存储引擎，现在最常用的是InnoDB，引擎可以理解为发动机引擎，不同类型的工具用不同的引擎，比如汽车不能用飞机的引擎，飞机不能用火箭的引擎。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 建表时指定存储引擎create table 表名(...) engine=InnoDB;-- 查看当前数据库支持的存储引擎show engines;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/24/mysql-jin-jie/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEyNjQyNw==,size_16,color_FFFFFF,t_70.png" alt="常用的存储引擎"></p><p><img src="/2023/04/24/mysql-jin-jie/image-20230505163139807.png" alt="当前数据库支持的存储引擎"></p><p><strong>comment对存储引擎的特点做了注释，InnoDB就支持回溯，也就是事务安全，行锁以及外键</strong></p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p><strong>InnoDB 存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是对比 MyISAM的存储引擎，InnoDB 写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。</strong></p><p>文件：xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</p><p>打开是一个json文件</p><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p><img src="/2023/04/24/mysql-jin-jie/image-20230505164313251.png" alt="逻辑存储结构"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 不支持事务、也不支持外键，其优势是访问的速度快，对事务完整性没有要求或者以 select、insert 为主的应用基本上都可以使用这个引擎来创建表。</p><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件： xxx.sdi: 存储表结构信息       xxx.MYD: 存储数据        xxx.MYI: 存储索引</p><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p><strong>Memory类型的表访问非常得快，因为它的数据是放在内存中的，并且默认使用 HASH 索引，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</strong></p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p>文件：xxx.sdi: 存储表结构信息</p><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>绝大部分都是使用InnoDB。</p><p>MyISAM的使用场景是以读操作和插入操作为主的，很少有更新和删除操作，并且对事务的完整性，并发性要求不高，选择MyISAM，例如日志文件，评论留言等。</p><p>Memory所有的数据都在内存中保存，访问速度快，适合临时缓存用。</p><p><strong>Memory在实际开发中逐渐被Redis替代</strong></p><h2 id="二、索-引"><a href="#二、索-引" class="headerlink" title="二、索  引"></a>二、索  引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>使用索引的优点：</p><p>提高了数据的检索效率；降低了数据排序的成本，降低CPU消耗；</p><p>使用索引的缺点：</p><p>占用空间；降低了更新的操作；</p><h3 id="索引的结构"><a href="#索引的结构" class="headerlink" title="索引的结构"></a>索引的结构</h3><h4 id="B-tree"><a href="#B-tree" class="headerlink" title="B+tree"></a>B+tree</h4><p>最常见的索引类型，大部分的引擎也都支持B+树索引</p><p>如果直接使用二叉树来存储，如果存的是顺序表的话，检索的效率也会很低。使用红黑树在大量数据的情况下导致层级较深。使用<strong>B-tree</strong> (多路平衡查找树)结构可以解决这些问题。</p><p><img src="/2023/04/24/mysql-jin-jie/image-20230505180508001.png" alt="B-Tree的结构"></p><p><strong>max-degree代表度数，最多可以存max-degree-1个数据，有max-degree个指针</strong></p><p><img src="/2023/04/24/mysql-jin-jie/20160202204827368.png" alt="B-tree存储"></p><p><a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">B-tree创建过程模拟</a></p><p>而在**InnoDB中使用了优化的B+tree,**使其更适合实现外存储索引结构。</p><p><img src="/2023/04/24/mysql-jin-jie/image-20230505181945842.png"></p><p><a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">B+tree创建模拟</a></p><p><img src="/2023/04/24/mysql-jin-jie/20160202205105560.png"></p><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p><a href="https://blog.csdn.net/yin767833376/article/details/81511377">B-tree以及B+tree参考文章</a></p><p><strong>InnoDB使用B+tree的原因</strong></p><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>B-Tree无论叶子节点还是非叶节点都会保存数据，导致一页中存储的数据变少，增加树的高度，导致性能下降</li><li>相对于Hash索引，B+tree支持范围内的匹配以及排序</li></ul><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>哈希索引是将键值换算成新的hash值，映射到相应的槽位上，然后存储在hash表中，时间复杂度为1</p><p>如果多个键值映射到一个槽位上，就产生hash冲突，通过链表解决。</p><p><img src="/2023/04/24/mysql-jin-jie/image-20230508172549723.png"></p><p>特点：</p><ol><li>hash索引只能用于对等比较，不能范围查询</li><li>无法利用索引排序</li><li>查询效率高</li><li>支持Memory，InnoDB自适应hash索引</li></ol><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><p>先创建一个表后续使用</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table student(    id   int         not null comment '学号'        primary key,    name varchar(10) null comment '学生姓名',    专业 varchar(10) null,    年龄 varchar(2)  null);insert into student values(1,'张三','计算机科学与技术',19),(2,'李三','大数据',23),(3,'王三','人工智能',18),(4,'陈三','物联网技术',22),(5,'倪三','物联网技术',20),(6,'洪三','计算机科学与技术',21),(7,'朱三','人工智能',20),(8,'杨三','计算机科学与技术',19),(9,'尹三','物联网技术',23),(10,'谷三','茶与生活',22),(11,'丁三','人工智能',21);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p><img src="/2023/04/24/mysql-jin-jie/image-20230508175523100.png" alt="存储结构"></p><ul><li>如果表中存在主键，则主键就是聚集索引</li><li>如果表中没有主键，则<strong>第一个</strong>唯一索引作为聚集索引</li><li>如果两个都没有，InnoDB会自动生成一个rowid作为隐藏聚集索引</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">desc select *from student where id = 1;      --1desc select *from student where name = '张三';   --2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>语句1的执行速度要大于语句2，因为语句1根据id查找使用了聚集索引，一步到位。</p><p>语句2先是根据二级索引知道了张三的id值，又回表查询进行聚集查询。</p><h3 id="索引的语法"><a href="#索引的语法" class="headerlink" title="索引的语法"></a>索引的语法</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">--创建索引create [unique|fulltext](如果不选就是常规索引) index 索引名(一般是idx+表名+字段名) on 表名(要添加索引的字段名);-- 查看索引show index from 表名;--删除索引drop index 索引名 on 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 每个学生的名字都是不重复的添加unqiue索引create unique index idx_stu_name on student (name);-- 为年龄还有专业创建联合索引create index idx_stu_age_maj on student (专业,年龄);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/24/mysql-jin-jie/image-20230508181159472.png" alt="查看索引"></p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><h4 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h4><p>查看当前数据的增删改查的频率</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show [global|session] status like 'com_______';  -- 七个下划线<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/04/24/mysql-jin-jie/image-20230508181621369.png" alt="看常用的几个就可以了"></p><h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><p>慢查询日志记录了所有执行时间超过指定时间的语句。</p><p>Mysql的慢查询日志默认没有打开，需要在配置文件中查看(/etc/my.cnf)      <a href="https://lookat-menow.github.io/2023/02/20/kai-fa-gong-ju-lian/#%E4%B8%80%E3%80%81vim">vim使用参考</a></p><p>或者直接在终端执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc  <span class="token comment">#移动到etc文件夹下</span><span class="token builtin class-name">echo</span> slow_query_log <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> my.cnf  <span class="token comment">#将慢查询日志打开</span><span class="token builtin class-name">echo</span> <span class="token assign-left variable">long_query_time</span><span class="token operator">=</span><span class="token number">2</span>  <span class="token operator">&gt;&gt;</span> my.cnf  <span class="token comment">#设置慢查询日志的时间为2s，sql语句超过2s就会记录再日志中</span><span class="token builtin class-name">cd</span> /<span class="token function">service</span> mysqld restart   <span class="token comment">#重启mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行完后再查看日志开关的状态</p><p><code>show variables like 'slow_query_log';</code>  值为ON即可</p><p>日志文件在 <code>/var/lib/mysql/localhost-slow.log</code></p><h4 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h4><p>show profile可以告诉我们sql在运行时间耗费在了哪里。</p><p>查看当前Mysql是否支持profile <code>select @@have_profiling;</code></p><p>打开profiling  <code>set profiling = 1;</code></p><p>这里如果你在dataGrip可以成功使用show profiles ,但是在Linux主机中报错</p><p><img src="/2023/04/24/mysql-jin-jie/image-20230508185600428.png" alt="具体报错"></p><p>这说明你没有打开profiling ,你只是在DataGrip下设置为1，而不是全局设置，可以直接<code>set global profilinf</code>一步到位</p><p>查看所有语句耗时 <code>show profiles</code></p><p><img src="/2023/04/24/mysql-jin-jie/image-20230508185159517.png" alt="查看语句耗时"></p><p>查看指定的query_id的sql语句具体各个阶段的耗时</p><p><code>show profile for query query_id;</code></p><p><img src="/2023/04/24/mysql-jin-jie/image-20230508185750971.png" alt="查询6"></p><h4 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h4><p>使用explain或者desc命令获取mysql如何执行select语句的信息，包括select语句在执行的过程中表如何连接与连接的顺序。</p><p>用法直接在select前面加explain就可以了</p><p>各个字段的含义</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序<strong>（id相同，执行顺序从上到下；id不同，值越大越先执行）</strong></td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</td></tr><tr><td>type</td><td>表示连接类型，<strong>性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</strong></td></tr><tr><td>possible_key</td><td>可能应用在这张表上的索引，一个或多个</td></tr><tr><td>key</td><td>实际使用的索引，如果为 NULL，则没有使用索引</td></tr><tr><td>key_len</td><td>表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</td></tr><tr><td>rows</td><td>MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</td></tr><tr><td>filtered</td><td>表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</td></tr></tbody></table><p>一般的type是不会达到NULL，systeam是系统的表。</p><p><img src="/2023/04/24/mysql-jin-jie/image-20230508191922525.png"></p><p>在这查询中就可以看到使用了定义的联合索引，如果查询id为5的学生则对应的使用就应该是聚集索引。</p><h3 id="索引使用"><a href="#索引使用" class="headerlink" title="索引使用"></a>索引使用</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引使用了联合索引，要遵循最左前缀法则。</p><p>最左前缀法则：<strong>查询从索引的最左列开始，并且不能跳过中间的列。</strong></p><p>如果跳跃了某一列，则**索引将部分失效(并不是全部)**，联合索引中出现范围查询，范围查询右边的索引失效，但是可以用<code>&gt;=</code>和<code>&lt;=</code>来代替&gt;    &lt;。</p><p>示例：</p><p><img src="/2023/04/24/mysql-jin-jie/image-20230508195654294.png" alt="正常使用"></p><p>正常使用的使用了联合索引</p><p><img src="/2023/04/24/mysql-jin-jie/image-20230508194040609.png" alt="单个查询最左的依然使用了联合索引"></p><p><img src="/2023/04/24/mysql-jin-jie/image-20230508194457455.png" alt="如果直接跳过最左的，则后面的查询不是索引查询，并且这里的type变为ALL，是最慢的"></p><h4 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况"></a>索引失效的情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = '15';</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like '%工程';</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2023/04/21/mysql-ji-chu/"/>
      <url>/2023/04/21/mysql-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>视频参考：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p">黑马程序员</a></p><p>这部分是基础操作，在window环境下运行的。</p><h2 id="SQL通用语法及分类"><a href="#SQL通用语法及分类" class="headerlink" title="SQL通用语法及分类"></a>SQL通用语法及分类</h2><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><p>DDL用于对数据的定义</p><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show databases;  #查询所有的数据库select database(); #查询当前所在的数据库create database [if not exists] 数据库名 [default charset 字符集] [collate 排序规则] #创建数据库drop database [if exists] 数据库名 #删除数据库use 数据库名 #使用数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</strong></p><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show tables; #查询当前数据库的所有表desc 表名; #查询表的结构create table 表名(名称 类型 comment "注释",    名称 类型 comment "注释",    名称 类型 comment "注释",    ....    名称 类型 comment "注释",    名称 类型 comment "注释"); #创建表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建表最后一个字段是没有逗号的</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 add 名称 类型 comment "注释" #添加字段alter table 表名 modify 名称 新数据的类型 #修改数据的类型alter table 表名 change 旧名称 新名称 类型 comment "注释" #修改名称和字段类型alter table 表名 drop 名称 #删除表中数据alter table 表名 rename to 新表名 # 修改表名drop table 表名 #删除表truncate table 表名 #删除表，并重新创建该表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><p>DML用于数据操作</p><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名 (字段1，字段2...) values(值1，值2....) #在指定的字段添加数据insert into 表名 values(值1,值2...) #在全部字段添加数据#values(值1,值2...)  values(值1,值2...)  values(值1,值2...)多跟几个可以批量添加数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/21/mysql-ji-chu/image-20230421173938480.png" alt="示例"></p><p>字符串和日期这类数据需要用<strong>单引号引起来</strong></p><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update 表名 set 字段1 = 值1, 字段2 = 值2,.... [where 条件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="/2023/04/21/mysql-ji-chu/image-20230421174528025.png" alt="示例"></p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delete from 表名 [where 条件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/04/21/mysql-ji-chu/image-20230421174705844.png" alt="示例"></p><h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><p>DQL用于数据查询</p><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段1,字段2... from 表名; #根据字段查询select *from 表名 #查询所有<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/04/21/mysql-ji-chu/image-20230421180354875.png" alt="示例，第二个上面已经用过很多次了"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段1 [别名1],..... from 表名 #设置别名#在select 后加上distingct可以不显示重复项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/04/21/mysql-ji-chu/image-20230421180652298.png" alt="示例"></p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段列表 from 表名 where 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 ||</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 年龄等于30select * from employee where age = 30;-- 年龄小于30select * from employee where age &lt; 30;-- 小于等于select * from employee where age &lt;= 30;-- 没有身份证select * from employee where idcard is null or idcard = '';-- 有身份证select * from employee where idcard;select * from employee where idcard is not null;-- 不等于select * from employee where age != 30;-- 年龄在20到30之间select * from employee where age between 20 and 30;select * from employee where age &gt;= 20 and age &lt;= 30;-- 下面语句不报错，但查不到任何信息select * from employee where age between 30 and 20;-- 性别为女且年龄小于30select * from employee where age &lt; 30 and gender = '女';-- 年龄等于25或30或35select * from employee where age = 25 or age = 30 or age = 35;select * from employee where age in (25, 30, 35);-- 姓名为两个字select * from employee where name like '__';-- 身份证最后为Xselect * from employee where idcard like '%X';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>视频教程中的示例</p><h4 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 聚合函数(字段列表) from 表名 [where 条件];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/04/21/mysql-ji-chu/image-20230421183321353.png" alt="示例"></p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后的过滤条件];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>where和having的不同：</p><ul><li>执行时间不同，where是在分组之前过滤，不满足where条件不参加分组；having是分组后对结果过滤；</li><li>判断条件不同：where不同对聚合函数进行判断，having可以。</li></ul><p><img src="/2023/04/21/mysql-ji-chu/image-20230421184531818.png" alt="示例"></p><p><strong>其中优先级where&gt;group by&gt;having</strong></p><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段列表 from 表名 order by 字段1 排序方式1,字段2 排序方式2;#ASC 升序(默认)#DESC 降序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>多字段排序时，先满足了第一个字段，才会去满足第二个序列</strong></p><p><img src="/2023/04/21/mysql-ji-chu/image-20230421185515496.png" alt="降序"></p><p><img src="/2023/04/21/mysql-ji-chu/image-20230421185535568.png" alt="升序"></p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段列表 from 表名 limit 起始索引,查询记录数;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>起始索引计算 = (页面数-1)*查询记录数。</p><p><img src="/2023/04/21/mysql-ji-chu/image-20230421190605990.png" alt="示例"></p><ul><li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><p><strong>DQL执行顺序</strong></p><p>from&gt; where &gt; group by &gt; select &gt; order by &gt; limit</p><h3 id="DLC"><a href="#DLC" class="headerlink" title="DLC"></a>DLC</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">user mysql; #使用用户select *from user; #查询用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">--创建用户create user '用户名'@'主机名' identified by '密码';--修改用户密码alter user '用户名'@'主机名' identified with mysql_nativa_password by '新密码';--删除用户drop user '用户名'@'主机名';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create user 'zhang'@'%' identified by '12345';alter user 'zhang'@'%' identified with mysql_native_password by '123456';drop user 'zhang'@'%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>这里的主机名称如果写locathost则只能在本机上使用。</strong></p><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show grants for '用户名'@'主机名'; #查看权限<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">grant 权限列表 on 数据库名.表名 to '用户名'@'主机名'; #授予权限<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">revoke 权限列表 on 数据库名.表名 from '用户名'@'主机名'; #撤销权限<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><p>这里其实跟linxu里面的用户类似，不同的用户拥有不同的权限。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>concat(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>lower(str)</td><td>将字符串全部转为小写</td></tr><tr><td>upper(str)</td><td>将字符串全部转为大写</td></tr><tr><td>lpad(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>rpad(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>trim(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>substring(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><p><img src="/2023/04/21/mysql-ji-chu/image-20230422153052548.png" alt="示例"></p><p><strong>注意这里的num的类型是varchar，因为这个函数操作的对象是字符串。</strong></p><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>ceil(x)</td><td>向上取整</td></tr><tr><td>floor(x)</td><td>向下取整</td></tr><tr><td>mod(x, y)</td><td>返回x/y的模</td></tr><tr><td>rand()</td><td>返回0~1内的随机数</td></tr><tr><td>round(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><p><img src="/2023/04/21/mysql-ji-chu/image-20230422153612041.png" alt="示例"></p><p>rand()先生成一个0到1的随机数，然后*1000000，但是还会有小叔部分，用四舍五入去掉小数位，但是生成的随机数有可能是5位，4位，甚至1位，毕竟就算0.00001也是0到1的一个随机数，用在lpad()保证是6位数，不足的用0补全。</p><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>curdate()</td><td>返回当前日期</td></tr><tr><td>curtime()</td><td>返回当前时间</td></tr><tr><td>now()</td><td>返回当前日期和时间</td></tr><tr><td>year(date)</td><td>获取指定date的年份</td></tr><tr><td>month(date)</td><td>获取指定date的月份</td></tr><tr><td>day(date)</td><td>获取指定date的日期</td></tr><tr><td>data_add(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>datediff(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p><img src="/2023/04/21/mysql-ji-chu/image-20230422154838069.png" alt="示例"></p><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>if(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>ifnull(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>（case when [ val1 ] then [ res1 ] … else [ default ] end）</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>（case [ expr ] when [ val1 ] then [ res1 ] … else [ default ] end）</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><p><img src="/2023/04/21/mysql-ji-chu/image-20230422155840103.png" alt="示例"></p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>用于限制表中的数据，为了保证表中的数据的准确和可靠性。MySQL数据库通过约束防止无效的数据进入到表中，以保护数据的实体完整性。</p><p><strong>分类</strong></p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td></td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>default</td></tr><tr><td>检查约束</td><td>保证字段值满足某一个条件</td><td>check</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table><p>主要归类为列级约束和表级约束</p><ol><li><code>列级约束</code>：<code>NOT NULL</code> | <code>DEFAULT</code> | <code>PRIMARY KEY</code> | <code>UNIQUE</code> | <code>CHECK</code></li><li><code>表级约束</code>：<code>PRIMARY KEY</code> | <code>UNIQUE</code> | <code>CHECK</code> | <code>FOREIGN KEY</code></li></ol><h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>primary key</td></tr><tr><td>自动增长</td><td>auto_increment</td></tr><tr><td>不为空</td><td>not null</td></tr><tr><td>唯一</td><td>unique</td></tr><tr><td>逻辑条件</td><td>check</td></tr><tr><td>默认值</td><td>default</td></tr></tbody></table><p>示例</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table user(id int primary key auto_increment, -- 设置主键，并且id会从1自动增长name varchar(10) not null unique, -- 约束name不能为空，并且不可以重复 age int check(age &gt; 0 and age &lt; 120), -- 保证年龄在(1,120)的区间内status char(1) default '1', -- 将状态的默认值设置为1gender char(1) -- 性别没有约束);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>附表添加一个外键绑定在主表的主键上，有点类似于继承关系了，比如一个公司有很多部门，将这些部分建一个主表，每个部分下又有很多细分，再将这个细分部门绑定在同一个上司部门。</p><p><strong>添加外键</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table 表名(字段名 字段类型,...constraint 外键名称 foreign key(外键字段名) references 主表(主表列名));alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表列名);-- 例子alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除外键</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 drop foreign key 外键名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目前这里就只是逻辑上添加了外键，但是没有绑定在一起，假如一个公司的开发部id是5，现在给改成3，它的下属表中的id值并没有更新，这个时候就要添加更新行为，将他们绑定</p><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>no action</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td></tr><tr><td>restrict</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td></tr><tr><td>cascade</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td></tr><tr><td>set null</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>set default</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table><p>更新行为：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表列名) on update 行为 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除行为：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表列名) on delete 行为;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into class values (1,'一班'),(2,'二班'),(3,'三班'); -- 添加数据alter table score add stu_class int; -- 在score表中添加一个绑定key的列alter table score add constraint stu_class foreign key(stu_class) references class(id); -- 绑定key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/04/21/mysql-ji-chu/image-20230422165424701.png" alt="class表"></p><p><img src="/2023/04/21/mysql-ji-chu/image-20230422165450060.png" alt="score表"></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表的关系"><a href="#多表的关系" class="headerlink" title="多表的关系"></a>多表的关系</h3><p><strong>一对一</strong></p><p>比如一个用户的信息有很多，所以拆分为两个表，一个表用于存储简单的信息，一个表用于存储较为复杂的信息，可以提高操作效率。</p><p>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）。</p><p><strong>一对多</strong></p><p>还是公司部门那种，一个部门中会有多个员工</p><p><strong>多对多</strong></p><p>学生选课程，一个学生可以选多个课程，课程也可以被多个学生选择。</p><p>实现：建立一个中间表，用于保存他们直接的关系。</p><hr><p>在单表中的查询可以直接使用<code>select *from 表名;</code></p><p>但是多个表中不能直接用<code>select *fron 表名，表名....;</code></p><p><img src="/2023/04/21/mysql-ji-chu/image-20230422170722750.png" alt="如果直接这样会查出多余的项"></p><p>多余的项是由笛卡尔乘积得来的，我这里两个表总共只有6条记录，查出的9条是3x3得来的，这里就需要添加判断条件，使key对应的显示出来</p><p><img src="/2023/04/21/mysql-ji-chu/image-20230422170925335.png"></p><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>内连接查询的是两张表交集的部分</p><p><strong>隐式内连接</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段列表 from 表1, 表2 where 条件 ...;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>显示内连接</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段列表 from 表1 join 表2 on 连接条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 隐式内连接select s.name,c.班级 from score s , class c where s.stu_class = c.id;-- 显示内连接select s.name,c.班级 from score s join class c on c.id = s.stu_class;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>score s</code>这里是更改了别名，这里改名之后，后面就不能用<code>score.stu_class</code> 因为from的优先级&gt;where。</p><p><img src="/2023/04/21/mysql-ji-chu/image-20230422172404280.png"></p><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>外连接查的是AB交集，并且包含其中一个集合的全部元素</p><p><strong>左连接</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select *from 表1 left join 表2 on 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>右连接</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select *from 表1 right join 表2 on 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在两张表中新加信息</p><p><img src="/2023/04/21/mysql-ji-chu/image-20230422174153487.png" alt="小张是新转来的，还没有加入班级"></p><p><img src="/2023/04/21/mysql-ji-chu/image-20230422174228489.png" alt="学校新开了一个四班"></p><p>这个时候如果用内连接查询并集是找不到小张还有四班的</p><p><img src="/2023/04/21/mysql-ji-chu/image-20230422174407028.png"></p><p>使用左连接查询学生与班级的对应信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from score s left join class c on s.stu_class = c.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/04/21/mysql-ji-chu/image-20230422174546889.png"></p><p>使用右连接查询班级与学生的对应信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from score s right join class c on s.stu_class = c.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/04/21/mysql-ji-chu/image-20230422174918907.png"></p><p>其实只需要用左连接就可以了</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from score s right join class c on s.stu_class = c.id;select * from class c left join score s on s.stu_class = c.id; -- 这两句是等价的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>自连接查询，可以是内连接查询，也可以是外连接查询，用法和上面两种相同</p><p>使用场景：一个部门有很多人，这么多人中又有很多小组，小组中有一个领导，可以在表内查询员工之间的关系。</p><h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a><strong>联合查询</strong></h4><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询数学成绩小于70和语文成绩大于70的学生select *from score where ma_score &lt; 70 -- 注意这里没有分号unionselect *from score where ch_score &gt; 70;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用<code>union all</code>会查看重复项</p><p><img src="/2023/04/21/mysql-ji-chu/image-20230422181615173.png"></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套select语句，称谓嵌套查询，又称子查询。</p><p><strong>子查询外部的语句可以是 insert / update / delete / select 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列</li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：<code>=</code> <code> &lt;</code> <code>&gt;</code> <code> &gt;=</code> <code>&lt;=</code> </p><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 根据学生的班级查找学生-- 需求一:查找三班-- 需求二:查找三班的学生select *from score where stu_class = (select id from class where 班级 = '三班');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段语句查找了三班的学生。</p><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>在指定的集合范围内，多选一</td></tr><tr><td>not in</td><td>不在指定的集合范围内</td></tr><tr><td>any</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>some</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>all</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查找三班和二班的所有学生select *from score where stu_class in (select id from class where 班级 = '三班' or 班级 = '一班');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>后面接的select都是要加<code>()</code>的</p><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查找和小王语文成绩一样的人select * from score where (ch_score,ma_score) = (select ch_score,ma_score from score where name = '小王');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：in</p><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询与xxx1，xxx2的职位和薪资相同的员工select * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2');-- 查询入职日期是2006-01-01之后的员工，及其部门信息select e.*, d.* from (select * from employee where entrydate &gt; '2006-01-01') as e left join dept as d on e.dept = d.id;-- 黑马课程中的示例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>先新建一个表用于后面的操作</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table bank(  id int auto_increment primary key ,  name varchar(10) not null ,  money int);insert into bank values(1,'张三',2000),(2,'李四',2000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><h4 id="事务创建"><a href="#事务创建" class="headerlink" title="事务创建"></a>事务创建</h4><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 张三给李四转1000块-- 张三-1000update bank set money = money - 1000 where name = '张三';-- 李四+1000update bank set money = money + 1000 where name = '李四';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个过程中是没有错误的，正常运行了，但是假如在李四+1000的过程中运行发生了错误则张三的前减少了，李四的钱却没有增加(bank 狂喜)，对于这种情况就要一个事务，如果没有转成功则他们的钱都不变化。</p><p><strong>mysql中是自动提交的，在执行完一句sql语句就会变化，我们可以改成手动提交，每次运行如果没有报错就提交更新，有报错就撤销刚才的操作，这很类似git里的提交操作了，先把操作保存在缓存区，没错误在提交。</strong>如果是自动提交，运行完表就会发生改变，手动提交运行完表没有改变，提交后才改变</p><p><strong>方式一</strong></p><p>将自动提交关掉，改为手动提交</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查看事务提交方式select @@autocommit;-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效SET @@autocommit = 0;-- 提交事务commit;-- 回滚事务rollback;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 先设置为手动提交  (设置一次即可，不需要每次运行都设置)set @@autocommit = 0;-- ------------------------------------- 张三-1000update bank set money = money - 1000 where name = '张三';-- 李四+1000update bank set money = money + 1000 where name = '李四';-- 成功运行就commitcommit ;-- 失败了就撤销操作rollback ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样设置了之后不管运行什么语句都需要重新提交，还是很不方便的。</p><p><strong>方式二</strong></p><p>这个方式不需要设置为手动提交，可以在要运行事务的地方开启一个事务</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">开启事务：start transaction 或 begin transaction;提交事务：commit;回滚事务：rollback;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 开启事务start transaction;-- 张三-1000update bank set money = money - 1000 where name = '张三';-- 李四+1000update bank set money = money + 1000 where name = '李四';-- 成功运行就commitcommit ;-- 失败了就撤销操作rollback ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>四大特性ACID</strong></p><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务处理"><a href="#并发事务处理" class="headerlink" title="并发事务处理"></a>并发事务处理</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>Serializable 性能最差 安全性最好 Read uncommited反之</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查看事务隔离级别：select @@transaction_isolation;设置事务隔离级别：set [ session | global ] transaction isolation level {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>session是会话级别，表示只针对当前会话有效，global表示对所有会话有效</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++11</title>
      <link href="/2023/03/17/c-11/"/>
      <url>/2023/03/17/c-11/</url>
      
        <content type="html"><![CDATA[<h2 id="auto关键字"><a href="#auto关键字" class="headerlink" title="auto关键字"></a>auto关键字</h2><p>auto用于类型推导，<strong>auto仅仅只是一个占位符，在编译的时候被真正的类型代替，所以在定义auto类型的时候要初始化</strong></p><p>你可以这样使用auto</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n=1;auto *p=&amp;n,a=2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样一回定义了一个整形指针还有一个整形变量</p><p>但是你<strong>不能</strong>这样定义</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto a=1,b=2.0,c='o';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看看报错</p><p><img src="/2023/03/17/c-11/image-20230326174725625.png"></p><p>从报错就可以了解到auto使用一回定义多个变量也是要同类型的。</p><h3 id="auto的使用"><a href="#auto的使用" class="headerlink" title="auto的使用"></a><strong>auto的使用</strong></h3><p><strong>auto定义迭代器</strong></p><p>一般定义迭代器</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt;a;vector&lt;int&gt;::iterator i = a.begin();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用auto</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt;a;auto i=a.begin();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以使用在for循环中</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a[10];for(int i=0;i&lt;10;i++){cin&gt;&gt;a[i];}for(int i=0;i&lt;10;i++){cout&lt;&lt;a[i];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用auto</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a[10];for(auto &amp;i:a){cin&gt;&gt;i;}for(auto i:a){cout&lt;&lt;i;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还是用简单很多的，注意在输入的循环中要&amp;。</p><p><strong>用于泛式编程</strong></p><p>对于无法确定类型的使用</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;class A{public:  static int get(){    return 100;  }};class B{public:  static double get(){    return 2.29;  }};template &lt;typename T&gt;void test(){  auto a=T::get();  std::cout&lt;&lt;a&lt;&lt;std::endl;;}int main(){   test&lt;A&gt;();  test&lt;B&gt;();  return 0;}/*  */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="auto的注意事项"><a href="#auto的注意事项" class="headerlink" title="auto的注意事项"></a>auto的注意事项</h3><ol><li>不能再当作函数参数</li><li>不能用于类中不是静态成员的变量</li><li>不能定义数组</li><li>不能用于模板参数</li><li>在定义的时候要初始化</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">test&lt;auto&gt;();//这种写法是错误的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发工具</title>
      <link href="/2023/02/20/kai-fa-gong-ju-lian/"/>
      <url>/2023/02/20/kai-fa-gong-ju-lian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​介绍基本使用以及概念</p><h2 id="一、vim"><a href="#一、vim" class="headerlink" title="一、vim"></a>一、vim</h2><p>vim在大多数的IDE都是有支持插件的，以下操作是在vscode进行的。</p><p>在插件商店搜索 vim</p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230220195558123.png" alt="第一个就是"></p><p>在windows下安装就可以使用了，在Mac中用根据插件说明进行设置。</p><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>vim有四种模式：</p><p>普通模式：可以进行换行等操作</p><p>插入模式：字面意思，再次模式下可以进行文字的输入</p><p>可视化模式：可以选择一块编辑区域，然后对选中的文件内容执行插入、删除、替换、改变大小写等操作</p><p>命令行模式：在这种模式可以进行一些命令操作</p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230301213816293.png" alt="模式之间的转化"></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><table><thead><tr><th>对应按键</th><th>操作</th></tr></thead><tbody><tr><td>h</td><td>光标向左移动</td></tr><tr><td>k</td><td>光标向上移动</td></tr><tr><td>l</td><td>光标向右移动</td></tr><tr><td>j</td><td>光标向下移动</td></tr><tr><td>0</td><td>跳到行首</td></tr><tr><td>^</td><td>跳到从行首开始的第一个非空字符</td></tr><tr><td>$</td><td>跳到行尾</td></tr><tr><td>gg</td><td>跳到第一行</td></tr><tr><td>G</td><td>跳到最后一行</td></tr><tr><td>f+{char}</td><td>光标跳到下一个{char}所在的位置</td></tr><tr><td>F+{char}</td><td>光标跳到上一个{char}所在的位置</td></tr><tr><td>；</td><td>重复上一次的查找动作</td></tr><tr><td>dd</td><td>剪切光标所在的行</td></tr><tr><td>n+d</td><td>向上剪切n行</td></tr><tr><td>n+dd</td><td>向下剪切n行</td></tr><tr><td>yy</td><td>复制光标所在的行</td></tr><tr><td>n+y</td><td>向上复制n行</td></tr><tr><td>n+yy</td><td>向下复制n行</td></tr><tr><td>p</td><td>粘贴操作</td></tr><tr><td>c</td><td>修改操作（删除并进去插入模式）</td></tr><tr><td>ctrl+r</td><td>重复上一次的操作</td></tr><tr><td>ctrl+f</td><td>向下翻页</td></tr><tr><td>ctrl+b</td><td>向上翻页</td></tr><tr><td>v</td><td>进入可视化操作</td></tr><tr><td>~</td><td>将光标下的字母改变大小写</td></tr></tbody></table><p>以上列出的仅仅是一些常用的操作，还有一些操作用的不是很多或者都可以用以上操作代替就没有罗列</p><p>这里的 d c y v等叫做操作符，操作符可以配合着动作实现一些操作</p><h3 id="动作与操作符"><a href="#动作与操作符" class="headerlink" title="动作与操作符"></a>动作与操作符</h3><p>动作的格式：</p><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td>iw</td><td>改变单词</td></tr><tr><td>i(</td><td>改变()里的内容</td></tr><tr><td>i{</td><td>改变{}里的内容</td></tr><tr><td>i&lt;</td><td>改变&lt;&gt;里的内容</td></tr><tr><td>i[</td><td>改变[]里的内容</td></tr><tr><td>i”</td><td>改变””里的内容</td></tr><tr><td>i’</td><td>改变‘’里的内容</td></tr></tbody></table><p>这里的i可以用a来代替，但是实现的效果不同</p><p>操作格式：</p><p>操作符+动作（这里一共要分别按三次按键才行，不是一起按的）</p><p>例如</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main(){string str = {"hello"};    vector&lt;int&gt;a;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果我想要删除这个hello单词的话</p><p><strong>d+iw（先按d再按i再按w）</strong>这样就可以删除hello单词</p><p>那么如果是</p><p>d+aw（先按d再按a再按w）这样的话也可以删除hello单词，<strong>但是同时会删除掉” “</strong></p><p>这就是两者的不同用i不会包括旁别的符号，用a会包括</p><p>举一反三的，要是想将vector&lt; int &gt;a里的int 复制，就可以</p><p>**y+i&lt;**（先按y再按i再按&lt;）</p><p>以上都是在普通模式下进行的操作，在可视化模式中就是类似鼠标操作，可以选中一片区域的代码</p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230301222625079.png" alt="当前可以使用操作符进行一些操作"></p><h3 id="在vscode中使用的技巧"><a href="#在vscode中使用的技巧" class="headerlink" title="在vscode中使用的技巧"></a>在vscode中使用的技巧</h3><table><thead><tr><th>操作</th><th>实现功能</th></tr></thead><tbody><tr><td>g+d</td><td>查看函数的实现（跳转到函数定义）</td></tr><tr><td>g+h</td><td>查看函数的模板及重载</td></tr><tr><td>g+t</td><td>跳转到下一个标签页</td></tr><tr><td>g+T</td><td>跳转到上一个标签页</td></tr><tr><td>n+g+t</td><td>跳转到第n个标签页</td></tr><tr><td>ctrl+0</td><td>跳转到旁别的资源管理器一栏，选中想要打开的文件按回车进入</td></tr><tr><td>ctrl+~</td><td>跳转到终端，ctrl+1回到代码栏</td></tr></tbody></table><h3 id="终端中使用"><a href="#终端中使用" class="headerlink" title="终端中使用"></a>终端中使用</h3><p>在终端中使用vim还是有些不同的，比如没有了解过vim的第一次在Linux系统中以vim的方式打开文件甚至都不知道怎么保存退出，这里的保存退出就涉及到了命令行模式。（有时间再写捏）</p><h2 id="二、git"><a href="#二、git" class="headerlink" title="二、git"></a>二、git</h2><p><a href="https://www.bilibili.com/video/BV1r3411F7kn/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=f342719b375d872cded85ce2655fee5d">Git工作流和核心原理 | GitHub基本操作 | VS Code里使用Git和关联GitHub_哔哩哔哩_bilibili</a></p><p>强烈建议先观看该视频</p><p><a href="https://gitee.com/all-about-git">git大全</a></p><p><a href="https://oschina.gitee.io/learn-git-branching/">git_learn</a>十分推荐该网站，有实例操作和图形演示</p><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>Git支持在windows，Linux，mac等系统运行</p><p>windows：</p><p><a href="https://gitforwindows.org/">下载链接</a></p><p>Linux：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">apt-get</span> <span class="token function">install</span> libcurl4-gnutls-dev libexpat1-dev gettext <span class="token punctuation">\</span>  libz-dev libssl-dev  $ <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装完成后使用命令查看是否成功安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token parameter variable">--versoi</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230304140624422.png" alt="Linux也可以使用这个命令来查看"></p><p>配置用户信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"xxxxx"</span>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email xxxxx@xxxxx.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看配置信息</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">$ git config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230304141114917.png"></p><h3 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h3><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交</li></ul><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230304141359274.png"></p><h3 id="Git工作分区"><a href="#Git工作分区" class="headerlink" title="Git工作分区"></a>Git工作分区</h3><table><thead><tr><th>分区</th><th>功能</th></tr></thead><tbody><tr><td>工作区</td><td>在git管理下的正常目录都算是工作区。就是你平时存放项目代码的地方，本地代码</td></tr><tr><td>资源区</td><td>资源库（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本。</td></tr><tr><td>暂存区</td><td>暂存区，用于临时存放你的改动。</td></tr><tr><td>git仓库</td><td>远程仓库，托管代码的服务器。</td></tr></tbody></table><p><img src="/2023/02/20/kai-fa-gong-ju-lian/310e426a4fe346169b8fb9e70699cafd.png" alt="分区关系"></p><p>在你的workspace写好的代码使用add放入暂存区index，在commit提交到资源库，再见资源库的文件push到远程仓库</p><p>所以git管理的文件有三种状态：</p><p>已修改   已暂存   已提交</p><p><strong>文件的状态</strong></p><p>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230304164149203.png"></p><p>比如该文件夹下的QT是刚新建的，如果想上传到远程仓库首先要将这个文件放在暂存区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> QT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样QT文件就变成暂存状态了。</p><p>Staged: 暂存状态。执行git commit则将修改同步到库中, 相当于给文件一个标记，当执行git commit有这个标记的就会上传到资源区</p><p>committed：已经是提交状态了，执行git pull即可上传到远程仓库</p><p>modified： 表示修改了文件，但是还没保存到数据库中</p><h3 id="Git创建远程仓库"><a href="#Git创建远程仓库" class="headerlink" title="Git创建远程仓库"></a>Git创建远程仓库</h3><p>关联远程仓库（以github为例）</p><p>由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：</p><p>可以参考该文</p><p><a href="https://blog.csdn.net/qq_39909808/article/details/116480722">配置SSH</a></p><p>现在github新建一个仓库</p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230304150956498.png" alt="默认配置即可"></p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230304151023944.png" alt="创建成功的界面"></p><p>根据github的提示一步步操作即可</p><p>选中一个文件夹目录在改目录下使用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init <span class="token comment">#初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令执行完后会在当前目录生成一个隐藏的 .git 目录。使用我们指定目录作为Git仓库。</p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230304142024415.png" alt="将这个文件创建一个git仓库"></p><p>在改目录使用命令git inti，提示Initialized empty Git repository in D:/curriculum design/.git/，即成功，并且这个时候在改目录下打开git bash</p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230304142630760.png" alt="目录旁别有master的标识"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">--all</span> <span class="token comment">#add也可以跟你想要git的子文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"C++课设"</span> <span class="token comment">#第一次提交并备注提交信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-M</span> main  <span class="token comment">#这个可以不执行，执行之后主分支就是main，不执行的化就是默认的master</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/LookAt-MeNow/Curriculum_Design.git <span class="token comment">#添加远程仓库，这个命令具体根据你自己的不能复制我的这个</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main <span class="token comment">#这里如果没有运行branch -M main 的话就应该是maseter而不是main</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230304153007269.png" alt="我没有运行branch所以不能用main"></p><p><strong>可能出现的错误</strong></p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230304160032021.png" alt="git限制文件大小，如果单文件大于100m会push失败"></p><p><a href="https://git-lfs.com/">解决方法</a></p><p>这是第一次提交</p><p>下一次提交的时候使用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status  <span class="token comment">#更新目录</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"注释"</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230304162338878.png" alt="这样代码就上传到远程仓库了"></p><p>从远程clone别人的仓库到本地</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token comment">#+仓库地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要更新从远端更新工作区，可以直接使用git pull，但是这样会把原来的工作区文件丢失，可以先使用git fetch，将远程仓库更新至资源库，使用git diff比较远程仓库和工作区的不同，选取不同的文件进行更新。</p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init     <span class="token comment">#初始化仓库</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>    <span class="token comment">#添加文件到暂存区。</span><span class="token function">git</span> commit  <span class="token comment">#将暂存区内容添加到仓库中</span><span class="token function">git</span> <span class="token function">add</span>     <span class="token comment">#添加文件到暂存区</span><span class="token function">git</span> status <span class="token comment">#查看仓库当前的状态，显示有变更的文件。</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token comment">#比较文件的不同，即暂存区和工作区的差异</span><span class="token function">git</span> commit <span class="token comment">#提交暂存区到本地仓库。</span><span class="token function">git</span> reset <span class="token comment">#回退版本。</span><span class="token function">git</span> <span class="token function">rm</span>     <span class="token comment">#将文件从暂存区和工作区中删除</span><span class="token function">git</span> <span class="token function">mv</span>     <span class="token comment">#移动或重命名工作区文件</span><span class="token function">git</span> log     <span class="token comment">#查看历史提交记录</span><span class="token function">git</span> remote <span class="token comment">#远程仓库操作</span><span class="token function">git</span> fetch <span class="token comment">#从远程获取代码库</span><span class="token function">git</span> pull <span class="token comment">#下载远程代码并合并</span><span class="token function">git</span> push <span class="token comment">#上传远程代码并合并</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>git statuas</strong></p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230304165145262.png"></p><p>使用改命令后即可标记出当前修改过的文件，和新建的没有被追踪的文件</p><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><p>git分支主要是多人协作开发使用，当只有一个主分支的时候如果你有一个需要2周才能完成的代码，第一周写了50%，如果现在你要提交的话就是一个半成品影响别人的使用，如果不提交的话又存在丢失进度的风险，现在创建一个只属于你自己的分支，所有代码都提交到这个分支上，当开发完成在把改分支合并到主分支。</p><p><strong>创建分支：</strong></p><p>在Git中开始就存在一条主线master，有一个指针HEAD指向master，HEAD是指向当前分支的，如果当时用的是master分支就指向master，如果是别的分支就指向别分支。</p><p><a href="https://oschina.gitee.io/learn-git-branching/">git_learn</a>该网站形象的描绘了这一过程</p><p>首先我们需要创建一个分支bugFix</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch bugFix   <span class="token comment">#创建bugFix分支</span><span class="token function">git</span> checkout bugFix <span class="token comment">#转到bugFix分支，也就是让HEAD指针指向bugFix</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两句可以合成一条命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> bugFix  <span class="token comment">#创建并转到bugFix分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 git branch 可以查看当前所有分支，和当前指向的分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch* bugFix  master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>*就代表当前的分支是bugFix</p><p><strong>合并分支：</strong></p><p>现在就可以在bugFix分支进行提交的操作了，当在bugFix的任务完成后切换回master分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候在bugFix提交的文件在master是看不到的</p><p>现在将bugFix分支合并到master分支来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge bugFix  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>删除分支：</strong></p><p>合并完成后就可以删除bugFix分支了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> bugFix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在最新的git版本中checkout也可以用switch来代替，使用方法相同，不过在新建并转到分支有些不同</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> switch <span class="token parameter variable">-c</span> bugFix <span class="token comment">#这里是-c，而checkout是-b</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Git标签管理"><a href="#Git标签管理" class="headerlink" title="Git标签管理"></a>Git标签管理</h3><p>Git标签是和commit协同的，commit相当于一个人的身份证号，标签是他的名字</p><p><strong>创建标签：</strong></p><p>先转到需要打标签的分支</p><p>使用命令 git tag &lt;name.&gt;即可打上一个标签</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用git tag可以查看所有标签</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认标签是打在最新提交的commit上的。</p><p>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字</p><p>使用git show &lt;name.&gt;可以查看标签的信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> show v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果上一次的commit忘记打标签了，可以先使用git log找到对应的commit id</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag v2.0 <span class="token comment">#+commit id</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样也是可以给已经提交过的打标签</p><p><strong>删除标签：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-d</span> v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有上传到远端的标签可以直接删除掉</p><p>如果要将标签上传到远端，使用命令<code>git push origin &lt;tagname&gt;</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag origin v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果有多个标签可以一次全部上传</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag origin <span class="token parameter variable">--tag</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要是标签已经上传到远端，删除标签操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-d</span> v0.9     <span class="token comment">#先删除掉本地的</span><span class="token function">git</span> push origin :refs/tags/v0.9   <span class="token comment">#删除远端仓库的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="vscode中使用"><a href="#vscode中使用" class="headerlink" title="vscode中使用"></a>vscode中使用</h3><p><a href="https://www.bilibili.com/video/BV1r3411F7kn/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=f342719b375d872cded85ce2655fee5d">Git工作流和核心原理 | GitHub基本操作 | VS Code里使用Git和关联GitHub_哔哩哔哩_bilibili</a></p><p>观看这个视频即可。视频里的操作都是图形化的，也可以使用vscode自带的终端来执行</p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230305203940379.png" alt="总结"></p><h2 id="三、CMake"><a href="#三、CMake" class="headerlink" title="三、CMake"></a>三、CMake</h2><p>首先理清make ,makefile,CMake, CMakeLists, QMake的关系</p><p>为什么会有make，make是干嘛用的？假如现在你又{1…99}.cpp个文件需要编译，不可能说你一个一个文件的编译99次吧，这个时候就有了make，make可以帮助我们快速的编译大量的文件，为什么make会帮我们快速的编译大量的文件，其中的奥妙就是makefile了，你编写了makefile文件，告诉make应该编译那些文件，但是编译一个文件你就要写一句</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ <span class="token parameter variable">-g</span> <span class="token parameter variable">-o</span> <span class="token number">1</span> <span class="token number">1</span>.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是你有99文件总不能你再写99句这个命令吧，这个时候CMake就来了，CMake就是帮助我们生成makefile的文件，也就是说你只需要使用CMake就可以完成多文件的编译了，但是捏，凭什么CMake又知道你要编译的是什么文件，然后就有了CMakeLists，这个全部过程中你需要干的是就是编写CMakeLists就可以了。</p><p>QMake其实就是QT下的构建工具，在QT下你编写的是.pro文件，这个玩意就会根据你写的.pro再进行操作，其实就是相当于，你在QT写了一句代码，但是QT在后台可能给你生成了数十条代码</p><p>CMake其实就是高级编译配置工具，当多个人用不同的语言或者编译器开发一个项目，最终要输出一个可执行文件或者共享库（dll，so等等），这种场景下就是可以用CMake的。</p><h3 id="makefile文件"><a href="#makefile文件" class="headerlink" title="makefile文件"></a>makefile文件</h3><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230314211638251.png" alt="现在要编译3个程序"></p><p>不使用make的编译方法</p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230314211821514.png" alt="需要你一个一个编译"></p><p>使用make编译，首先编写makefile文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> makefile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230314213927702.png" alt="最简单的一个makefile文件"></p><p>执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230314214014541.png" alt="将我们写的文件都编译了"></p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230314214134519.png" alt="都编译成功了嗷"></p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230314214235327.png" alt="全部源文件"></p><p><a href="https://blog.csdn.net/wucz122140729/article/details/98477445?ops_request_misc=%7B%22request_id%22:%22167880008416800184186812%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&amp;request_id=167880008416800184186812&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-98477445-null-null.blog_rank_default&amp;utm_term=make&amp;spm=1018.2226.3001.4450">(64条消息) C语言makefile文件_c程序 makefile_C语言技术网-码农有道的博客-CSDN博客</a></p><p><a href="https://www.bilibili.com/video/BV1Ba4y1h76W/?spm_id_from=333.999.0.0&amp;vd_source=f342719b375d872cded85ce2655fee5d">原作者视频讲解</a></p><p>这里只是简单的试一下make，我们的主要目的还是CMake嗷，makefile文件的一下别的用法参数可以参考这篇文章</p><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><h4 id="demo1-单文件"><a href="#demo1-单文件" class="headerlink" title="demo1(单文件)"></a>demo1(单文件)</h4><p>先一个简单的例子看看具体怎么做的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#先cd到你的工作空间下</span><span class="token function">vi</span> test.cpp<span class="token function">vi</span> CMakeLists.txt <span class="token comment">#这个不能拼错</span>cmake ./  <span class="token comment">#./代表当前文件夹下的所有文件</span><span class="token function">make</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230317174941447.png" alt="源文件和CMakeLists.txt文件内容"></p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token variable">CMAKE_MINIMUM_REQUIRED</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>  <span class="token comment">#这一句代表cmake的最低版本</span><span class="token function">PROJECT</span><span class="token punctuation">(</span>demo1<span class="token punctuation">)</span>   <span class="token comment">#代表当前编译的工程</span><span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span>demo1 test.cpp<span class="token punctuation">)</span>  <span class="token comment">#生成可执行文件，这个test.cpp文件必须要和你创建的文件名相同，demo1可以随便命名其实就和g++ -o demo1 test.cpp这句等效  ，只是为可执行文件起一个别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230317175304080.png"></p><p>这执行完cmake ./这句的时候cmake根据我们写的CMakeLists.txt帮我生成好了makefile文件，这其实也就是cmake最主要的功能之一，帮助我们写了makefile文件。</p><h4 id="demo2-单文件夹多文件"><a href="#demo2-单文件夹多文件" class="headerlink" title="demo2(单文件夹多文件)"></a>demo2(单文件夹多文件)</h4><p>所有的源文件包括头文件都在一个文件夹的情况</p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230317180909203.png" alt="跟第一种基本一致"></p><p>这种情况和第一种CMakeLists.txt只有一点点不一样</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CMAKE_MINIMUM_REQUIRED<span class="token punctuation">(</span>VERSION <span class="token number">3.10</span><span class="token punctuation">)</span>PROJECT<span class="token punctuation">(</span>demo2<span class="token punctuation">)</span>ADD_EXECUTABLE<span class="token punctuation">(</span>demo2 my.cpp test.cpp<span class="token punctuation">)</span> <span class="token comment">#把头文件实现的那个cpp包括进来就可以了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="demo3-多目录多文件"><a href="#demo3-多目录多文件" class="headerlink" title="demo3(多目录多文件)"></a>demo3(多目录多文件)</h4><p>先新建一个文件夹，demo3</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> demo3/mylib<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230317185329013.png" alt="此时的文件结构"></p><p>在多目录多文件的情况下，每个文件夹都需要一个CMakeLists.txt文件</p><p>demo3下的CMakeLists.txt</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token variable">CMAKE_MINIMUM_REQUIRED</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span><span class="token function">PROJECT</span><span class="token punctuation">(</span>dome3<span class="token punctuation">)</span><span class="token function">ADD_SUBDIRECTORY</span><span class="token punctuation">(</span>./mylib<span class="token punctuation">)</span><span class="token function">AUX_SOURCE_DIRECTORY</span><span class="token punctuation">(</span>./ DIR_SRCS<span class="token punctuation">)</span><span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span>dome3 <span class="token punctuation">${</span>DIR_SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">TARGET_LINK_LIBRARIES</span><span class="token punctuation">(</span>dome3 mylib<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mylib下的CMakeLists.txt</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token function">AUX_SOURCE_DIRECTORY</span><span class="token punctuation">(</span>. DIR_LIB_SRCS<span class="token punctuation">)</span><span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>mylib <span class="token namespace">STATIC</span> <span class="token punctuation">${</span>DIR_LIB_SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加完成后,回到demo3文件夹，cmake ./ 再make</p><p>这里make可能会出现一个问题</p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230317185851951.png"></p><p>根据报错我们可以得知错误出现在头文件找不到，但是上demo2中就可以找到，<strong>这是因为这个时候你的头文件和你的test已经不是一个文件夹，这样是找不到的，</strong>要写成**#include”./mylib/my.h**将头文件的路径添加进来</p><p>然后就可以了</p><h4 id="dmeo4-标准工程目录"><a href="#dmeo4-标准工程目录" class="headerlink" title="dmeo4(标准工程目录)"></a>dmeo4(标准工程目录)</h4><p>build文件(子目录bin放可执行文件，lib放库文件)，src文件(放源文件)，include文件(放库源文件)</p><p><img src="/2023/02/20/kai-fa-gong-ju-lian/image-20230321161502867.png" alt="文件目录"></p><p>build文件在CMake之前是没有文件的，什么都不用写，有CMakeLists.txt文件时根目录，include，src目录</p><p><strong>根目录CMakeLists.txt</strong></p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token variable">CMAKE_MINIMUM_REQUIRED</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span><span class="token function">PROJECT</span><span class="token punctuation">(</span>demo4<span class="token punctuation">)</span><span class="token function">ADD_SUBDIRECTORY</span><span class="token punctuation">(</span>./include<span class="token punctuation">)</span><span class="token function">ADD_SUBDIRECTORY</span><span class="token punctuation">(</span>./src<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>include目录CMakeLists.txt</strong></p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token function">AUX_SOURCE_DIRECTORY</span><span class="token punctuation">(</span>. DIR_LIB_SRCS<span class="token punctuation">)</span><span class="token comment">#这句用来将生成的库文件放在${PROJECT_BINARY_DIR}/lib，因为我们是在build文件下cmake的，所以这个${PROJECT_BINARY_DIR}也可以改成build，也就是说这个东西在哪里cmake的就是哪个目录，所以用${PROJECT_BINARY_DIR}这个格式更加规范</span><span class="token function">SET</span><span class="token punctuation">(</span><span class="token variable">LIBRARY_OUTPUT_PATH</span> <span class="token punctuation">${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span>/lib<span class="token punctuation">)</span><span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>include <span class="token namespace">STATIC</span> <span class="token punctuation">${</span>DIR_LIB_SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>src目录CMakeLists.txt</strong></p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token property">INCLUDE_DIRECTORIES</span><span class="token punctuation">(</span><span class="token punctuation">${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/include<span class="token punctuation">)</span><span class="token function">SET</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span>/bin<span class="token punctuation">)</span><span class="token function">AUX_SOURCE_DIRECTORY</span><span class="token punctuation">(</span>./ DIR_SRC<span class="token punctuation">)</span><span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span>demo4 <span class="token punctuation">${</span>DIR_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">TARGET_LINK_LIBRARIES</span><span class="token punctuation">(</span>demo4 include<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里源文件复制的是demo3里的，可以直接用，但是还是要改一下的</p><p>在demo2中的test.cpp</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include"my.h"int main(){        my_info();        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在demo3中的test.cpp</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include"./mylib/my.h"int main(){        my_info();        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在demo4中的test.cpp</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include"../include/my.h"int main(){        my_info();        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要就是头文件不同</p><p>​<strong>demo2是所有文件夹都在一个目录下，直接引用my.h就可以了</strong></p><p>​<strong>demo3是test.cpp在根目录，头文件在mylib目录下，在test.cpp看来就是我要找本目录下的(mylib文件夹，那里存的是头文件，所以先定位到本目录就是  ./   然后就是mylib文件夹</strong></p><p>​<strong>demo3是test.cpp在src目录，头文件在include目录下，在test.cpp看来就是我要找根目录下的include文件夹，那里存的是头文件，所以先回到上一级目录  .. 然后就是include文件夹</strong></p><p>以上就可以理解一些简单的应用的，但是熟练掌握的话还在要多用罢</p><p><a href="https://blog.csdn.net/QTVLC/article/details/82380413">CMake预定义变量</a></p><p><a href="https://www.hahack.com/codes/cmake/#%E4%BF%AE%E6%94%B9-CMakeLists-%E6%96%87%E4%BB%B6">CMake 入门实战 | HaHack</a>其余教程可参考这篇教程，包括自定义编译选项，安装和测试等。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> vscode </tag>
            
            <tag> CMake </tag>
            
            <tag> vim </tag>
            
            <tag> git </tag>
            
            <tag> Docker </tag>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2023/01/31/chang-yong-suan-fa/"/>
      <url>/2023/01/31/chang-yong-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>边刷题边学</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p><a href="https://leetcode.cn/problems/two-sum/description/">1. 两数之和 - 力扣（LeetCode）</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {        int i,j;        for(i=0;i&lt;nums.size()-1;i++)        {            for(j=i+1;j&lt;nums.size();j++)            {                if(nums[i]+nums[j]==target)                {                   return {i,j};                }            }        }        return {i,j};    };};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过两层for循环直接比对，但是时间复杂度大于使用哈希表</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Soution{public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {        map&lt;int,int&gt;a;//建立hash表        vector&lt;int&gt; b(2,-1);//用来接收数据        for(int i = 0;i&lt;nums.size();i++){            a.insert(pair&lt;int,int&gt;(nums[i],i));//i是value，*it是key        }//将数据存入哈希表        for(int i=0;i&lt;nums.size();i++)        {            if(a.count(target-nums[i])&gt;0&amp;&amp;(a[target-nums[i]]!=i))            //a.count()查找map中是否存在key值，存在返回1            //a[target-nums[i]]!=i这句的效果在于如果map表中出现了重读的key值，则这个key值不能是本身            //判断是否找到目标元素且目标元素不能是本身            {                b[0]=i;                b[1]=a[target-nums[i]];                break;            }        }        return b;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现思路：</p><p>这里将数据存在哈希表中，哈希表每个key值都有一个相对于的value值</p><p>哈希表的就是用空间换时间的算法</p><p><img src="/2023/01/31/chang-yong-suan-fa/image-20230302195921988.png" alt="每一个key值都有一个对应的value"></p><p>leetcode第十三题</p><p><img src="/2023/01/31/chang-yong-suan-fa/image-20230302200059530.png"></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    int romanToInt(string s) {        int sum = 0;        int a = 0;        map&lt;char,int&gt; HashMap;        HashMap.insert(make_pair('I',1));        HashMap.insert(make_pair('V',5));        HashMap.insert(make_pair('X',10));        HashMap.insert(make_pair('L',50));        HashMap.insert(make_pair('C',100));        HashMap.insert(make_pair('D',500));        HashMap.insert(make_pair('M',1000));        for(int i = 0;i&lt;s.size();i++){            if(s[i] == 'I' &amp;&amp; s[i+1] == 'V'){                a=4;                sum +=a;                i++;                continue;            }else if(s[i] == 'I' &amp;&amp; s[i+1] == 'X'){                a=9;                sum +=a;                i++;                continue;            }else if(s[i] == 'X' &amp;&amp; s[i+1] == 'L'){                a=40;                sum +=a;                i++;                continue;            }else if(s[i] == 'X' &amp;&amp; s[i+1] == 'C'){                a=90;                sum +=a;                i++;                continue;            }else if(s[i] == 'C' &amp;&amp; s[i+1] == 'D'){                a=400;                sum +=a;                i++;                continue;            }else if(s[i] == 'C' &amp;&amp; s[i+1] == 'M'){                a=900;                sum +=a;                i++;                continue;            }            sum = sum + HashMap[s[i]];        }        return sum;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是我使用的笨方法，通过使用哈希表存取数据，然后再用条件判断来计算，这样写的话代码十分的臃肿(典型负面)</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution{public:    int romanToInt(string s) {        int sum = 0;        map&lt;char,int&gt; HashMap={            {'I',1},            {'V',5},            {'X',10},            {'L',50},            {'C',100},            {'D', 500},            {'M', 1000}        };        for(int i = 0;i&lt;s.size();i++){            if(HashMap[s[i]]&lt;HashMap[s[i+1]])                sum -= HashMap[s[i]];            else                 sum += HashMap[s[i]];        }        return sum;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优秀题解</p><p>这里直接通过哈希表来取值来判断，因为在一般情况下小的数字总是在大的右边，所以就是加，通过读取哈希表，只要HashMap[s[i]]&lt;HashMap[s[i+1]]，就可以说明当前是特殊情况，小的在大的左边，应该减去小的的值，累加起来就可以得到想要的答案</p><p><a href="https://leetcode.cn/problems/reward-top-k-students/description/">2512. 奖励最顶尖的 K 名学生 - 力扣（LeetCode）</a>   哈希加排序</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    static bool cmp(pair&lt;int,int&gt; a, pair&lt;int,int&gt; b) { //在类中的自定义比较函数，必须是static类型的        if (a.first != b.first) {            return a.first &gt; b.first;        } else {            return a.second &lt; b.second;        }    } vector&lt;int&gt; topStudents(vector&lt;string&gt;&amp; positive_feedback, vector&lt;string&gt;&amp; negative_feedback, vector&lt;string&gt;&amp; report, vector&lt;int&gt;&amp; student_id, int k) {        unordered_set&lt;string&gt;m1(positive_feedback.begin(),positive_feedback.end());        unordered_set&lt;string&gt;m2(negative_feedback.begin(),negative_feedback.end());        vector&lt;pair&lt;int,int&gt;&gt;ret;           vector&lt;int&gt;ans;        for(int i = 0;i&lt;report.size();i++){            int sec = student_id[i];            string word;            istringstream ss(report[i]);            int fir = 0;            while (ss &gt;&gt; word) {                if(m1.find(word)!=m1.end()) {                    fir += 3;                }else if(m2.find(word)!=m2.end()){                    fir -= 1;                }            }            ret.push_back({fir,sec});        }        sort(ret.begin(),ret.end(),cmp);        for(int i = 0;i&lt;k;i++) {            ans.emplace_back(ret[i].second);        }        return ans;    }   };<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要是istringstream的一个操作，它可以从一个句子中提取需要的那个word</p><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>输入一行英文判断是否是回文</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//回文判断#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;void test(){    string str;    string str1;    string str2;    cin&gt;&gt;str;    int l=0;    int r = str.size()-1;    while (l&lt;r){        str1.insert(l,1,str[l]);        //cout &lt;&lt;"str1 "&lt;&lt;str1[l]&lt;&lt;" "&lt;&lt;endl;        str2.insert(l,1,str[r]);        //cout &lt;&lt;"str2 "&lt;&lt;str2[l]&lt;&lt;" "&lt;&lt;endl;        ++l;        --r;    }    if(str1.compare(str2) == 0){        cout&lt;&lt;"Y";    }else{        cout&lt;&lt;"N";    }}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里定义了两个指针，一个指向字符串的起始位置，一个指在了末位置，两个指针同时向中间移动，并将当前指向的字符存进一个字符串，跟二分查找还是蛮像的，不过好像二分查找也是通过双指针实现的，双指针算是个技巧吧。</p><p><a href="https://leetcode.cn/problems/container-with-most-water/description/?envType=study-plan-v2&amp;envId=top-100-liked">11. 盛最多水的容器 - 力扣（LeetCode）</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    int maxArea(vector&lt;int&gt;&amp; height) {        int l = 0;        int r = height.size()-1;        long long ans = 0;        while(l&lt;=r){            if(height[l]&lt;height[r]) {                ans = max(ans,(long long)height[l]*(r-l));                l++;            } else {                ans = max(ans,(long long)height[r]*(r-l));                r--;            }        }        return ans;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>height <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    l <span class="token operator">:=</span> <span class="token number">0</span>    r <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    ans <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> l<span class="token operator">&lt;</span>r <span class="token punctuation">{</span>        <span class="token keyword">if</span> height<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>            l<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>            r<span class="token operator">--</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> a<span class="token operator">&gt;</span>b <span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p>广度优先算法</p><p>例如经典迷宫问题，在一个迷宫中输入起始位置和末位置，查找最短路径</p><p>算法思路：</p><p>先建立一个visit[] []的二维数组用于判断当前的路是否通路，全部初始化为0，走过的路赋值为1，代表不可以再走了，不是通路了</p><p>再定义一个队列用来保存当前坐标的信息，新判断的点入队，判断完成的点出队</p><p>定义坐标运动数组</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int dx[4]={0,1,0,-1};//右下左上int dy[4]={1,0,-1,0};//定义运动的坐标变化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在迷宫中的某个点要向该点的上下左右四个方位进行试探，试探通路的点就移动到该点上去</p><p>核心代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">while (!r.empty())//如果当前队列不为空的话，进入循环    {        int tmpx,tmpy;        tmpx = r.front().x;        tmpy = r.front().y;//如果当前队头的坐标点等于终点坐标的位置        if(tmpx == endx &amp;&amp; tmpy == endy){            flag = 1;            cout&lt;&lt;"最少的步数为"&lt;&lt;r.front().step;            break;        }                //开始试探四个方向        for(int k=0;k&lt;4;k++){            int x,y;            x = r.front().x + dx[k];            y = r.front().y + dy[k];//此时的x，y就是试探后的坐标值            //如果试探当前的坐标点是通路且没有走过的            if(a[x][y] == 1 &amp;&amp; v[x][y] == 0){                point tmpe;//将符合条件的坐标点入队                tmpe.x = x;                tmpe.y = y;                tmpe.step = r.front().step+1;                //将数据保存在临时结构体并入队                r.push(tmpe);                v[x][y] = 1;//成功入队后，该坐标点已经走过了就不是通路了，设置为1            }        }        //试探完4个方向，将队头出队，继续判断对头的下一个元素        r.pop();    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//迷宫问题#include&lt;iostream&gt;#include&lt;queue&gt;using namespace std;int a[100][100],v[100][100]={0};//a数组用来存数据，v数组用来判断当前路是否是通路struct point{    int x;    int y;    int step;};//定义一个结构体其中包括坐标点的信息和当前已走的步数queue&lt;point&gt; r;//定义一个队列，用来保存当前的坐标步数信息int dx[4]={0,1,0,-1};//右下左上int dy[4]={1,0,-1,0};//定义运动的坐标变化void test(){    int flag = 0;//用来判断迷宫是否可以成功走出    int n,m,startx,starty,endx,endy;    cout&lt;&lt;"请分别输入迷宫的行列"&lt;&lt;endl;    cin&gt;&gt;n&gt;&gt;m;    cout&lt;&lt;"请输入迷宫"&lt;&lt;endl;    for(int i=1;i&lt;=n;i++){        for(int j=1;j&lt;=m;j++){            cin&gt;&gt;a[i][j];        }    }    cout&lt;&lt;"请输入分别输入起始坐标的x,y与终点坐标的x,y"&lt;&lt;endl;    cin&gt;&gt;startx&gt;&gt;starty&gt;&gt;endx&gt;&gt;endy;        point start;//定义刚开始位置的结构体    start.x = startx;    start.y = starty;    start.step = 0;    v[startx][starty] = 1;//把当前位置的设置为通路    r.push(start);//将第一个点入队    while (!r.empty())    {        int tmpx,tmpy;        tmpx = r.front().x;        tmpy = r.front().y;//如果当前队头的坐标点等于终点坐标的位置        if(tmpx == endx &amp;&amp; tmpy == endy){            flag = 1;            cout&lt;&lt;"最少的步数为"&lt;&lt;r.front().step;            break;        }                //开始试探四个方向        for(int k=0;k&lt;4;k++){            int x,y;            x = r.front().x + dx[k];            y = r.front().y + dy[k];            //如果试探当前的坐标点是通路且没有走过的            if(a[x][y] == 1 &amp;&amp; v[x][y] == 0){                point tmpe;                tmpe.x = x;                tmpe.y = y;                tmpe.step = r.front().step+1;                //将数据保存在临时结构体并入队                r.push(tmpe);                v[x][y] = 1;            }        }        //一个循环结束后，将队头出队        r.pop();    }    if(flag!=1){        cout&lt;&lt;"查找最短路径失败";    }}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void backtracking(条件){if(){//结束判断}for(){//遍历子问题处理节点;        backtracking(路径，选择列表); // 递归        回溯，撤销处理结果}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排列问题"><a href="#排列问题" class="headerlink" title="排列问题"></a>排列问题</h3><h4 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h4><p><a href="https://leetcode.cn/problems/permutations/description/">46. 全排列 - 力扣（LeetCode）</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    vector&lt;vector&lt;int&gt;&gt;ans;//返回    vector&lt;int&gt;path;//记录结果    void backtracking(vector&lt;int&gt; nums,vector&lt;bool&gt; cnt){        if(path.size() == nums.size()) { //边界条件            ans.push_back(path);            return;        }        for(int i = 0;i&lt;nums.size();i++) {//遍历子问题            if(cnt[i] == true) continue;    //如果被遍历过            cnt[i] = true;            path.push_back(nums[i]);            backtracking(nums,cnt);            path.pop_back();          //回溯            cnt[i] = false;        }    }    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {        vector&lt;bool&gt;cnt(nums.size(),false);        backtracking(nums,cnt);        return ans;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">permute</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> ans <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token keyword">var</span> path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    cnt <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> backtracking <span class="token keyword">func</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> cnt <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span>    backtracking <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> cnt <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">copy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> path<span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>            path <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span>            path <span class="token operator">=</span> path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组合问题"><a href="#组合问题" class="headerlink" title="组合问题"></a>组合问题</h3><p><a href="https://leetcode.cn/problems/combinations/description/">77. 组合 - 力扣（LeetCode）</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    vector&lt;vector&lt;int&gt;&gt;ans;    vector&lt;int&gt;path;    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) {        backtracking(n,k,1);        return ans;    }    void backtracking(int n,int k,int index){        if(path.size() == k){            ans.push_back(path);            return;        }        for(int t = index;t&lt;=n;t++){            path.push_back(t);            backtracking(n,k,t+1);            path.pop_back();        }    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">combine</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> ans <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token keyword">var</span> path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token keyword">var</span> backtracking <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">int</span> <span class="token punctuation">,</span>k <span class="token builtin">int</span><span class="token punctuation">,</span>index <span class="token builtin">int</span><span class="token punctuation">)</span>    backtracking <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">int</span> <span class="token punctuation">,</span>k <span class="token builtin">int</span><span class="token punctuation">,</span>index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token punctuation">{</span>            temp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">copy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>path<span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>temp<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> t <span class="token operator">:=</span> index<span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>t<span class="token operator">++</span> <span class="token punctuation">{</span>            path <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>t<span class="token punctuation">)</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            path <span class="token operator">=</span> path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/description/">17. 电话号码的字母组合 - 力扣（LeetCode）</a></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    string m[10] = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};     vector&lt;string&gt;ans;    string path;    void backtracking(string digits,int index){        if(path.size() == digits.size()){            ans.push_back(path);            return;        }        int t = digits[index] - '0';        string temp = m[t];        for(int i = 0;i&lt;temp.size();i++){            path.push_back(temp[i]);            backtracking(digits,index+1);            path.pop_back();        }    }    vector&lt;string&gt; letterCombinations(string digits) {        if(digits.size() == 0){            return {};        }        backtracking(digits,0);        return ans;    }       };<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>当一个问题有多个重叠的小问题，每一个状态都是由上一个状态推导而来的。</p><p>动规五部曲</p><ul><li>确定dp数组（dp table）以及下标的含义</li><li>确定递推公式</li><li>dp数组如何初始化</li><li>确定遍历顺序</li><li>举例推导dp数组</li></ul><p>01背包问题，小明有一个容量为m的书包，现有物品A，B，C三件有不同的重量和价值，求在小明书包容量下可以装的最大价值装法</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//背包01问题#include&lt;iostream&gt; #include&lt;vector&gt;using namespace std;int max(int a,int b){    return a&gt;b?a:b;}void test(){    int num,bagweight;    cout&lt;&lt;"请输入商品的数量和背包大小"&lt;&lt;endl;    cin&gt;&gt;num&gt;&gt;bagweight;    vector&lt;int&gt;wight(num);    vector&lt;int&gt;value(num);    cout&lt;&lt;"请输入商品信息(先输入体积再价值)"&lt;&lt;endl;    for(int i =0;i&lt;num;i++){        cin&gt;&gt;wight[i];        cin&gt;&gt;value[i];    }    //定义一个二维数组用于记录数据    vector&lt;vector&lt;int&gt;&gt; dp(wight.size(),vector&lt;int&gt;(bagweight+1,0));    //该dp的含义是在0~i中选取i个物品装进j容量的背包中    //初始化第一行和第一列    for(int j=wight[0];j&lt;=bagweight;j++){        dp[0][j] = value[0];    }    //weight数组的大小就是物品个数    for(int i=1;i&lt;wight.size();i++){//先遍历物品，这里因为第一行已经全部初始话所以，从i=1开始遍历        for(int j =0;j&lt;=bagweight;j++){//遍历背包容量            if(j&lt;wight[i]){//如果背包的容量小于物品的重量，就不拿i物品                dp[i][j] = dp[i-1][j];            }else{//拿物品                dp[i][j] = max(dp[i-1][j],dp[i-1][j-wight[i]]+value[i]);            }        }    }    cout &lt;&lt; dp[wight.size() - 1][bagweight] &lt;&lt; endl;//最后一格即使最优的解}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>leetcode70题</p><p><img src="/2023/01/31/chang-yong-suan-fa/image-20230302205143719.png"></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Solution {public:    int climbStairs(int n) {        if(n&lt;=1){            return n;        }        vector&lt;int&gt;a(n+1);//这里要+1因为物理空间大小和逻辑空间大小差1        a[1] = 1;        a[2] = 2;        for(int i = 3;i&lt;n;i++){            a[i] = a[i-1] +a[i-2];        }        return a[n];    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p>迪杰斯特拉算法</p><p>用于找出单源的最小路径问题</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#define V 20 //顶点的最大个数#define INFINITY 65535typedef struct{    int vexs[V];    // 储存图中的顶点数据    int arcs[V][V]; //二维数组记录顶点之间的关系    int vexnum,arcnum;  // 记录图的顶点数和弧数}MGraph;//根据顶点本身的数据，判断出顶点在二维数组中的位置int LocateVex(MGraph* G,int v){    int i=0;    for(;i&lt;G-&gt;vexnum;i++){        if(v == G-&gt;vexs[i]){             break;//遍历数组找到位置        }    }    if(i&gt;G-&gt;vexnum){        std::cout&lt;&lt;"not find"&lt;&lt;std::endl;        return -1;    }    return i;}//构造无向有权图void Init_GM(MGraph* G){    std::cout&lt;&lt;"请输入顶点数和边数"&lt;&lt;std::endl;    std::cin&gt;&gt;G-&gt;vexnum&gt;&gt;G-&gt;arcnum;    std::cout&lt;&lt;"请输入各个顶点"&lt;&lt;std::endl;    for(int i=0;i&lt;G-&gt;vexnum;i++){        std::cin&gt;&gt;G-&gt;vexs[i];    }    for(int i=0;i&lt;G-&gt;vexnum;i++){        for(int j=0;j&lt;G-&gt;vexnum;j++){            G-&gt;arcs[i][j] = INFINITY; // 初始化一开始的距离        }    }    std::cout&lt;&lt;"输入每个边的数据"&lt;&lt;std::endl;    for(int i=0;i&lt;G-&gt;arcnum;i++){        int v1,v2,w;//边关联的两个顶点和权值        std::cin&gt;&gt;v1&gt;&gt;v2&gt;&gt;w;        int n=LocateVex(G,v1);        int m=LocateVex(G,v2);        if(n==-1 || m==-1) return;        G-&gt;arcs[n][m] = w;        G-&gt;arcs[m][n] = w;    }}//迪杰斯特拉算法void Dijkstra_minTree(MGraph G,int v0,int p[V],int d[V]){ // v0代表其实坐标点的数组下标    int find_min[V]; // 判断各个顶点是否已经是最短路径    for(int i=0;i&lt;G.vexnum;i++){        find_min[i] = 0;        d[i] = G.arcs[v0][i];        p[i] = 0;    }    d[v0] = 0;    find_min[v0] = 1;    int k = 0;    for(int i=0;i&lt;G.vexnum;i++){        int min = INFINITY;        for(int w=0;w&lt;G.vexnum;w++){            if(!find_min[w]){                if(d[w]&lt;min){                    k = w;                    min = d[w];                }            }        }        find_min[k] = 1;        for(int w=0;w&lt;G.vexnum;w++){            if(!find_min[w] &amp;&amp; (min+G.arcs[k][w] &lt; d[w])){                d[w] = min + G.arcs[k][w];                p[w] = k;            }        }    }}int main(){    MGraph G;    Init_GM(&amp;G);    int p[V];    int d[V];    Dijkstra_minTree(G,0,p,d);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两版</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;limits.h&gt;// 使用标准命名空间using namespace std;// 定义边struct Edge {int to;      // 目标节点int weight;  // 边权重// 构造函数，初始化目标节点和边权重Edge(int t, int w):to(t), weight(w){}};// 定义图typedef vector&lt;vector&lt;Edge&gt;&gt; Graph;// 定义距离数组typedef vector&lt;int&gt; Distance;// 迪杰斯特拉算法，求从起点出发到其他各个节点的最短距离Distance dijkstra(const Graph&amp; graph, int source) {const int n = graph.size();     // 图中节点数目Distance distances(n, INT_MAX); // 初始化距离数组，全为INT_MAXdistances[source] = 0;          // 初始节点到自身距离为0// 使用小根堆维护每个节点距离起点的距离priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt; heap;heap.push(0, source);        // 将起点加入堆中，距离为0while (!heap.empty()) {    // 取出堆顶元素（当前距离起点最近的节点）    pair&lt;int, int&gt; p = heap.top();    heap.pop();    int node = p.second, distance = p.first;    // 如果该节点已被访问过，则跳过之    if (distances[node] &lt; distance) {        continue;    }    // 更新邻居节点距离，并加入堆中    for (const Edge&amp; edge : graph[node]) {        int neighbor = edge.to, weight = edge.weight;        int new_distance = distance + weight;        if (new_distance &lt; distances[neighbor]) {            distances[neighbor] = new_distance;            heap.push(new_distance, neighbor);        }    }}return distances;   // 返回起点到各节点的最短距离数组}// 主函数int main() {// 定义示例图Graph graph(5);     // 图中有5个节点graph[0].push_back(Edge(1, 10));    // 0号节点到1号节点距离为10graph[0].push_back(Edge(4, 5));     // 0号节点到4号节点距离为5graph[1].push_back(Edge(2, 1));     // 1号节点到2号节点距离为1graph[1].push_back(Edge(4, 2));     // 1号节点到4号节点距离为2graph[2].push_back(Edge(3, 4));     // 2号节点到3号节点距离为4graph[3].push_back(Edge(0, 7));     // 3号节点到0号节点距离为7graph[3].push_back(Edge(2, 6));     // 3号节点到2号节点距离为6graph[4].push_back(Edge(1, 3));     // 4号节点到1号节点距离为3graph[4].push_back(Edge(2, 9));     // 4号节点到2号节点距离为9graph[4].push_back(Edge(3, 2));     // 4号节点到3号节点距离为2Distance distances = dijkstra(graph, 0);   // 以0号节点为起点，求最短距离// 打印起点到各点的最短距离for (int i = 0; i &lt; distances.size(); i++) {    cout &lt;&lt; "Distance from 0 to " &lt;&lt; i &lt;&lt; " is " &lt;&lt; distances[i] &lt;&lt; endl;}return 0;   // 返回程序执行成功状态}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p><a href="https://leetcode.cn/problems/daily-temperatures/description/">739. 每日温度 - 力扣（LeetCode）</a>    单调递减</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    //单调栈模板题目    vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt;&amp; temperatures) {        int n = temperatures.size();        vector&lt;int&gt;ret(n);        stack&lt;int&gt;ss;        //储存下标        for(int i = 0;i&lt;n;i++) {            while(!ss.empty() &amp;&amp;  temperatures[i] &gt; temperatures[ss.top()]){                int j = ss.top();                       ss.pop();                ret[j] = i-j;            }            ss.push(i);        }        return ret;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span>temperatures <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>temperatures<span class="token punctuation">)</span>    ss <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    ret <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temperatures<span class="token punctuation">[</span>ss<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            j <span class="token operator">:=</span> ss<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            ss <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            ret<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> j        <span class="token punctuation">}</span>        ss <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="前后缀和"><a href="#前后缀和" class="headerlink" title="前后缀和"></a>前后缀和</h2><p><a href="https://leetcode.cn/problems/trapping-rain-water/description/?envType=study-plan-v2&amp;envId=top-100-liked">42. 接雨水 - 力扣（LeetCode）</a>这题解法很多</p><pre class="line-numbers language-g++" data-language="g++"><code class="language-g++">class Solution {public:    int trap(vector&lt;int&gt;&amp; height) {        //前，后缀和解法        int n = height.size();        vector&lt;int&gt;per(n,0);        per[0] = height[0];        vector&lt;int&gt;suf(n,0);        suf[n-1] = height[n-1];        int ans = 0;        for(int i = 1;i&lt;n;i++) {            per[i] = max(per[i-1],height[i]);        }        for(int i = n-2;i&gt;=0;i--) {            suf[i] = max(suf[i+1],height[i]);        }        for(int i=0;i&lt;n;i++)        ans += min(per[i],suf[i]) - height[i];        return ans;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">trap</span><span class="token punctuation">(</span>height <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span>    per <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>    suf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>    per<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    suf<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> ans <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span>        per<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>per<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span> <span class="token punctuation">{</span>        suf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>suf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span>        ans <span class="token operator">+=</span> <span class="token function">min</span><span class="token punctuation">(</span>per<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>suf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>前后缀积</strong> 思想是一样的</p><p><a href="https://leetcode.cn/problems/product-of-array-except-self/description/?envType=study-plan-v2&amp;envId=top-100-liked">238. 除自身以外数组的乘积 - 力扣（LeetCode）</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt;&amp; nums) {        int n = nums.size();        vector&lt;int&gt; ans(n);        vector&lt;long long&gt; pre(n);        vector&lt;long long&gt; beh(n);        pre[0] = 1; // 将pre[0]初始化为1        beh[n-1] = 1; // 将beh[n-1]初始化为1        // 计算pre数组        for(int i = 1; i &lt; n; i++){             pre[i] = nums[i-1] * pre[i-1];         }        // 计算beh数组        for(int i = n-2; i &gt;= 0; i--){             beh[i] = nums[i+1] * beh[i+1];         }        // 计算结果数组ans        for(int i = 0; i &lt; n; i++){            ans[i] = pre[i] * beh[i];        }        return ans;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">productExceptSelf</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    ans <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>    pre <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>    beh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>    pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    beh<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//前缀</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span>        pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment">//后缀</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span> <span class="token punctuation">{</span>        beh<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> beh<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">{</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> beh<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/?envType=study-plan-v2&amp;envId=top-100-liked">3. 无重复字符的最长子串 - 力扣（LeetCode）</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    int lengthOfLongestSubstring(string s) {        int ans = 0;            int left = 0;          unordered_map&lt;char,int&gt;m;   //使用hash表记录字符的出现次数        for(int right = 0;right&lt;s.size();right++) {            m[s[right]]++;          //记录            while (m[s[right]] &gt; 1) {   //如果出现次数大于1                m[s[left]]--;                left++;            }            ans = max(ans,right-left+1);        }        return ans;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    ans <span class="token operator">:=</span> <span class="token number">0</span>    left <span class="token operator">:=</span> <span class="token number">0</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">byte</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> right<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>right<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>right<span class="token operator">++</span> <span class="token punctuation">{</span>        m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span>        <span class="token keyword">for</span> m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>            m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span>            left<span class="token operator">++</span>        <span class="token punctuation">}</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">209. 长度最小的子数组 - 力扣（LeetCode）</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {        int ans = INT_MAX;        int l = 0;        long long sum = 0;        for(int r = 0;r&lt;nums.size();r++) {            sum+=nums[r];            while(sum&gt;=target){                sum-=nums[l];                ans = min(ans,r-l+1);                l++;            }        }        return (ans!=INT_MAX)?ans:0;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/description/?envType=study-plan-v2&amp;envId=top-100-liked">438. 找到字符串中所有字母异位词 - 力扣（LeetCode）</a></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    vector&lt;int&gt; findAnagrams(string s, string p) {        //hash表存储p中出现字符        int m[26] = {0};        int curm[26] = {0};        //vector&lt;int&gt;m(26,0);        //vector&lt;int&gt;curm(26,0);        if(s.size()&lt;p.size()) return {};        for(auto i:p){            m[i-'a']++;        }        int n = p.size();        for(int i = 0;i&lt;n-1;i++){            curm[s[i]-'a']++;        }        vector&lt;int&gt;ans;        int l = 0;         for(int r = n-1;r&lt;s.size();r++){            curm[s[r]-'a']++;            if(!memcmp(m,curm,sizeof(m))){ //普通数组不能直接用m == curm,用普通数组主要是能优化4ms(岂不美哉)                ans.push_back(l);            }            curm[s[l]-'a']--;            l++;        }        return ans;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>模板</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int left = 0;int ans = 0;for (int right = 0;right&lt;len;right++) {//操作while(//题目条件){//操作l++}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux学习</title>
      <link href="/2022/12/11/linux-xue-xi/"/>
      <url>/2022/12/11/linux-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux，全称GNU/Linux，是一种免费使用和自由传播的<a href="https://baike.baidu.com/item/%E7%B1%BBUNIX/9032872?fromModule=lemma_inlink">类UNIX</a>操作系统，其内核由<a href="https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9/1034429?fromModule=lemma_inlink">林纳斯·本纳第克特·托瓦兹</a>（Linus Benedict Torvalds）于1991年10月5日首次发布，它主要受到<a href="https://baike.baidu.com/item/Minix/7106045?fromModule=lemma_inlink">Minix</a>和<a href="https://baike.baidu.com/item/Unix/219943?fromModule=lemma_inlink">Unix</a>思想的启发，是一个基于<a href="https://baike.baidu.com/item/POSIX/3792413?fromModule=lemma_inlink">POSIX</a>的多用户、<a href="https://baike.baidu.com/item/%E5%A4%9A%E4%BB%BB%E5%8A%A1/1011764?fromModule=lemma_inlink">多任务</a>、支持<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1190404?fromModule=lemma_inlink">多线程</a>和多<a href="https://baike.baidu.com/item/CPU/120556?fromModule=lemma_inlink">CPU</a>的<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192?fromModule=lemma_inlink">操作系统</a>。它支持<a href="https://baike.baidu.com/item/32%E4%BD%8D/5812218?fromModule=lemma_inlink">32位</a>和<a href="https://baike.baidu.com/item/64%E4%BD%8D/2262282?fromModule=lemma_inlink">64位</a>硬件，能运行主要的<a href="https://baike.baidu.com/item/Unix/219943?fromModule=lemma_inlink">Unix</a>工具软件、应用程序和网络协议。（来源于百度词条）</p><h2 id="linux文件目录"><a href="#linux文件目录" class="headerlink" title="linux文件目录"></a>linux文件目录</h2><p>linux的文件目录是呈现树状结果的，使用命令先查看linux的根目录文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/11/linux-xue-xi/image-20221211140940211.png" alt="根目录"></p><p>这里面的每个文件都有放置了特定类型的文件</p><table><thead><tr><th><strong>bin</strong></th><th>存放系统命令，普通用户和 root 都可以执行。放在 /bin 下的命令在单用户模式下也可以执行</th></tr></thead><tbody><tr><td><strong>boot</strong></td><td><strong>系统启动目录，保存与系统启动相关的文件，如内核文件和启动引导程序（grub）文件等</strong></td></tr><tr><td><strong>dev</strong></td><td><strong>设备文件保存位置</strong></td></tr><tr><td><strong>ect</strong></td><td><strong>配置文件保存位置。系统内所有采用默认安装方式（rpm 安装）的服务配置文件全部保存在此目录中，如用户信息、服务的启动脚本、常用服务的配置文件等</strong></td></tr><tr><td><strong>home</strong></td><td><strong>普通用户的主目录（也称为家目录）。在创建用户时，每个用户要有一个默认登录和保存自己数据的位置，就是用户的主目录，所有普通用户的主目录是在 /home/ 下建立一个和用户名相同的目录。如用户 zhang 的主目录就是 /home/zhang</strong></td></tr><tr><td><strong>lib</strong></td><td><strong>系统调用的函数库保存位置</strong></td></tr><tr><td><strong>lost+found</strong></td><td><strong>当系统意外崩溃或意外关机时，产生的一些文件碎片会存放在这里。在系统启动的过程中，fsck 工具会检查这里，并修复已经损坏的文件系统。这个目录只在每个分区中出现，例如，/lost+found 就是根分区的备份恢复目录，/boot/lost+found 就是 /boot 分区的备份恢复目录</strong></td></tr><tr><td><strong>media</strong></td><td><strong>挂载目录。系统建议用来挂载媒体设备，如软盘和光盘</strong></td></tr><tr><td><strong>mnt</strong></td><td><strong>挂载目录。早期 Linux 中只有这一个挂载目录，并没有细分。系统建议这个目录用来挂载额外的设备，如 U 盘、移动硬盘和其他操作系统的分区</strong></td></tr><tr><td><strong>opt</strong></td><td><strong>第三方安装的软件保存位置。这个目录是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中。</strong></td></tr><tr><td><strong>proc</strong></td><td><strong>虚拟文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口</strong></td></tr><tr><td><strong>root</strong></td><td><strong>root 的主目录。普通用户主目录在 /home/ 下，root 主目录直接在“/”下</strong></td></tr><tr><td><strong>run</strong></td><td><strong>临时的，系统放东西一会就清除</strong></td></tr><tr><td><strong>sbin</strong></td><td><strong>保存与系统环境设置相关的命令，只有 root 可以使用这些命令进行系统环境设置，但也有些命令可以允许普通用户查看</strong></td></tr><tr><td><strong>snap</strong></td><td><strong>Snap的安装包扩展名是.snap，类似于一个容器，它包含一个应用程序需要用到的所有文件和库（snap包包含一个私有的root文件系统，里面包含了依赖的软件包</strong></td></tr><tr><td><strong>srv</strong></td><td><strong>服务数据目录。一些系统服务启动之后，可以在这个目录中保存所需要的数据</strong></td></tr><tr><td><strong>sys</strong></td><td><strong>提供了一个从用户空间通往内核空间的入口，Linux系统中有个 sysfs伪文件系统挂载到/sys目录，通过访问这个目录下面的文件，可以获得各种的系统内核信息，例如设备、内核模块、文件系统等</strong></td></tr><tr><td><strong>tmp</strong></td><td><strong>临时目录。系统存放临时文件的目录，在该目录下，所有用户都可以访问和写入。建议此目录中不能保存重要数据，最好每次开机都把该目录清空</strong></td></tr><tr><td><strong>usr</strong></td><td><strong>程序安装在这里. /usr 里的所有文件一般来自Linux distribution；本地安装的程序和其他东西在/usr/local 下</strong></td></tr><tr><td><strong>var</strong></td><td><strong>用于存储动态数据，例如缓存、日志文件、软件运行过程中产生的文件等</strong></td></tr></tbody></table><p><img src="/2022/12/11/linux-xue-xi/image-20221211145218359.png" alt="linux文件目录"></p><p>在每个根目录的子文件下都有一些别的文件</p><p>Linux 系统中，所有系统默认的软件都存储在 /usr 目录下</p><p><img src="/2022/12/11/linux-xue-xi/image-20221211145705818.png" alt="usr"></p><table><thead><tr><th><strong>/usr/bin/</strong></th><th><strong>存放系统命令，普通用户和超级用户都可以执行。这些命令和系统启动无关，在单用户模式下不能执行</strong></th></tr></thead><tbody><tr><td><strong>/usr/sbin/</strong></td><td><strong>存放根文件系统不必要的系统管理命令，如多数服务程序，只有 root 可以使用。</strong></td></tr><tr><td><strong>/usr/lib/</strong></td><td><strong>应用程序调用的函数库保存位置</strong></td></tr><tr><td><strong>/usr/local/</strong></td><td><strong>手工安装的软件保存位置。我们一般建议源码包软件安装在这个位置</strong></td></tr><tr><td><strong>/usr/share/</strong></td><td><strong>应用程序的资源文件保存位置，如帮助文档、说明文档和字体目录</strong></td></tr><tr><td><strong>/usr/src/</strong></td><td><strong>源码包保存位置。我们手工下载的源码包和内核源码包都可以保存到这里</strong></td></tr><tr><td><strong>/usr/include</strong></td><td><strong>C/C++ 等编程语言头文件的放置目录</strong></td></tr></tbody></table><p>/var 目录用于存储动态数据，例如缓存、日志文件、软件运行过程中产生的文件等</p><p><img src="/2022/12/11/linux-xue-xi/image-20221211150057049.png" alt="var"></p><table><thead><tr><th>/var/lib/</th><th>程序运行中需要调用或改变的数据保存位置。如 MySQL 的数据库保存在 /var/lib/mysql/ 目录中</th></tr></thead><tbody><tr><td><strong>/var/log/</strong></td><td><strong>登陆文件放置的目录，其中所包含比较重要的文件如 /var/log/messages, /var/log/wtmp 等。</strong></td></tr><tr><td><strong>/var/run/</strong></td><td><strong>一些服务和程序运行后，它们的 PID（进程 ID）保存位置</strong></td></tr><tr><td><strong>/var/spool/</strong></td><td><strong>里面主要都是一些临时存放，随时会被用户所调用的数据，例如 /var/spool/mail/ 存放新收到的邮件，/var/spool/cron/ 存放系统定时任务。</strong></td></tr><tr><td><strong>/var/tmp</strong></td><td><strong>一些应用程序在安装或执行时，需要在重启后使用的某些文件，此目录能将该类文件暂时存放起来，完成后再行删除</strong></td></tr></tbody></table><p>挂载</p><p>指的就是将设备文件中的顶级目录连接到 Linux 根目录下的某一目录，访问此目录就等同于访问设备文件。</p><p>比如要访问一个u盘中的文件要先把u盘挂载在根目录下</p><h2 id="基本命令使用"><a href="#基本命令使用" class="headerlink" title="基本命令使用"></a>基本命令使用</h2><h3 id="命令帮助"><a href="#命令帮助" class="headerlink" title="命令帮助"></a>命令帮助</h3><p>查看命令的帮助文档，比如查看ls的用法</p><p>方法一:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">man</span> <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/11/linux-xue-xi/image-20221211150945232.png"></p><p>方法二：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">--help</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/11/linux-xue-xi/image-20221211151057296.png" alt="在终端打开"></p><h3 id="查看登录用户"><a href="#查看登录用户" class="headerlink" title="查看登录用户"></a>查看登录用户</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">who</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/11/linux-xue-xi/image-20221211151250239.png"></p><h3 id="查看当前文件目录"><a href="#查看当前文件目录" class="headerlink" title="查看当前文件目录"></a>查看当前文件目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/11/linux-xue-xi/image-20221211151415831.png"></p><h3 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h3><pre class="line-numbers language-none"><code class="language-none">cd [参数] [目标目录路径(相对路径或者时绝对路径)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-P 如果切换的目标目录是一个符号链接，则直接切换到符号链接指向的目标目录</li><li>-L 如果切换的目标目录是一个符号链接，则直接切换到符号链接名所在的目录</li><li>cd ..返回上级目录</li><li>cd ~ 返回登录的用户目录</li><li>cd /返回根目录</li></ul><h3 id="显示当前文件夹下文件"><a href="#显示当前文件夹下文件" class="headerlink" title="显示当前文件夹下文件"></a>显示当前文件夹下文件</h3><pre class="line-numbers language-none"><code class="language-none">ls [参数]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-a 显示所有文件及目录 (包括以“.”开头的隐藏文件)</li><li>-l 使用长格式列出文件及目录信息</li><li>-r 将文件以相反次序显示(默认依英文字母次序) </li><li>-t 根据最后的修改时间排序 -A 同 </li><li>-a ，但不列出 “.” (当前目录) 及 “..” (父目录)</li><li>-S 根据文件大小排序 </li><li>-R 递归列出所有子目录</li></ul><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><pre class="line-numbers language-none"><code class="language-none">mkdir [参数] [目录]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-m, –mode=模式，设定权限&lt;模式&gt; (类似 chmod)，而不是 rwxrwxrwx 减 umask</li><li>-p, –parents 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后, 系统将自动建立好那些尚不存在的目录,即一次可以建立多个目录;  </li><li>-v, –verbose 每次创建新目录都显示信息</li></ul><p>如果要递归创建文件夹不能直接使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> a/b/c/d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要加上-p才可以</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> a/b/c/d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建txt</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建多文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> a b c <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>批量创建文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> file<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">90</span><span class="token punctuation">}</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看文档内容"><a href="#查看文档内容" class="headerlink" title="查看文档内容"></a>查看文档内容</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示行号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token parameter variable">-n</span> a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token parameter variable">-n</span> b.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/11/linux-xue-xi/image-20221211155138332.png"></p><p>把 a.txt 的文档内容加上行号后输入 b.txt 这个文档里：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> <span class="token parameter variable">-n</span> a.txt <span class="token operator">&gt;</span> b.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/11/linux-xue-xi/image-20221211155503679.png"></p><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-f 若目标文件已存在，则会直接覆盖原文件 </li><li>-i 若目标文件已存在，则会询问是否覆盖 </li><li>-p 保留源文件或目录的所有属性 </li><li>-r 递归复制文件和目录 </li><li>-d 当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接 的原始文件或目录 </li><li>-l 对源文件建立硬连接，而非复制文件 </li><li>-s 对源文件建立符号连接，而非复制文件 </li><li>-b 覆盖已存在的文件目标前将目标文件备</li></ul><p>把A文件复制到B文件夹下</p><p><img src="/2022/12/11/linux-xue-xi/image-20221211155950802.png" alt="初始"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-R</span> A B<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/11/linux-xue-xi/image-20221211160210657.png" alt="复制后"></p><p>把A中的a b c文件复制到B</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> a b c /home/zhang/try/B<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/11/linux-xue-xi/image-20221211160702940.png"></p><h3 id="移动剪切"><a href="#移动剪切" class="headerlink" title="移动剪切"></a>移动剪切</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-i 若存在同名文件，则向用户询问是否覆盖 </li><li>-f 覆盖已有文件时，不进行任何提示 </li><li>-b 当文件存在时，覆盖前为其创建一个备份 </li><li>-u 当源文件比目标文件新，或者目标文件不存在时，才执行移动此操作</li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-f 忽略不存在的文件，不会出现警告信息 </li><li>-i 删除前会询问用户是否操作 </li><li>-r/R递归删除 </li><li>-v 显示指令的详细执行过程 rm 删除文本文件  rm </li><li>-r 删除文件 rm </li><li>-f 强制删除</li></ul><h2 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h2><p>在linux系统中允许存在多个用户，而且每个用户可以独立运行，且权限不同，每个用户都有唯一的用户名和密码。在登录系统时，只有正确输入用户名和密码，才能进入系统和自己的主目录</p><p>用户组是具有相同特征用户的逻辑集合。比如用户a和用户b拥有一样的权限，那么用户a和b就可以分在一个组</p><p><img src="/2022/12/11/linux-xue-xi/image-20221211164251962.png"></p><p>用户与用户组之间的关系</p><ul><li>一对一：一个用户可以存在一个组中，是组中的唯一成员；</li><li>一对多：一个用户可以存在多个用户组中，此用户具有这多个组的共同权限；</li><li>多对一：多个用户可以存在一个组中，这些用户具有和组相同的权限；</li><li>多对多：多个用户可以存在多个组中，也就是以上 3 种关系的扩展。</li></ul><p>在linux中每个用户的id分为两种用户 ID（User ID，简称 UID）和组 ID（Group ID，简称 GID）</p><p><img src="/2022/12/11/linux-xue-xi/image-20221211164851886.png"></p><p>每个文件都有自己的拥有者 ID 和群组 ID，当显示文件属性时，系统会根据 /etc/passwd 和 /etc/group 文件中的内容，分别找到 UID 和 GID 对应的用户名和群组名，然后显示出来。</p><h3 id="x2F-etc-x2F-passwd"><a href="#x2F-etc-x2F-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h3><p>/etc/passwd 文件，是系统用户配置文件，存储了系统中所有用户的基本信息，并且所有用户都可以对此文件执行读操作。</p><p><img src="/2022/12/11/linux-xue-xi/image-20221211170657462.png"></p><p>每一行对应了一个用户，这里显示了很多用户，这些用户很多都是系统和服务运行必须的用户，称为系统用户</p><p><strong>系统用户不能登录，也不能删除</strong></p><p>每行用户的含义</p><pre class="line-numbers language-none"><code class="language-none">用户名：密码：UID（用户ID）：GID（组ID）：描述性信息：主目录：默认Shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>root用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root:x:0:0:root:/root:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我自己的用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zhang:x:1000:1000:23,,,:/home/zhang:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="用户名"><a href="#用户名" class="headerlink" title="用户名"></a>用户名</h4><p>用户名，就是一串代表用户身份的字符串，用户名仅是为了方便用户记忆，Linux 系统是通过 UID 来识别用户身份，分配用户权限的。/etc/passwd 文件中就定义了用户名和 UID 之间的对应关系。</p><h4 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h4><p>“x” 表示此用户设有密码，但不是真正的密码，真正的密码保存在 /etc/shadow 文件中，此文件只有 root 用户可以浏览和操作，这样就最大限度地保证了密码的安全。</p><h4 id="UID"><a href="#UID" class="headerlink" title="UID"></a>UID</h4><p>UID，也就是用户 ID。每个用户都有唯一的一个 UID，Linux 系统通过 UID 来识别不同的用户。</p><table><thead><tr><th>0</th><th>超级用户。UID 为 0 就代表这个账号是管理员账号。在 Linux 中，如何把普通用户升级成管理员呢？只需把其他用户的 UID 修改为 0 就可以了，这一点和 Windows 是不同的。不过不建议建立多个管理员账号。</th></tr></thead><tbody><tr><td><strong>1~499</strong></td><td><strong>系统用户（伪用户）。也就是说，此范围的 UID 保留给系统使用。其中，1<del>99 用于系统自行创建的账号；100</del>499 分配给有系统账号需求的用户。  其实，除了 0 之外，其他的 UID 并无不同，这里只是默认 500 以下的数字给系统作为保留账户，只是一个公认的习惯而已。</strong></td></tr><tr><td><strong>500~65535</strong></td><td><strong>普通用户。通常这些 UID 已经足够用户使用了。但不够用也没关系，2.6.x 内核之后的 Linux 系统已经可以支持 232 个 UID 了。</strong></td></tr></tbody></table><h4 id="GID"><a href="#GID" class="headerlink" title="GID"></a>GID</h4><p>表示用户初始组的组 ID 号</p><p>初始组和附加组的含义并不相同</p><p><strong>比如现在创建用户chen 就会自动创建一个组chen，这个组就是初始组，如果在把用户chen加到 zhang组里，用户chen就同时有chen和zhang组里的权限</strong></p><p><strong>这里看到的ID号是初始组的ID</strong></p><h4 id="描述性信息"><a href="#描述性信息" class="headerlink" title="描述性信息"></a>描述性信息</h4><p>基本没什么用</p><p><img src="/2022/12/11/linux-xue-xi/image-20221211171932974.png"></p><p>我这里显示的23，在登录图形界面的时候显示的就是23</p><h4 id="主目录"><a href="#主目录" class="headerlink" title="主目录"></a>主目录</h4><p>用户登录后有操作权限的访问目录，通常称为用户的主目录。</p><h4 id="默认的shell"><a href="#默认的shell" class="headerlink" title="默认的shell"></a>默认的shell</h4><p>Shell 就是 Linux 的命令解释器，是用户和 Linux 内核之间沟通的桥梁。</p><p>shell有不同种类，可以参考<a href="">shell</a></p><h3 id="x2F-etc-x2F-shadow"><a href="#x2F-etc-x2F-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h3><p>用于存储 Linux 系统中用户的密码信息，又称为“影子文件”</p><p> /etc/passwd 文件，由于该文件允许所有用户读取，易导致用户密码泄露，因此 Linux 系统将用户的密码信息从 /etc/passwd 文件中分离出来，并单独放到了此文件中。</p><p><img src="/2022/12/11/linux-xue-xi/image-20221211172731075.png" alt="这个文件只能由root用户访问"></p><p><img src="/2022/12/11/linux-xue-xi/image-20221211172836385.png"></p><p>文件中每行代表一个用户，同样使用 “:” 作为分隔符，不同之处在于，每行用户信息被划分为 9 个字段。</p><pre class="line-numbers language-none"><code class="language-none">用户名：加密密码：最后一次修改时间：最小修改时间间隔：密码有效期：密码需要变更前的警告天数：密码过期后的宽限时间：账号失效时间：保留字段<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="用户名-1"><a href="#用户名-1" class="headerlink" title="用户名"></a>用户名</h4><p>与etc/passwd一致</p><h4 id="加密密码"><a href="#加密密码" class="headerlink" title="加密密码"></a>加密密码</h4><p>保存了真正的密码</p><p>目前 Linux 的密码采用的是 SHA512 散列加密算法，原来采用的是 MD5 或 DES 加密算法。SHA512 散列加密算法的加密等级更高，也更加安全。</p><p>所有伪用户的密码都是 “!!” 或 “*”，代表没有密码是不能登录的。当然，新创建的用户如果不设定密码，那么它的密码项也是 “!!”，代表这个用户没有密码，不能登录。</p><h4 id="最后一次修改时间"><a href="#最后一次修改时间" class="headerlink" title="最后一次修改时间"></a>最后一次修改时间</h4><p>这里root显示的修改时间是19275，Linux 计算日期的时间是以 1970 年 1 月 1 日作为 1 不断累加得到的时间，到 1971 年 1 月 1 日，则为 366 天。这里显示 19275 天，也就是说，此 root 账号在 1970 年 1 月 1 日之后的第 19275 天修改的 root 用户密码。</p><p>使用这个命名可以查看修改时间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">"1970-01-01 19275 days"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/11/linux-xue-xi/image-20221211173703757.png"></p><h4 id="最小修改时间间隔"><a href="#最小修改时间间隔" class="headerlink" title="最小修改时间间隔"></a>最小修改时间间隔</h4><p>最小修改间隔时间，也就是说，该字段规定了从第 3 字段（最后一次修改密码的日期）起，多长时间之内不能修改密码。如果是 0，则密码可以随时修改；如果是 10，则代表密码修改后 10 天之内不能再次修改密码。</p><h4 id="密码有效期"><a href="#密码有效期" class="headerlink" title="密码有效期"></a>密码有效期</h4><p>经常变更密码是个好习惯，为了强制要求用户变更密码，这个字段可以指定距离第 3 字段（最后一次更改密码）多长时间内需要再次变更密码，否则该账户密码进行过期阶段。<br>该字段的默认值为 99999，也就是 273 年，可认为是永久生效。如果改为 90，则表示密码被修改 90 天之后必须再次修改，否则该用户即将过期。管理服务器时，通过这个字段强制用户定期修改密码。</p><h4 id="密码需要变更前的警告天数"><a href="#密码需要变更前的警告天数" class="headerlink" title="密码需要变更前的警告天数"></a>密码需要变更前的警告天数</h4><p>与第 5 字段相比较，当账户密码有效期快到时，系统会发出警告信息给此账户，提醒用户 “再过 n 天你的密码就要过期了，请尽快重新设置你的密码！”。</p><p>该字段的默认值是 7，也就是说，距离密码有效期的第 7 天开始，每次登录系统都会向该账户发出 “修改密码” 的警告信息。</p><h4 id="密码过期后宽限天数"><a href="#密码过期后宽限天数" class="headerlink" title="密码过期后宽限天数"></a>密码过期后宽限天数</h4><p>也称为“口令失效日”，简单理解就是，在密码过期后，用户如果还是没有修改密码，则在此字段规定的宽限天数内，用户还是可以登录系统的；如果过了宽限天数，系统将不再让此账户登陆，也不会提示账户过期，是完全禁用。</p><p>比如说，此字段规定的宽限天数是 10，则代表密码过期 10 天后失效；如果是 0，则代表密码过期后立即失效；如果是 -1，则代表密码永远不会失效。</p><h4 id="账号失效时间"><a href="#账号失效时间" class="headerlink" title="账号失效时间"></a>账号失效时间</h4><p>使用自 1970 年 1 月 1 日以来的总天数作为账户的失效时间。该字段表示，账号在此字段规定的时间之外，不论你的密码是否过期，都将无法使用！</p><p>该字段通常被使用在具有收费服务的系统中。</p><h4 id="保留字段"><a href="#保留字段" class="headerlink" title="保留字段"></a>保留字段</h4><p>目前没有什么功能</p><h3 id="x2F-etc-x2F-group"><a href="#x2F-etc-x2F-group" class="headerlink" title="/etc/group"></a>/etc/group</h3><p>/ect/group 文件是用户组配置文件，即用户组的所有信息都存放在此文件中。</p><p><img src="/2022/12/11/linux-xue-xi/image-20221211174753627.png"></p><p>每一行代表了一个组，分为 4 个字段，每个字段对应的含义为</p><pre class="line-numbers language-none"><code class="language-none">组名：密码：GID：该用户组中的用户列表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="组名"><a href="#组名" class="headerlink" title="组名"></a>组名</h4><p>用户组的名称，有字母或数字构成。同 /etc/passwd 中的用户名一样，组名也不能重复。</p><h4 id="密码-1"><a href="#密码-1" class="headerlink" title="密码"></a>密码</h4><p>和 /etc/passwd 文件一样，这里的 “x” 仅仅是密码标识，真正加密后的组密码默认保存在 /etc/gshadow 文件中。</p><p>不过，用户设置密码是为了验证用户的身份，那用户组设置密码是用来做什么的呢？用户组密码主要是用来指定组管理员的，由于系统中的账号可能会非常多，root 用户可能没有时间进行用户的组调整，这时可以给用户组指定组管理员，如果有用户需要加入或退出某用户组，可以由该组的组管理员替代 root 进行管理。但是这项功能目前很少使用，我们也很少设置组密码。如果需要赋予某用户调整某个用户组的权限，则可以使用 sudo 命令代替。</p><h4 id="GID-1"><a href="#GID-1" class="headerlink" title="GID"></a>GID</h4><p>就是群组的 ID 号，Linux 系统就是通过 GID 来区分用户组的，同用户名一样，组名也只是为了便于管理员记忆。</p><p>这里的组 GID 与 /etc/passwd 文件中第 4 个字段的 GID 相对应，实际上，/etc/passwd 文件中使用 GID 对应的群组名，就是通过此文件对应得到的。</p><h4 id="用户列表"><a href="#用户列表" class="headerlink" title="用户列表"></a>用户列表</h4><p>此字段列出每个群组包含的所有用户。需要注意的是，如果该用户组是这个用户的初始组，则该用户不会写入这个字段，可以这么理解，该字段显示的用户都是这个用户组的附加用户。</p><p>比如root用户没有附加组，只属于自己的初始组，参数就是空</p><p>每个用户都可以加入多个附加组，但是只能属于一个初始组。所以我们在实际工作中，如果需要把用户加入其他组，则需要以附加组的形式添加。</p><p><strong>这三个文件之间的关系可以这样理解，即先在 /etc/group 文件中查询用户组的 GID 和组名；然后在 /etc/passwd 文件中查找该 GID 是哪个用户的初始组，同时提取这个用户的用户名和 UID；最后通过 UID 到 /etc/shadow 文件中提取和这个用户相匹配的密码。</strong></p><h3 id="新用户添加删除"><a href="#新用户添加删除" class="headerlink" title="新用户添加删除"></a>新用户添加删除</h3><p>使用useradd添加用户</p><p>当使用 useradd 命令不加参数选项，后面直接跟所添加的用户名时，系统首先会读取配置 文件/etc/login.defs 和/etc/default/useradd 文件中所配置的信息建立用户的家目录，并 复制/etc/skel 中的所有文件（包括隐藏的环境配置文件）到新用户的家目录中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>用户名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-m 新用户名 </li><li>-c 添加备注信息 </li><li>-d 指定有效家目录 </li><li>-g 指定用户组 </li><li>-G 指定附加组 </li><li>-n 取消以用户为名的组 </li><li>-s 指定登录 shell </li><li>-u 指定用户 ID</li></ul><p>使用userdel删除用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">userdel</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>用户名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除用户会把该用户的记录从系统文件etc/passwd中删除掉，同时删除掉相应的家目录</p><ul><li>-r 同时删除主目录</li></ul><p><img src="/2022/12/11/linux-xue-xi/image-20221217151042739.png"></p><p>创建用户后可以在etc/passwd文件中查看</p><h3 id="更改用户信息"><a href="#更改用户信息" class="headerlink" title="更改用户信息"></a>更改用户信息</h3><p>可以更改的用户信息包括用户的有关属性，如用户号、主目录、用户组、登录 Shell 等</p><p>修改已有用户的信息使用 usermod 命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">usermod</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>用户名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示当前用户的信息：</p><ul><li>who 查询当前在线用户 </li><li>w 查询当前在线用户的详细信息</li><li>groups 查询用户所属的组 </li><li>id 显示用户 ID 信息</li></ul><h3 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h3><p>我们在创建新的用户的时候是没有设定密码的，因此还不能用来登录系统</p><p>passwd语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-S：查询用户密码的状态，也就是 /etc/shadow 文件中此用户密码的内容。仅 root 用户可用；</li><li>-l：暂时锁定用户，该选项会在 /etc/shadow 文件中指定用户的加密密码串前添加 “!”，使密码失效。仅 root 用户可用；</li><li>-u：解锁用户，和 -l 选项相对应，也是只能 root 用户使用；</li><li>–stdin：可以将通过管道符输出的数据作为用户的密码。主要在批量添加用户时使用；</li><li>-n 天数：设置该用户修改密码后，多长时间不能再次修改密码，也就是修改 /etc/shadow 文件中各行密码的第 4 个字段；</li><li>-x 天数：设置该用户的密码有效期，对应 /etc/shadow 文件中各行密码的第 5 个字段；</li><li>-w 天数：设置用户密码过期前的警告天数，对于 /etc/shadow 文件中各行密码的第 6 个字段；</li><li>-i 日期：设置用户密码失效日期，对应 /etc/shadow 文件中各行密码的第 7 个字段</li></ul><p><img src="/2022/12/11/linux-xue-xi/image-20221217152354201.png" alt="给刚新建的用户设置密码"></p><h3 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h3><h4 id="添加用户组"><a href="#添加用户组" class="headerlink" title="添加用户组"></a>添加用户组</h4><p>groupadd语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupadd</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>用户组<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-g GID：指定组 ID</li></ul><p>例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupadd</span> <span class="token parameter variable">-g</span> <span class="token number">1010</span> group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个新组，标识号是1010</p><h4 id="gpasswd管理组"><a href="#gpasswd管理组" class="headerlink" title="gpasswd管理组"></a>gpasswd管理组</h4><p>为了避免系统管理员（root）太忙碌，无法及时管理群组，我们可以使用 gpasswd 命令给群组设置一个群组管理员，代替 root 完成将用户加入或移出群组的操作。</p><p>gpasswd语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpasswd <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>组名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-A 定义组管理员列表 </li><li>-a 添加组成员，每次只能加一个 </li><li>-d 删除组成员，每次只能删一个 </li><li>-M 定义组成员列表，可设置多个，用“，”分开——定义的组成员必须是已存在 用户的 </li><li>-r 移除密码</li></ul><p>例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpasswd <span class="token parameter variable">-a</span> ubuntu group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建一个ubuntu用户，并将这个用户添加到group1组中</p><h4 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h4><p>groupdel语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupdel</span> <span class="token punctuation">[</span>用户组<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupdel</span> group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除group1组</p><h4 id="修改用户组属性"><a href="#修改用户组属性" class="headerlink" title="修改用户组属性"></a>修改用户组属性</h4><p>groupmod语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupmod</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>用户组<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-g GID 为用户组指定新的组标识号。 </li><li>-o 与-g 选项同时使用，用户组的新 GID 可以与系统已有用户组的 GID 相同。 </li><li>-n 新用户组 将用户组的名字改为新名字</li></ul><p>例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupmod</span> <span class="token parameter variable">-g</span> <span class="token number">1020</span> <span class="token parameter variable">-n</span> group2 group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把用户组group1的标识符改为1020，并把名字更改为group2</p><h3 id="文件属性与权限"><a href="#文件属性与权限" class="headerlink" title="文件属性与权限"></a>文件属性与权限</h3><h4 id="文件类型查看"><a href="#文件类型查看" class="headerlink" title="文件类型查看"></a>文件类型查看</h4><p>使用命令ls -l时会罗列出每个文件的详细信息</p><p><img src="/2022/12/11/linux-xue-xi/image-20221217154835172.png"></p><p>分别代表的意思：</p><p>文件类型、文件权限、硬连接数、文件属主、文件属组、文件大小、更动时间、文件名</p><p>开头的字母代表的时文件类型：</p><ul><li>-：表示一般文件 </li><li>d：表示目录 </li><li>l：表示软链接 </li><li>p：进程间相互通信的文件，Linux 拥有一些机制来允许进程间的互相通信，这些 机制称为进程间通信机制，管道（pipe）、命名管道（FIFO）、共享缓冲区、信号量、sockets 信号等都是进程间常用通信机制，pipe 是用于父进程和子进程之间通信。FIFO 是一个文件， 允许运行在同一台计算机的进程间进行通信。</li><li>s：表示 socket 通信套接字文件（通常用于网络数据连接） </li><li>c：表示字符设备文件（如：键盘、鼠标、终端等，通常放在/dev 下） </li><li>b：表示块设备文件（存储数据设备文件，如：硬盘）</li></ul><h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h4><p>读权限 r：允许查看文件内容，使用 4 表示 </p><p>写权限 w：允许修改文件内容，使用 2 表示 </p><p>可执行 x：允许运行程序，使用 1 表示 </p><p>无权限 -：使用 0 表示</p><p>由于这 9 个字符分属 3 类用户，因此每种用户身份包含 3 个权限（r、w、x），通过将 3 个权限对应的数字累加，最终得到的值即可作为每种用户所具有的权限。</p><p>drwxrw-r-x</p><p>所有者 = rwx = 4+2+1 = 7<br>所属组 = rw- = 4+2 = 6<br>其他人 = r-x = 4+1 = 5</p><p>所以这个权限就是765</p><p>drwxr-xr-x 意思是一个权限为 755 的目录      -rw-r–r– 意思是一个权限为 644 的文件</p><p>文件属主-&gt;属于的用户账号</p><p>文件属组-&gt;属于的用户组</p><p><strong>修改文件权限</strong></p><p>chmod语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> <span class="token punctuation">[</span>ugoa<span class="token punctuation">]</span> <span class="token punctuation">[</span>+-<span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>rwx<span class="token punctuation">]</span> 参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-R（注意是大写）选项表示连同子目录中的所有文件，也都修改设定的权限。</li><li>u 属主 g 属组 o 其他人 a 所有人 </li><li>+添加 - 删除 = 重置</li></ul><p>文件的基本权限就是 3 种用户身份（所有者、所属组和其他人）搭配 3 种权限（rwx），chmod 命令中用 u、g、o 分别代表 3 种身份，还用 a 表示全部的身份（all 的缩写）。另外，chmod 命令仍使用 r、w、x 分别表示读、写、执行权限。</p><p><img src="/2022/12/11/linux-xue-xi/image-20221217160943599.png"></p><p><img src="/2022/12/11/linux-xue-xi/image-20221217161313902.png" alt="实例"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++进阶</title>
      <link href="/2022/11/22/c-xiao-zhi-shi-dian/"/>
      <url>/2022/11/22/c-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><p>在学习QT的过程中遇到一句</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">namespace Ui { class Widget; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没能很理解是什么意思啊，为什么在QT中要这么定义一句命名空间，毕竟在一般的学习过程中基本都不怎么使用namespace的，所以对这一块的知识可能不是很了解，然后就是再学一下了。</p><h3 id="1、单文件的命名空间使用"><a href="#1、单文件的命名空间使用" class="headerlink" title="1、单文件的命名空间使用"></a>1、单文件的命名空间使用</h3><p>先写一段代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;namespace my{    int add(int a,int b){   //写在命名空间的函数        return a+b;    }}int add(int a,int b){   //一般的普通函数    return a+b+1;    }int main(int argc,char** argv){    int a=5,b=5;    cout&lt;&lt; add(a,b) &lt;&lt;endl;    cout&lt;&lt; my::add(a,b) &lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/22/c-xiao-zhi-shi-dian/image-20221122185755382.png" alt="运行结果"></p><p>命名空间其中之一的功能就是帮我们解决命名冲突的问题，这里有两个add()函数但是都可以正常的运行使用，不过这么看的话总感觉有种脱裤子放屁的感觉，但是啊这就是在单文件中的使用，如果要实际做项目的话肯定不可能是单文件的，就像做QT应用程序，再简单也会分出很多文件出来，这个时候命名空间的作用显现出来了，那么这东西到底是干什么的，专业术语的解释是命名空间是对作用域的一种抽象，举个例子，假如A班有个人叫张三，B班也有个人叫张三，不过这不会互相影响，因为你知道他们不是一个班的，如果要找A班的张三那么就不会去找B班的张三了。</p><p>在实际的项目当中，会出现成千上万的标识符，命名空间提供隐藏区域标识符的机制。通过将逻辑上相关的标识符构成响应的命名空间，可以使整个系统更加的模块化。</p><h3 id="2、多文件的命名空间使用"><a href="#2、多文件的命名空间使用" class="headerlink" title="2、多文件的命名空间使用"></a>2、多文件的命名空间使用</h3><p>分别编写test.h test.cpp main.cpp</p><p>test.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifndef _TEST_H#define _TSTE_H#include&lt;iostream&gt;namespace my{     //在命名空间声明一个类    class Point{        public:            Point()=default;            Point(double a,double b);            void info_() const {                std::cout &lt;&lt; "Point x="&lt;&lt; x &lt;&lt;" y="&lt;&lt; y &lt;&lt; std::endl;            }            ~Point();        private:            double x{0.0};            double y{0.0};    };}#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "test.h"namespace my{    Point::Point(double a,double b):x(a),y(b){}        Point::~Point(){}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include "test.h"int main(){    my::Point a(3.4,4.5);    a.info_();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译运行</p><p><img src="/2022/11/22/c-xiao-zhi-shi-dian/image-20221122194610346.png"></p><p>成功运行了嗷</p><h3 id="3、在多文件下命名空间写函数"><a href="#3、在多文件下命名空间写函数" class="headerlink" title="3、在多文件下命名空间写函数"></a>3、在多文件下命名空间写函数</h3><p>在单文件中我们在命名函数中写了一个add函数，多文件操作有点不同，例如</p><p><img src="/2022/11/22/c-xiao-zhi-shi-dian/image-20221122195054067.png" alt="直接把函数放在头文件按中"></p><p>并没有报错编译一下</p><p><img src="/2022/11/22/c-xiao-zhi-shi-dian/image-20221122195200992.png" alt="编译器报错"></p><p>具体原因我也不是很清楚，这里应该现在test只声明add()函数，在test.cpp实现add()函数</p><p><img src="/2022/11/22/c-xiao-zhi-shi-dian/image-20221122195942178.png" alt="这样改了就可以正常编译了"></p><p>还有一点值得注意的就是<strong>同一项目的不同文件中可以定义相同的命名空间</strong>我这里就只定义了一个头文件，也就是如果我定义了两个头文件，在另一个头文件中同样可以使用namespace my{}<strong>分散在不同文件中的同名命名空间会合并为一个</strong>，所以这同时也说明了就算不是在一个文件下，<strong>但是只要共用一个命名空间就保证命名空间中成员互不相同</strong>，否则就会报错出重复定义的错误，就相当于在你的main函数下同一作用域下写了两个int a;</p><h3 id="4、using使用"><a href="#4、using使用" class="headerlink" title="4、using使用"></a>4、using使用</h3><p>在我们刚开始写c++代码的时候就都用过using namespace std这一句，没有这一句就不能使用，当然了也可以用std::cout这样指定作用域使用</p><p>只引入函数</p><p>在没有引入函数的时候我们直接在主函数使用add()函数是会报错的，如图</p><p><img src="/2022/11/22/c-xiao-zhi-shi-dian/image-20221122213723275.png"></p><p>编译器报错未定义标识符，这个时候就可以从命名空间引入add()函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include "test.h"int main(){    my::Point a(3.4,4.5);    a.info_();        using my::add; //引入函数    std::cout &lt;&lt; add(3,4) &lt;&lt;std::endl;        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就不会报错，可以正常运行了</p><p>只引入类</p><p>跟上面类似在没有引入的时候是不能直接使用命名空间中的类的</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">using my::Point;Point i(8.9,5.6);i.info_();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>引入整个命名空间</p><p>我们在命名空间中再加一个add_two()函数，然后引入命名空间并使用这个函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">using namespace my;std::cout &lt;&lt;add_two(2,3)&lt;&lt;std::endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>完整main.cpp</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include "test.h"int main(){    my::Point a(3.4,4.5);    a.info_();    {        using my::add;        std::cout &lt;&lt; add(3,4) &lt;&lt;std::endl;    }    {        using my::Point;        Point i(8.9,5.6);        i.info_();    }    {        using namespace my;        std::cout &lt;&lt;add_two(2,3)&lt;&lt;std::endl;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、QT头文件中的namespace-Ui-class-Widget"><a href="#5、QT头文件中的namespace-Ui-class-Widget" class="headerlink" title="5、QT头文件中的namespace Ui { class Widget; }"></a>5、QT头文件中的namespace Ui { class Widget; }</h3><p>class Widget 里面有个声明 Ui::Widget *ui，这个 ui 是使用 namespace Ui 里的 Widget 类声明的，该类只是简单的继承了 ui_widget.h 里的 Ui_Widget 类（没有添加任何成员）。现在就很清楚了，这两个看起来名字一样的 Widget 其实是两个类，一个是 namespace Ui 里的，另一个是 namespace Ui 之外的 Widget 类，namespace 声明的类其实就是个空壳，它的基类功能是将此窗口上的所有控件的声明、实例化、初始化。声明的原因就是为了使 ui 布局控制和其他的控制代码分离。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifndef WIDGET_H#define WIDGET_H#include &lt;QWidget&gt;#include &lt;QTextToSpeech&gt; //添加说话类namespace Ui {class Widget;}class Widget : public QWidget{    Q_OBJECTpublic:    explicit Widget(QWidget *parent = 0);    ~Widget();private slots:    void on_pushButton_clicked();private:    Ui::Widget *ui;    QTextToSpeech *x;};#endif // WIDGET_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Qt Creator自动创建的项目中，使用了组合的方式来使创建的窗体，将UI_Widget作为一个成员变量来使用，也就是</p><pre class="line-numbers language-none"><code class="language-none">private:    Ui::Widget *ui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>写程序时要使用组件就要用ui-&gt;的方式比如</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "widget.h"#include "ui_widget.h"Widget::Widget(QWidget *parent) :    QWidget(parent),    ui(new Ui::Widget){    ui-&gt;setupUi(this);    x = new QTextToSpeech;}Widget::~Widget(){    delete ui;}void Widget::on_pushButton_clicked(){    x-&gt;say(ui-&gt;lineEdit-&gt;text()); //提取框中文字语音播报}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="const-指针"><a href="#const-指针" class="headerlink" title="const 指针"></a>const 指针</h2><p><strong>常量指针 const修饰指针</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">const int *p=&amp;a;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>特点：指针的指向可以修改，（此时指针指向变量a），指针指向的值不可修改（此时指针指向的值为变量a内存空间中的10）。</strong></p><p><strong>指针常量 const修饰常量</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int *const p=&amp;a;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>特点：指针的指向不可以修改，（此时指针指向变量a），指针指向的值可修改（此时指针指向的值为变量a内存空间中的10）。</strong></p><p><strong>const既修饰指针，又修饰常量</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">const int *const p=&amp;a;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>特点：两者都不可以改。</strong></p><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p><strong>静态成员变量</strong></p><p>在两个类中定义静态成员变量</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class test{public:static int num;    int a;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个类创建了一个静态成员变量，static成员变量属于类，无论创建多少对象，只分配一份内存，但是里面的int a就不是共用的一份内存，每创建一个对象就会分一块内存给a</p><p><strong>static成员必须在类声明的外部进行初始化</strong></p><pre class="line-numbers language-none"><code class="language-none">int test01::num = 0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>无论是被public，protected，private修饰的静态成员，都是使用这个种方式初始化。</strong></p><p><strong>static成员变量的内存分配既不是在声明类时分配，也不是创建对象时分配，而是在类外初始化的时候分配的</strong></p><p>访问方式</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//通过类访问test::num = 5;//通过对象访问test a;a.num = 6;//通过对象指针访问test *p = new a;p-&gt;num = 10;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>static储存在全局区，即使不创建对象也是可以访问的</p><p><strong>静态成员函数</strong></p><p>静态成员函数只能访问静态成员</p><p>编译器在编译一个普通成员函数时，会隐式地增加一个形参 this，并把当前对象的地址赋值给 this，所以普通成员函数只能在创建对象后通过对象来调用，因为它需要当前对象的地址。而静态成员函数可以通过类来直接调用，编译器不会为它增加形参 this，它不需要当前对象的地址，所以不管有没有创建对象，都可以调用静态成员函数。</p><p>静态成员函数与普通成员函数的根本呢区别在于，普通成员函数有this指针，可以任意访问类中的成员，但是静态成员函数没有this指针，只能访问静态成员</p><p>静态成员函数的主要目的是调用静态成员变量</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class test{public:static int my();//声明静态成员函数private:static int num;};int test::num = 10;int::my(){//定义静态成员函数return num;}int main(){std::cout&lt;&lt;test::my();return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h2><ul><li>转换函数必须是类方法</li><li>转换函数不能指定返回类型</li><li>转换函数不能有参数</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class test{public:test(int a,int b):m(a),n(b){}    operator double() const{return (double)a/b;        }    private:    int m;    int n;};int main(){test a(4,7);    double sum = 1+a;    std::cout&lt;&lt;sum;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了转换函数</p><ul><li>operator表示这是一个运算符函数  </li><li>double()是函数名，表明了把test类型转换成double，这里编译器根据函数返回值决定了返回类型所以就没有定义返回值 </li><li>const表示在该函数中不会去改变变量的值</li><li>return (double)a/b 因为a和b都是int类型这里强转为double。</li><li>double sum = 1+a 运行到这里编译器会先找+号的运算符重载不过没有找到，又发现转换函数可以将test转换成double。</li></ul><h2 id="左移运算符"><a href="#左移运算符" class="headerlink" title="左移运算符"></a>左移运算符</h2><p>左移运算运算的是二进制，通过左移不同的位数可以实现不同的功能，比如左移0位就相当于取整操作，左移1位就相当于将操作数乘以2</p><p>示例</p><p>计算树中深度相同的节点的和最大的值，并输出深度</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;typedef long long ll;int main(){    int a,b;//节点数和节点权数    int cont;//计数，因为完全二叉树的最后一层不一定是满的    cin&gt;&gt;a;    ll Maxsum = 0;//最大的层数和    bool flag = false;    int MaxN;//最大层数    int i =0;for(i; ; i++){//每层的层数从0开始计算        ll sum = 0;//每层的和        for(int N = 0;N&lt;(1&lt;&lt;i);N++){//利用左移运算符号输入每层的数据            cin&gt;&gt;b; sum+=b;            if(++cont&gt;=a){                flag = true;                break;            }        }        if(Maxsum&lt;sum){            Maxsum=sum; MaxN = i+1;        }        if(flag)            break;    }    cout &lt;&lt;MaxN;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="new创建二维数组"><a href="#new创建二维数组" class="headerlink" title="new创建二维数组"></a>new创建二维数组</h2><p>在练习dp杨辉三角的时候遇到的，用new创建杨辉三角</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){  int n;  cin&gt;&gt;n;   //一维数组的写法是  int* a = new int[n];  int** a = new int*[n];  for(int i =1;i&lt;=n;i++){    a[i] = new int[i];  }  for(int i = 1;i&lt;=n;i++){    for(int j =1;j&lt;=i;j++){      cin&gt;&gt;a[i][j];    }  }  for(int i = 1;i&lt;=n;i++){    for(int j =1;j&lt;=i;j++){      cout&lt;&lt;a[i][j]&lt;&lt;" ";    }    cout&lt;&lt;endl;  }   //释放内存  for (int i = 1;i &lt;= n;i++) delete[]a[i];  delete[]a;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在类中使用初始化列表的问题"><a href="#在类中使用初始化列表的问题" class="headerlink" title="在类中使用初始化列表的问题"></a>在类中使用初始化列表的问题</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;class A{public:    A(int t):a(t),b(a){}    void info_(){        std::cout&lt;&lt;"a = "&lt;&lt;a&lt;&lt;" b = "&lt;&lt;b;    }private:    int b;    int a;};int main(){    A aa(10);    aa.info_();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的输出结果是</p><p>a = 10 b = 垃圾值；</p><p>产生这种问题的原因是在初始化列表中的初始话顺序并不是写的顺序，而是按照定义的顺序来的，先定义的b，所以先初始话b，b是a的值，但是此时a还没有赋值，所以b存的就是一个垃圾值。</p><p>如果将定义顺序改为</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a;int b;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>则得到的就是我们想要的结果。</p><p>当然这种定义顺序的要求仅仅是对于初始化列表的，如果将代码改成</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;class A{public:    A(int t){        a=t;        b=a;    }    void info_(){        std::cout&lt;&lt;"a = "&lt;&lt;a&lt;&lt;" b = "&lt;&lt;b;    }private:    int b;    int a;};int main(){    A aa(10);    aa.info_();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依旧是我们想要的结果。</p><p>即</p><p><strong>初始化列表里赋值跟定义顺序有关，在构造函数里跟定义顺序无关</strong></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT基础学习</title>
      <link href="/2022/11/21/qt-xue-xi/"/>
      <url>/2022/11/21/qt-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>命名规范：类名首字母大写，单词与单词之间大写；函数名首字母小写，单词与单词之间大写</p><ul><li><p>快捷键：</p></li><li><p>注释：ctrl+/</p></li><li><p>运行:   ctrl+r</p></li><li><p>编译：ctrl+b</p></li><li><p>整行移动：ctrl+shift+上or下</p></li><li><p>帮助文档：F1</p></li><li><p>自动对齐：ctrl+i</p></li><li><p>xxx.cpp文件和xxx.h文件之间快速切换：F4</p></li></ul><h2 id="一、第一个QT程序"><a href="#一、第一个QT程序" class="headerlink" title="一、第一个QT程序"></a>一、第一个QT程序</h2><p>创建一个桌面QT应用程序，选择如下</p><p><img src="/2022/11/21/qt-xue-xi/image-20221122171218506.png"></p><p>choose下一步</p><p><img src="/2022/11/21/qt-xue-xi/image-20221122171329115.png" alt="不能含有中文路径"></p><p>继续下一步</p><p><img src="/2022/11/21/qt-xue-xi/image-20221122171502488.png"></p><p>这里有三个选择分别是QMainWindow,QDialog,Qwidget,这里的QWidget相当于其他两个父类，选择QWidget就是一个空的窗口，选择QMainWindow会在空窗口的基础上多了菜单栏，QDialog就是对话窗类，下面有个创建界面，如果不勾选就是自己编写程序的窗口各种组件，如果勾选了就可以类似MFC在一个空的窗口自己添加各种组件设计界面。继续下一步完成创建</p><p>打开文件中的widget.ui文件就会跳转到添加组件界面，这里添加两个组件</p><p><img src="/2022/11/21/qt-xue-xi/image-20221122172231052.png" alt="在旁别的视图会显示出当前添加组件的类"></p><p>先打开01_learn.pro文件添加语句</p><p><img src="/2022/11/21/qt-xue-xi/image-20221122172421216.png" alt="添加QT       += core gui texttospeech"></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">QT       += core gui texttospeech<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然在在ui界面右击按钮，选择跳转到槽，然后选择clicked，然后会跳转到相应的控制组件的相应语句在其实添加事件处理程序</p><p><img src="/2022/11/21/qt-xue-xi/image-20221122172925619.png"></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">x-&gt;say(ui-&gt;lineEdit-&gt;text()); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再编写Wdiget的构造函数添加语句</p><p><img src="/2022/11/21/qt-xue-xi/image-20221122173040858.png"></p><p>由于这里使用了QTextTOSpeeh所以还要在widget.h文件中添加该类的头文件</p><p><img src="/2022/11/21/qt-xue-xi/image-20221122173216491.png"></p><p>最后在运行程序</p><p><img src="/2022/11/21/qt-xue-xi/image-20221122173311946.png"></p><p>在文本框中输入文字，点击按钮就会语音播报出这段文字</p><h2 id="二、基本认识"><a href="#二、基本认识" class="headerlink" title="二、基本认识"></a>二、基本认识</h2><p>文件目录</p><p><img src="/2022/11/21/qt-xue-xi/image-20221121202806777.png"></p><p>.pro文件</p><p>第一个pro是项目工程文件文件</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#-------------------------------------------------## Project created by QtCreator 2022-11-21T19:30:51##-------------------------------------------------QT       += core gui texttospeech #QT包含的模块，这个时候里面有三个模块分别是core gui texttospeechgreaterThan(QT_MAJOR_VERSION, 4): QT += widgets    #大于4版本包含widget模块TARGET = hello #目标 生成.exe可执行文件的名称TEMPLATE = app #模板 应用程序模板，默认生成的是app模板，也有别的一些模板# The following define makes your compiler emit warnings if you use# any feature of Qt which has been marked as deprecated (the exact warnings# depend on your compiler). Please consult the documentation of the# deprecated API in order to know how to port your code away from it.DEFINES += QT_DEPRECATED_WARNINGS    #表示当Qt的某些功能被标记为过时的，那么编译器会发出警告。# You can also make your code fail to compile if you use deprecated APIs.# In order to do so, uncomment the following line.# You can also select to disable deprecated APIs only up to a certain version of Qt.#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0SOURCES += \ #源文件        main.cpp \        widget.cppHEADERS += \ #头文件        widget.hFORMS += \  #ui文件        widget.ui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/Qt5%20%E6%A8%A1%E5%9D%97.png" alt="Qt5所包含的主要模块"></p><p>main.cpp</p><p>main.cpp是主函数文件，里面包含了主要应用程序的入口函数，和C/C++一般写法一样，QT界面的main（）函数也有固定的格式</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main(int argc,char **argv){QApplication a(argc,argv);return a.exec();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图中的main()函数代码解析:</p><ul><li><p>1~2行：由于在main()函数中分别定义了 QApplication和Widget类的对象，因此要引入两个文件的头文件。由于widget.h是我们自己创建的，所以引用的时候要用 “ “;QApplication是QT提供的所以用 &lt; &gt;;</p></li><li><p>7行：Widget是自定义的类，继承自QWidget,QWidget类是所有用户界面对象的基类,所有Widget也是，w是实例化出的一个用户界面</p><p><img src="/2022/11/21/qt-xue-xi/image-20221122174145895.png" alt="如果在创建一个就会显示两个"></p></li><li><p>8行:   在默认的情况下，QT所提供的所有组件都是隐藏的不会自动显示出来。通过调用show()方法，w用户界面就可以在程序运行后显示出来</p></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "widget.h" //用户自定义的头文件，名字可以在创建的时候更改#include &lt;QApplication&gt; //应用程序头文件，int main(int argc, char *argv[])// argc是命令个数，argv是命令参数{    QApplication a(argc, argv); //定义一个应用程序类，并且在每个QT文件中有且仅有一个应用程序类    //它的构造函数接受和main函数一样的参数，相当于c/c++程序中的程序入口，这个是QT图形化程序入口    Widget w;//创建一个窗口    w.show();//默认不会显示窗口，显示窗口    return a.exec();//会进入QT程序的事件循环函数等待用户的操作，图形程序需要与用户交互所以不会自动退出，当且仅当点击“X”之后就会返回一个0值关闭窗口}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>widget.cpp和widget.h</p><p>创建项目的时候定义了继承自QWidget的用户界面类,使用的默认名称widget,该类的定义部分位于widget.h头文件中，实现部分在widget.cpp文件中</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//#ifndef WIDGET_H#define WIDGET_H#include &lt;QWidget&gt; //添加的窗口类#include &lt;QTextToSpeech&gt; //说话类namespace Ui {class Widget;}class Widget : public QWidget{    Q_OBJECT //定义好的宏，允许使用信号和槽机制public:    explicit Widget(QWidget *parent = 0);  //构造函数    ~Widget();  //析构函数private slots:    void on_pushButton_clicked(); //按钮private:    Ui::Widget *ui;     QTextToSpeech *x; //创建说话对象};#endif // WIDGET_H---------------------------------#include "widget.h"#include "ui_widget.h"Widget::Widget(QWidget *parent) :    QWidget(parent),    ui(new Ui::Widget){    ui-&gt;setupUi(this);    x = new QTextToSpeech;}Widget::~Widget(){    delete ui;}void Widget::on_pushButton_clicked(){    x-&gt;say(ui-&gt;lineEdit-&gt;text()); //提取框中文字语音播报}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在初始的状态下widget类是由Q_OBJECT，构造函数还有析构函数组成的</p><ul><li>Q_OBJECT：本质是一个已经定义好的宏，所有需要的”信号和槽”功能组件都必须将Q_OBJECT作为private属性的成员引入类中。</li><li>带参数的构造函数：QWidget是所有组件的基类，借助parent指针，可以为当前窗口指定父窗口，如果删除父窗口，里面所有的子窗口都会关掉</li></ul><p>后面两个prviate是自己添加的组件时QT自动添加的</p><p><img src="/2022/11/21/qt-xue-xi/image-20221121210925946.png"></p><p>运行结果在w主窗口中有两个自己添加的组件</p><p>widget.ui</p><p>这个文件中就是设计图形界面的，在这里添加的组件QT都会自动在相应的文件中生成，这时候只需要去对应的代码区写事件处理程序。</p><h2 id="三、创建一个QPushButton"><a href="#三、创建一个QPushButton" class="headerlink" title="三、创建一个QPushButton"></a>三、创建一个QPushButton</h2><p>先创建一个新的项目my_PushButton，这次设置不创建界面，通过API接口添加组件。</p><p>如果第一次接触一个组件不知都怎么使用可以使用QT的界面中的帮助选项，这里以QPushButton为例</p><p><img src="/2022/11/21/qt-xue-xi/image-20221125144300444.png" alt="查看帮助界面"></p><p>在QPushButton Class一栏中包含了使用所需要在文件中添加的内容</p><pre class="line-numbers language-none"><code class="language-none">Header: #include &lt;QPushButton&gt;   //使用所包含的头文件qmake: QT += widgets             //使用要添加的模块Inherits: QAbstractButton //QPUshButton的父类Inherited By: QCommandLinkButton //QPushButton的子类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在widget.cpp文件中添加控件，注意不是main.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "widget.h"#include&lt;QPushButton&gt;Widget::Widget(QWidget *parent)    : QWidget(parent){    //创建一个按钮    QPushButton *bt=new QPushButton; //这里要采用new的方式创建组件    }Widget::~Widget(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就创建好了一个简单的按钮，但是运行编译发现，界面并没有出现按钮，之前说过默认是不会显示窗口的，那我们用show试一下</p><p><img src="/2022/11/21/qt-xue-xi/image-20221125145425694.png" alt="加一句bt->show();"></p><p>我们发现是没有在一个窗口上的，我们所期望的是按钮的就在我们初始创建的窗口上，所以我们把令bt的对象指向初始窗口</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bt-&gt;setParent(this);//因为在窗口类里创建的对象，所以用this指针就可以指向窗口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221125145840918.png" alt="在窗口中间生成一个按钮"></p><p>设置这个按钮的文本</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bt-&gt;setText("我的按钮");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221125150014939.png"></p><p>这样创建其实是蛮麻烦的，QPushButton类中有多个重载的构造函数，利用重载构造函数我们可以快速创建出一个按钮组件</p><p><img src="/2022/11/21/qt-xue-xi/image-20221125150616486.png"></p><p>根据构造函数参数表我们所用第二个就可以了</p><p><img src="/2022/11/21/qt-xue-xi/image-20221125151011376.png"></p><p>我的按照第一个方式创建的组件是在窗口中心的，有的版本可能是和第二按钮一样在左上角，导致重合，不过都不要紧，反正位置可以调的 ，通过调用move函数移动按钮位置，以下是完整代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "widget.h"#include&lt;QPushButton&gt;Widget::Widget(QWidget *parent)    : QWidget(parent){    //创建一个按钮    QPushButton *bt1=new QPushButton; //这里要采用new的方式创建组件    bt1-&gt;show();//show()以顶层的方式弹出窗口控件    bt1-&gt;setParent(this);//因为在窗口类里创建的对象，所以用this指针就可以指向窗口    bt1-&gt;setText("我的第一个按钮");    //创建第二个按钮    QPushButton *bt2=new QPushButton("我的第二个按钮",this);    bt1-&gt;move(100,100);//移动第二个窗口    resize(640,400);//设置窗口大小    setFixedSize(640,400);//固定窗口大小，可以拖拽，不能缩放    setWindowTitle("我的第一个窗口");//设置窗口名称}Widget::~Widget(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221125151615505.png" alt="运行结果"></p><p>总结：</p><ul><li>创建按钮：QPushButton *bt1=new QPushButton;</li><li>设置父亲：setParent(this);</li><li>设置文本：setText(“文本”);</li><li>设置位置：move(宽,高);</li><li>重新指定窗口大小： resize</li><li>设置窗口标题：setwindowTitle</li><li>设置窗口固定大小：setFixedsize</li></ul><p>在创建的组件是使用new的主要有两个原因，一就是非new在栈上，所以空间有限，能分配的空间相对小，再就是由于非new在栈上，所以会随着所在块的结束，也就是所在大括号{}之后会销毁，如果有局部自动变量，在退出构造函数之后这些自动变量就会被销毁，这样 你的窗口调用show的时候也不会显示组件了</p><p>我们通过new创建了两个按钮组件，但是在我们所写函数并没有添加相应的delete()函数，这主要是由于在QT中 对象树的概念，我们在创建按钮组件的时候把他父类指定了QWidget，而在QT中存在一个chidren表，两个按钮组件就放在chidren表中，当关闭窗口的时候QWidget析构的时候也会把在它chidren表中的控件析构</p><p><img src="/2022/11/21/qt-xue-xi/Qt%E5%AF%B9%E8%B1%A1%E6%A0%91.png" alt="Qt对象树"></p><p>也就是如果在用new创建的对象指定的父类是QObject或者是QObject的子类对象是可以不用管理内存的释放的</p><h2 id="四、信号和槽"><a href="#四、信号和槽" class="headerlink" title="四、信号和槽"></a>四、信号和槽</h2><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>QT中的信号和槽机制可以简单的理解为：张三想要像李四表白，张三先在微信给李四发了表白消息，然后李四就拒绝了嘛</p><p>这里张三就是信号的发送者   在微信发的消息就是发送的信号，李四就是信号的接受者，李四拒绝就是处理的槽函数</p><p>现在实现点击按钮关闭窗口的实例</p><p>首先需要一个connect函数用来连接以上参数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//需求：点击我的第一个按钮关闭窗口    //参数1： 信号的发送者 参数二: 发送的信号（函数地址，这个函数地址可以理解成微信，就是要用哪种方式表白，这里就是用哪种组件的函数发送信号）    //参数3： 信号的接收者 参数4：处理的参函数   connect(bt1,&amp;QPushButton::clicked,this,&amp;Widget::close);//QPushButton发出点击的信号，Widget执行槽函数关闭窗口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>QPushButton发出的信号可以在帮助文档中查询</p><p><img src="/2022/11/21/qt-xue-xi/image-20221125162044688.png" alt="QPushButton的信号"></p><p>Widget是继承于QWidget的，所以可以在帮助文档查找QWidget的槽函数</p><p><img src="/2022/11/21/qt-xue-xi/image-20221125162423866.png"></p><p>每个槽函数可以点击查看作用</p><h3 id="自定义信号和槽"><a href="#自定义信号和槽" class="headerlink" title="自定义信号和槽"></a>自定义信号和槽</h3><p>新创建一个文件夹SignalAndSlot</p><p><img src="/2022/11/21/qt-xue-xi/image-20221125172139311.png" alt="添加一个Class，命名teacher，继承QObject"></p><p>然后再用类似的方法创建一个Student类，我们这里定义teacher发送信号，student执行槽函数</p><p>实现功能：当下课了，老师饿了，学生请老师吃饭</p><p>student.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifndef STUDENT_H#define STUDENT_H#include &lt;QObject&gt;class Student : public QObject{    Q_OBJECTpublic:    explicit Student(QObject *parent = nullptr);signals:public slots:    //在这里写槽函数    //返回值是void，需要声明，也需要实现    //可以有参数，可以有重载    void treat();};#endif // STUDENT_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>teacher.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifndef TEACHER_H#define TEACHER_H#include &lt;QObject&gt;class Teacher : public QObject{    Q_OBJECTpublic:    explicit Teacher(QObject *parent = nullptr);signals:    //自定义信号  写在signal下    //返回值是void，只需要声明，不需要实现    //可以有参数，可以重载    void hungry();public slots:};#endif // TEACHER_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>widget.h</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifndef WIDGET_H#define WIDGET_H#include &lt;QWidget&gt;#include "teacher.h"#include "student.h"namespace Ui {class Widget;}class Widget : public QWidget{    Q_OBJECTpublic:    explicit Widget(QWidget *parent = 0);    ~Widget();private:    Teacher* zt;//定义类成员    Student* st;//定义类成员    Ui::Widget *ui;    void ClassIsOver();//定义下课了条件函数};#endif // WIDGET_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>student.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "student.h"#include &lt;QDebug&gt;//调试类Student::Student(QObject *parent) : QObject(parent){}void Student::treat(){    qDebug()&lt;&lt;"on my treat today";//打印调试信息}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>teacher.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "teacher.h"Teacher::Teacher(QObject *parent) : QObject(parent){    //什么都不用写}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>widget.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "widget.h"#include "ui_widget.h"Widget::Widget(QWidget *parent) :    QWidget(parent),    ui(new Ui::Widget){    //创建老师对象    this-&gt;zt =new Teacher(this);//把这个Teacher指定为Widget，放入对象树，就不用担心内存释放的问题    //创建学生对象    this-&gt;st =new Student(this);    //自定义的信号与槽    connect(zt,&amp;Teacher::hungry,st,&amp;Student::treat);    //添加下课了的前提    ClassIsOver(); //这个不能放在自定义信号于槽的语句前面，这里的逻辑是先有了信号了，然后条件达成触发信号    ui-&gt;setupUi(this);}void Widget::ClassIsOver(){    //下课了，老师饿了，触发信号    emit zt-&gt;hungry();}Widget::~Widget(){    delete ui;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221125175240410.png" alt="运行结果"></p><h3 id="自定义信号和槽的重载情况"><a href="#自定义信号和槽的重载情况" class="headerlink" title="自定义信号和槽的重载情况"></a>自定义信号和槽的重载情况</h3><p>分别在teacher和student类中编写重载版本</p><p>在teacher.h中添加一句</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void hungry(QString foodname);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>student.h添加</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void treat(QString foodname);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在student的cpp文件编写函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void treat(QString foodname){qDebug()&lt;&lt;"Reload version"&lt;&lt;foodname;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改widget.cpp</p><p><img src="/2022/11/21/qt-xue-xi/image-20221126162247783.png"></p><p>重载版本的参数不能直接在connect中指定，要分别写两个函数的函数指针，通过函数指针访问</p><p><img src="/2022/11/21/qt-xue-xi/image-20221126162449726.png" alt="运行结果"></p><p>这里的food输出的带有双引号但是我们写的程序并没有添加双引号</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">qDebug()&lt;&lt;"Reload version"&lt;&lt;foodname;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里通过强转，将QString转换成char* 类型就可以了</p><pre class="line-numbers language-none"><code class="language-none">qDebug()&lt;&lt;"Reload version"&lt;&lt;foodname.toUtf8().data();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221126162745924.png" alt="运行结果"></p><p>转换过程：先用toUTf8()转换成QByteArray,再把用data()把QByteArray转换成char*</p><h3 id="信号连接信号"><a href="#信号连接信号" class="headerlink" title="信号连接信号"></a>信号连接信号</h3><p>这个时候我们是一运行老师就饿了，然后输出了调试信息，现在添加一个按钮，当点击了按钮输出调试按钮</p><p><img src="/2022/11/21/qt-xue-xi/image-20221126165045473.png"></p><p>别忘记了添加头文件#include<qpushbutton></qpushbutton></p><p>现在就可以实现了点击按钮输出调试信息</p><p>接下来是通过信号连接信号的方式，创建两个按钮，按“有参调试”输出：Reload version food，按“无参调试”输出：on my treat today</p><p><img src="/2022/11/21/qt-xue-xi/image-20221126170328982.png"></p><p>widget.cpp完整代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "widget.h"#include "ui_widget.h"#include &lt;QPushButton&gt;Widget::Widget(QWidget *parent) :    QWidget(parent),    ui(new Ui::Widget){    //创建老师对象    this-&gt;zt =new Teacher(this);//把这个Teacher指定为Widget，放入对象树，就不用担心内存释放的问题    //创建学生对象    this-&gt;st =new Student(this);    //自定义的信号与槽    //connect(zt,&amp;Teacher::hungry,st,&amp;Student::treat);    //连接带有参数的信号和槽    //函数指针-&gt;函数地址    void(Teacher:: *teacherSignal)(QString)=&amp;Teacher::hungry;    void(Student:: *studentSlot)(QString)=&amp;Student::treat;    connect(zt,teacherSignal,st,studentSlot);    QPushButton* bt1=new QPushButton("有参调试",this);    bt1-&gt;move(100,100);//移动按钮    connect(bt1,QPushButton::clicked,this,Widget::ClassIsOver);//当点击按钮，触发ClassISOver    //添加下课了的前提    //ClassIsOver(); //这个不能放在自定义信号于槽的语句前面，这里的逻辑是先有了信号了，然后条件达成触发信号    void(Teacher:: *teacherSignal2)(void)=&amp;Teacher::hungry;//    void(Student:: *studentSlot2)(void)=&amp;Student::treat;//先用函数指针指定使用的函数    connect(zt,teacherSignal2,st,studentSlot2);//创建信号与槽的连接    QPushButton* bt2=new QPushButton("无参调试",this);//创建按钮    bt2-&gt;move(100,200);//移动按钮    connect(bt2,QPushButton::clicked,zt,teacherSignal2);  //信号连接信号    ui-&gt;setupUi(this);}void Widget::ClassIsOver(){    //下课了，老师饿了，触发信号    //emit zt-&gt;hungry();    emit zt-&gt;hungry("food");}Widget::~Widget(){    delete ui;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221126170424084.png" alt="运行结果"></p><p>在使用完一个信号连接后是可以断开的使用disconnect()断开连接，参数和要断开的连接一样</p><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p>在lambda表达式中实现一个信号对应多个槽</p><p>先创建一个按钮，实现在点击按钮的时候关闭窗口，并输出调试信息</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//lamdba表达式QPushButton* bt3=new QPushButton("lambda",this);bt3-&gt;move(100,300);connect(bt3,QPushButton::clicked,[=](){  //如果在使用lambda的时候如果第三个参数是this,可以省略不写    this-&gt;close();    this-&gt;ClassIsOver();});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221126174003604.png"></p><p>点击lambda会关闭窗口输出调试信息</p><p><img src="/2022/11/21/qt-xue-xi/image-20221126174117012.png"></p><h2 id="五、QMainWindow"><a href="#五、QMainWindow" class="headerlink" title="五、QMainWindow"></a>五、QMainWindow</h2><p>新建一个项目，选择QMainWindow，现在mainwindow.cpp添加以下头文件</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "mainwindow.h"#include &lt;QMenuBar&gt;#include &lt;QMenu&gt;#include &lt;QToolBar&gt;#include &lt;QDebug&gt;#include &lt;QPushButton&gt;#include &lt;QStatusBar&gt;#include &lt;QLabel&gt;#include &lt;QDockWidget&gt;#include &lt;QTextEdit&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><p>在QMainWindow类窗口中添加一个菜单栏，在MainWindow的构造函数添加以下两句即可显示出一个简单的菜单栏，最多只有一个</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">QMenuBar* bar = menuBar();//新建一个菜单，这里是不需要设置this指针的setMenuBar(bar);//显示菜单栏<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221127154710600.png" alt="现在是空的，什么都没有"></p><p>在菜单栏添加菜单</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">QMenu* fileMenu = bar-&gt;addMenu("file");//创建一个文件菜单QMenu* newMenu = bar-&gt;addMenu("new");//创建一个新建菜单QMenu* delMenu =bar-&gt;addMenu("del");//创建一个删除菜单<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果是在Window系统下添加之后不显示，检查一下是否创建了图形界面</p><p><img src="/2022/11/21/qt-xue-xi/image-20221127155912736.png" alt="运行结果"></p><h3 id="菜单项"><a href="#菜单项" class="headerlink" title="菜单项"></a>菜单项</h3><p>在菜单中的单个选项添加菜单项</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">fileMenu-&gt;addAction("last one");//创建文件下的一个菜单项fileMenu-&gt;addSeparator();       //添加一跳分割线fileMenu-&gt;addAction("before one");//创建文件下的一个菜单项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221127161505225.png" alt="运行结果"></p><h3 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h3><p>添加一个工具栏</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">QToolBar* toolbar= new QToolBar(this);//这里还是要设置this指针addToolBar(Qt::LeftToolBarArea,toolbar);//设置工具栏默认显示位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里使用的是addToolBar的一个重载函数，第一个参数可以设置为默认位置上下左右四个位置</p><p><img src="/2022/11/21/qt-xue-xi/image-20221127162502775.png"></p><p><img src="/2022/11/21/qt-xue-xi/image-20221127162516241.png" alt="运行结果"></p><p>创建完成不设置工具栏是可以随意拖动的，甚至可以拖动到窗口中间</p><p><img src="/2022/11/21/qt-xue-xi/image-20221127162643917.png"></p><p>设置一下浮动并让窗口只能停靠在左边或者右边</p><p><img src="/2022/11/21/qt-xue-xi/image-20221127163138354.png" alt="需要使用的函数在QToolBar中可以找到"></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">toolbar-&gt;setAllowedAreas(Qt::LeftToolBarArea | Qt::RightToolBarArea);//设置只能显示在左边或者右边toolbar-&gt;setFloatable(false);//设置浮动这样就可以使工具栏不显示在窗口中间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置移动，设置之后工具栏就不可以移动了</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">toolbar-&gt;setMovable(false);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后设置工具栏的内容</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">   toolbar-&gt;addAction("tool1");toolbar-&gt;addSeparator();   toolbar-&gt;addAction("tool2");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在工具栏添加一个按钮</p><pre class="line-numbers language-none"><code class="language-none">toolbar-&gt;addSeparator();QPushButton* bt = new QPushButton("tool3",this);toolbar-&gt;addWidget(bt);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221127164736862.png"></p><h3 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h3><p>跟菜单栏一样也只能有一个</p><p>设置一个状态栏</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">QStatusBar* stbar = new QStatusBar;//这里也是不用this，可以理解为由于只能设置一个QT已经帮我们设置好了setStatusBar(stbar); //设置到窗口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221127170154634.png" alt="由于没在状态栏添加东西所以显示的是空的"></p><p>添加控件标签</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">QLabel* lab1 = new QLabel("提示左侧信息",this);stbar-&gt;addWidget(lab1);//在左侧显示一个标签QLabel* lab2 = new QLabel("提示右侧信息",this);stbar-&gt;addPermanentWidget(lab2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221127170733667.png"></p><p>设置浮动铆接部件</p><pre class="line-numbers language-none"><code class="language-none">QDockWidget* dock1 = new QDockWidget("浮动",this);addDockWidget(Qt::BottomDockWidgetArea,dock1);//第一个参数填设置位置，与工具栏类似dock1-&gt;setAllowedAreas(Qt::TopDockWidgetArea | Qt::BottomDockWidgetArea); //设置只能在上下显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里设置的位置是下方</p><p>其他位置的设置可以参考帮助文档</p><p><img src="/2022/11/21/qt-xue-xi/image-20221127171711401.png" alt="参数表"></p><p><img src="/2022/11/21/qt-xue-xi/image-20221127171127337.png" alt="虽然设置的是下方但是由于主界面没有内容，这个下方定义的是在内容之下，所以仍然显示的是最上方"></p><p>在窗口内添加一个中心部件，中心部件也只能设置一个</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">QTextEdit* edi1 = new QTextEdit(this);setCentralWidget(edi1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221127171549948.png" alt="这时铆接部件就显示在下方的"></p><p>这一节中有的控件是只能添加一个的，有的可以设置多个，可以根据使用对应的函数记忆，用set创建的就只能有一个，用add创建的就可以有多个</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "mainwindow.h"#include &lt;QMenuBar&gt;#include &lt;QMenu&gt;#include &lt;QToolBar&gt;#include &lt;QDebug&gt;#include &lt;QPushButton&gt;#include &lt;QStatusBar&gt;#include &lt;QLabel&gt;#include &lt;QDockWidget&gt;#include &lt;QTextEdit&gt;MainWindow::MainWindow(QWidget *parent)    : QMainWindow(parent){    resize(640,400);    QMenuBar* bar = menuBar();//新建一个菜单，这里是不需要设置this指针的    setMenuBar(bar);//显示菜单栏    QMenu* fileMenu = bar-&gt;addMenu("file");//创建一个文件菜单    QMenu* newMenu = bar-&gt;addMenu("new");//创建一个新建菜单    QMenu* delMenu =bar-&gt;addMenu("del");//创建一个删除菜单    //添加菜单项----------------------------------------------------------    fileMenu-&gt;addAction("last one");//创建文件下的一个菜单项    fileMenu-&gt;addSeparator();       //添加一跳分割线    fileMenu-&gt;addAction("before one");//创建文件下的一个菜单项    //添加工具栏----------------------------------------------------------    QToolBar* toolbar= new QToolBar(this);//这里还是要设置this指针    addToolBar(Qt::LeftToolBarArea,toolbar);//设置工具栏默认显示位置    toolbar-&gt;setAllowedAreas(Qt::LeftToolBarArea | Qt::RightToolBarArea);//设置只能显示在左边或者右边    toolbar-&gt;setFloatable(false);//设置浮动这样就可以使工具栏不显示在窗口中间    //设置移动，设置之后工具栏就不可以移动了    toolbar-&gt;setMovable(false);    //设置工具栏内容    toolbar-&gt;addAction("tool1");    toolbar-&gt;addSeparator();    toolbar-&gt;addAction("tool2");    //在工具栏添加控件    toolbar-&gt;addSeparator();    QPushButton* bt = new QPushButton("tool3",this);    toolbar-&gt;addWidget(bt);    //添加状态栏---------------------------------------------------------    QStatusBar* stbar = new QStatusBar;//这里也是不用this，可以理解为由于只能设置一个QT已经帮我们设置hao    setStatusBar(stbar); //设置到窗口    //放标签控件    QLabel* lab1 = new QLabel("提示左侧信息",this);    stbar-&gt;addWidget(lab1);//在左侧显示一个标签    QLabel* lab2 = new QLabel("提示右侧信息",this);    stbar-&gt;addPermanentWidget(lab2);    //铆接部件(浮动窗口)    QDockWidget* dock1 = new QDockWidget("浮动",this);    addDockWidget(Qt::BottomDockWidgetArea,dock1);//第一个参数填设置位置，与工具栏类似    dock1-&gt;setAllowedAreas(Qt::TopDockWidgetArea | Qt::BottomDockWidgetArea); //设置只能在上下显示    //设置中心部件,只能一个    QTextEdit* edi1 = new QTextEdit(this);    setCentralWidget(edi1);}MainWindow::~MainWindow(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、添加资源文件"><a href="#六、添加资源文件" class="headerlink" title="六、添加资源文件"></a>六、添加资源文件</h2><p>新建一个项目My_Res，勾选图形界面创建</p><p><img src="/2022/11/21/qt-xue-xi/image-20221127174251650.png" alt="先用UI界面创建如下窗口"></p><p>右击文件目录，选择在Explore中显示，跳转到文件目录，把要填加的资源文件放在目录下，这里以存放图片为例</p><p><img src="/2022/11/21/qt-xue-xi/image-20221127175032276.png" alt="image包含了要使用了图片资源"></p><p>然后右击项目根目录选择添加新文件</p><p><img src="/2022/11/21/qt-xue-xi/image-20221127175212680.png" alt="勾选这个选项"></p><p>然后进入相应文件</p><p><img src="/2022/11/21/qt-xue-xi/image-20221127175402027.png" alt="先点击添加前缀 / 就可以了，然后点击天机文件，选择刚在放在项目文件夹目录的Image，全选添加"></p><p>然后点击编译</p><p><img src="/2022/11/21/qt-xue-xi/image-20221127175554602.png" alt="如图显示就添加成功了"></p><p>为菜单项添加图标</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ui-&gt;actionedit-&gt;setIcon(QIcon(":/Image/Sunny.jpg"));ui-&gt;actiondel-&gt;setIcon(QIcon(":/Image/Frame.jpg"));//这两句要放在ui-&gt;setupUi(this);的下面，不然运行不了的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221127180459061.png" alt="运行结果"></p><h2 id="七、对话框"><a href="#七、对话框" class="headerlink" title="七、对话框"></a>七、对话框</h2><p>新建一个项目My_QDig,先用图形界面创建以下界面</p><p><img src="/2022/11/21/qt-xue-xi/image-20221128161122443.png"></p><p><img src="/2022/11/21/qt-xue-xi/image-20221128181921311.png" alt="参数"></p><h3 id="模态对话框"><a href="#模态对话框" class="headerlink" title="模态对话框"></a>模态对话框</h3><p>模态对话框：弹出后就不可以对其他窗口做操作</p><p>实现功能：点击tool，弹出一个模态对话框</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">connect(ui-&gt;actiontool,&amp;QAction::triggered,[=](){//建立连接，当触发tool弹出窗口//模态对话框------------------------------------------QDialog dia1(this);//创建一个窗口dia1.resize(520,300);//设置弹出的窗口大小dia1.exec();//显示模态对话框});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>connect第二个参数是QAction里的信号</p><p><img src="/2022/11/21/qt-xue-xi/image-20221128162306164.png"></p><h3 id="非模态对话框"><a href="#非模态对话框" class="headerlink" title="非模态对话框"></a>非模态对话框</h3><p>非模态对话框：弹出后可以对其他的窗口操作</p><p>实现功能：点击tool2弹出一个非模态对话框</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">    connect(ui-&gt;actiontool2,&amp;QAction::triggered,[=](){//建立连接，当触发tool2弹出窗口    //非模态对话框----------------------------------------    //QDialog dia2(this);不能使用这种方式创建，这样创建窗口会一闪而过    QDialog *dia2 = new QDialog(this);//创建一个窗口，    dia2-&gt;resize(520,300);    dia2-&gt;setAttribute(Qt::WA_DeleteOnClose); //55号属性    dia2-&gt;show();//显示非模态对话框    });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>QDialog dia2(this);不能使用这种方式创建，这样创建窗口会一闪而过，所以应该创建在堆区，由于模态对话框会有一个堵塞的特性，不会退出connect函数所以可以直接创建</strong></p><p> <strong>dia2-&gt;setAttribute(Qt::WA_DeleteOnClose); ，由于创建在堆区，所以如果要是一直创建非模态对话框，在程序还在运行时内存是不会释放的，有可能引起内存泄漏，使用这句保证在每次创建的非模态对话框删除时清理内存</strong></p><h3 id="消息对话框"><a href="#消息对话框" class="headerlink" title="消息对话框"></a>消息对话框</h3><p>根据上述方法分别在菜单项的编辑添加模态对话框，删除添加非模态对话框</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">connect(ui-&gt;actionedit,&amp;QAction::triggered,[=](){//建立连接，当触发编辑弹出窗口//模态对话框------------------------------------------QDialog dia3(this);//创建一个窗口dia3.resize(520,300);//设置弹出的窗口大小dia3.exec();//显示模态对话框});connect(ui-&gt;actiondel,&amp;QAction::triggered,[=](){//建立连接，当触发删除弹出窗口//非模态对话框----------------------------------------QDialog *dia4 = new QDialog(this);//创建一个窗口，dia4-&gt;resize(520,300);dia4-&gt;setAttribute(Qt::WA_DeleteOnClose); //55号属性dia4-&gt;show();//显示非模态对话框});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现功能：点击tool弹出错误消息，点击tool2弹出对话消息，点击编辑弹出提问消息，点击删除弹出警告信息</p><h4 id="点击tool弹出错误消息："><a href="#点击tool弹出错误消息：" class="headerlink" title="点击tool弹出错误消息："></a>点击tool弹出错误消息：</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">connect(ui-&gt;actiontool,&amp;QAction::triggered,[=](){//建立连接，当触发tool弹出窗口//模态对话框------------------------------------------//QDialog dia1(this);//创建一个窗口//dia1.resize(520,300);//设置弹出的窗口大小//dia1.exec();//显示模态对话框QMessageBox::critical(this,"error","错误");//点击弹出错误信息});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="点击tool2弹出对话信息："><a href="#点击tool2弹出对话信息：" class="headerlink" title="点击tool2弹出对话信息："></a>点击tool2弹出对话信息：</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">connect(ui-&gt;actiontool2,&amp;QAction::triggered,[=](){//建立连接，当触发tool2弹出窗口   //非模态对话框----------------------------------------   //QDialog dia2(this);不能使用这种方式创建，这样创建窗口会一闪而过   //QDialog *dia2 = new QDialog(this);//创建一个窗口，   //dia2-&gt;resize(520,300);   //dia2-&gt;setAttribute(Qt::WA_DeleteOnClose); //55号属性   //dia2-&gt;show();//显示非模态对话框   QMessageBox::information(this,"info","Hello World");//点击弹出消息信息   });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="点击编辑弹出提问消息："><a href="#点击编辑弹出提问消息：" class="headerlink" title="点击编辑弹出提问消息："></a>点击编辑弹出提问消息：</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">connect(ui-&gt;actionedit,&amp;QAction::triggered,[=](){//建立连接，当触发编辑弹出窗口//模态对话框------------------------------------------//QDialog dia3(this);//创建一个窗口//dia3.resize(520,300);//设置弹出的窗口大小//dia3.exec();//显示模态对话框    if(QMessageBox::Yes == QMessageBox::question(this,"edit","是否编辑",QMessageBox::Yes | QMessageBox::Yes,QMessageBox::No)){        qDebug()&lt;&lt;"开始编辑";QMessageBox::No    }else{        qDebug()&lt;&lt;"退出编辑";    }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/11/21/qt-xue-xi/image-20221128172336598.png"></p><p>点击yes弹出开始编辑消息，点击no弹出退出编辑消息</p><h4 id="点击删除弹出警告信息："><a href="#点击删除弹出警告信息：" class="headerlink" title="点击删除弹出警告信息："></a>点击删除弹出警告信息：</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">connect(ui-&gt;actiondel,&amp;QAction::triggered,[=](){//建立连接，当触发删除弹出窗口//非模态对话框----------------------------------------//QDialog *dia4 = new QDialog(this);//创建一个窗口，//dia4-&gt;resize(520,300);//dia4-&gt;setAttribute(Qt::WA_DeleteOnClose); //55号属性//dia4-&gt;show();//显示非模态对话框  QMessageBox::warning(this,"warning","可能没有成功删除");});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="/2022/11/21/qt-xue-xi/image-20221128172928176.png" alt="使用函数的参数"></p><p>QWidget* parent：指定父类</p><p>const QString &amp;title：窗口标题</p><p>const QString &amp;text:   窗口内容</p><p>StandardButton buttons：选择使用的按钮，这里只有question使用了这个</p><p><img src="/2022/11/21/qt-xue-xi/image-20221128173250715.png" alt="所有按钮"></p><p>StandardButton <em>defaultButton</em> = NoButton：设置第四个窗口使用的默认值，比如上面的 question例子，默认值是</p><p>QMessageBox::No，也是就说如果不做选择直接回车会默认选择no运行</p><h3 id="颜色对话框"><a href="#颜色对话框" class="headerlink" title="颜色对话框"></a>颜色对话框</h3><p>实现功能：点击选择颜色，弹出颜色选择栏，选择后并输出调试信息</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">connect(ui-&gt;actioncolor,&amp;QAction::triggered,[=](){//建立连接，当触发删除弹出窗口    //返回值是QColor而不是QcolorDialog    //QColor 参数一：red 参数二：green 参数三：blue 参数四：透明度    QColor color1 = QColorDialog::getColor(QColor(255,0,0,255));    qDebug() &lt;&lt;"r="&lt;&lt;color1.red()&lt;&lt;"g="&lt;&lt;color1.green()&lt;&lt;"b="&lt;&lt;color1.blue();});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件对话框"><a href="#文件对话框" class="headerlink" title="文件对话框"></a>文件对话框</h3><p>实现功能：点击选择文件，弹出指定的文件目录，并再选择文件后输出文件路径</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">connect(ui-&gt;actionfile,&amp;QAction::triggered,[=](){    //返回值string,是打开文件的路径    //getOpenFileName 参数一：指定父亲 参数二：窗口名称 参数三：打开路径 参数四：筛选文件类型    QString cwd = QFileDialog::getOpenFileName(this,"打开桌面txt文件","E:/资源/桌面","*.txt");    qDebug() &lt;&lt;cwd;});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字体对话框"><a href="#字体对话框" class="headerlink" title="字体对话框"></a>字体对话框</h3><p>实现功能：点击选择字体，弹出字体选择对话框，并输出选择后的字体信息</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">connect(ui-&gt;actionfont,&amp;QAction::triggered,[=](){    bool flag;    //返回值是QFont而不是QFontDialog    //QFont 参数一：默认的字体 参数二：默认的大小    QFont font = QFontDialog::getFont(&amp;flag,QFont("宋体",36));    qDebug()&lt;&lt;"字体："&lt;&lt;font.family()&lt;&lt;"字号："&lt;&lt;font.pointSize()&lt;&lt;"是否加粗"&lt;&lt;font.bold()&lt;&lt;"是否斜体"&lt;&lt;font.italic();});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "mainwindow.h"#include "ui_mainwindow.h"#include &lt;QDialog&gt;#include &lt;QMessageBox&gt;#include &lt;QDebug&gt;#include &lt;QColorDialog&gt;#include &lt;QFileDialog&gt;#include &lt;QFontDialog&gt;MainWindow::MainWindow(QWidget *parent) :    QMainWindow(parent),    ui(new Ui::MainWindow){    ui-&gt;setupUi(this);    resize(640,400);//设置主窗口大小    connect(ui-&gt;actiontool,&amp;QAction::triggered,[=](){//建立连接，当触发tool弹出窗口    //模态对话框------------------------------------------    //QDialog dia1(this);//创建一个窗口    //dia1.resize(520,300);//设置弹出的窗口大小    //dia1.exec();//显示模态对话框    QMessageBox::critical(this,"error","错误");//点击弹出错误信息==============================消息对话框    });    connect(ui-&gt;actiontool2,&amp;QAction::triggered,[=](){//建立连接，当触发tool2弹出窗口    //非模态对话框----------------------------------------    //QDialog dia2(this);不能使用这种方式创建，这样创建窗口会一闪而过    //QDialog *dia2 = new QDialog(this);//创建一个窗口，    //dia2-&gt;resize(520,300);    //dia2-&gt;setAttribute(Qt::WA_DeleteOnClose); //55号属性    //dia2-&gt;show();//显示非模态对话框    QMessageBox::information(this,"info","Hello World");//点击弹出消息信息====================消息对话框    });    connect(ui-&gt;actionedit,&amp;QAction::triggered,[=](){//建立连接，当触发编辑弹出窗口    //模态对话框------------------------------------------    //QDialog dia3(this);//创建一个窗口    //dia3.resize(520,300);//设置弹出的窗口大小    //dia3.exec();//显示模态对话框        if(QMessageBox::Yes == QMessageBox::question(this,"edit","是否编辑",QMessageBox::Yes | QMessageBox::Yes,QMessageBox::No)){            qDebug()&lt;&lt;"开始编辑";        }else{            qDebug()&lt;&lt;"退出编辑";        }//=================================================================================消息对话框    });    connect(ui-&gt;actiondel,&amp;QAction::triggered,[=](){//建立连接，当触发删除弹出窗口    //非模态对话框----------------------------------------//    QDialog *dia4 = new QDialog(this);//创建一个窗口，//    dia4-&gt;resize(520,300);//    dia4-&gt;setAttribute(Qt::WA_DeleteOnClose); //55号属性//    dia4-&gt;show();//显示非模态对话框      QMessageBox::warning(this,"warning","可能没有成功删除");//===============================消息对话框    });    //颜色对话框----------------------------------------------------------------------------    connect(ui-&gt;actioncolor,&amp;QAction::triggered,[=](){//建立连接，当触发删除弹出窗口        //返回值是QColor而不是QcolorDialog        //QColor 参数一：red 参数二：green 参数三：blue 参数四：透明度 填参数是选择打开后的默认颜色        QColor color1 = QColorDialog::getColor(QColor(255,0,0,255));        qDebug() &lt;&lt;"r="&lt;&lt;color1.red()&lt;&lt;"g="&lt;&lt;color1.green()&lt;&lt;"b="&lt;&lt;color1.blue();    });    //文件对话框----------------------------------------------------------------------------    connect(ui-&gt;actionfile,&amp;QAction::triggered,[=](){        QString cwd = QFileDialog::getOpenFileName(this,"打开桌面txt文件","E:/资源/桌面","*.txt");        qDebug() &lt;&lt;cwd;    });    //字体对话框----------------------------------------------------------------------------    connect(ui-&gt;actionfont,&amp;QAction::triggered,[=](){        bool flag;        QFont font = QFontDialog::getFont(&amp;flag,QFont("宋体",36));        qDebug()&lt;&lt;"字体："&lt;&lt;font.family()&lt;&lt;"字号："&lt;&lt;font.pointSize()&lt;&lt;"是否加粗"&lt;&lt;font.bold()&lt;&lt;"是否斜体"&lt;&lt;font.italic();    });}MainWindow::~MainWindow(){    delete ui;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、自定义控件"><a href="#八、自定义控件" class="headerlink" title="八、自定义控件"></a>八、自定义控件</h2><p>QT里的各种已有的控件使用方法推荐观看视频</p><p><a href="https://www.bilibili.com/video/BV1g4411H78N?p=24&amp;vd_source=f342719b375d872cded85ce2655fee5d">控件P24-P28</a></p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL标准模板库</title>
      <link href="/2022/10/27/stl-biao-zhun-mo-ban-ku/"/>
      <url>/2022/10/27/stl-biao-zhun-mo-ban-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>长久以来，软件界一直希望建立一种可重复利用的东西，以及一种得以制造出”可重复运用的东西”的方法，从函数(functions)，类别(classes),函数库(function libraries),类别库(class libraries)、各种组件，从模块化设计，到面向对象(object oriented )，为的就是复用性的提升。</p><p>复用性必须建立在某种标准之上。但是在许多环境下，就连软件开发最基本的数据结构(data structures) 和算法(algorithm)都未能有一套标准。大量程序员被迫从事大量重复的工作，竟然是为了完成前人已经完成而自己手上并未拥有的程序代码，这不仅是人力资源的浪费，也是挫折与痛苦的来源。</p><p>为了建立数据结构和算法的一套标准，并且降低他们之间的耦合关系，以提升各自的独立性、弹性、交互操作性(相互合作性,interoperability),诞生了STL。</p><p>STL(Standard Template Library,标准模板库)，是惠普实验室开发的一系列软件的统称。现在主要出现在 c++中，但是在引入 c++之前该技术已经存在很长时间了。</p><p>STL 从广义上分为: 容器(container) 算法(algorithm) 迭代器(iterator)。</p><p>容器和算法之间通过迭代器进行无缝连接。STL 几乎所有的代码都采用了模板类或者模板函数，这相比传统的由函数和类组成的库来说提供了更好的代码重用机会。</p><p>STL(Standard Template Library)标准模板库,在我们 c++标准程序库中隶属于 STL 的占到了 80%以上。</p><p>本文基于B站黑马程序员学习，视频地址</p><h2 id="STL六大组件"><a href="#STL六大组件" class="headerlink" title="STL六大组件"></a>STL六大组件</h2><ul><li>STL大体分为六大组件，分别是:容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</li><li>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。 </li><li>算法：各种常用的算法，如sort、find、copy、for_each等 </li><li>迭代器：扮演了容器与算法之间的胶合剂。 </li><li>仿函数：行为类似函数，可作为算法的某种策略。 </li><li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。 6. 空间配置器：负责空间的配置与管理</li><li>空间配置器：负责空间的配置与管理。</li></ul><p>其中最主要的三个是容器、算法还有迭代器</p><ol><li>容器：置物之所也 STL容器就是将运用最广泛的一些数据结构实现出来 常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等 这些容器分为序列式容器和关联式容器两种:</li></ol><p>​序列式容器:强调值的排序，序列式容器中的每个元素均有固定的位置。 </p><p>​关联式容器:二叉树结构，各元素之间没有 严格的物理上的顺序关系</p><p>​2.算法：问题之解法也 有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms) 算法分为:质变算法和非质变算法。 </p><p>​质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等 </p><p>​非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p><p>​3.迭代器：容器和算法之间粘合剂 提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。 每个容器都有自己专属的迭代器 迭代器使用非常类似于指针。</p><table><thead><tr><th>迭代器</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td>输入迭代器</td><td>提供对数据的只读访问</td><td>只读，支持++、==、!=</td></tr><tr><td>输出迭代器</td><td>提供对数据的只写访问</td><td>只写，支持++</td></tr><tr><td>前向迭代器</td><td>提供读写操作，并能向前推进迭代器</td><td>只读，支持++、==、!=</td></tr><tr><td>双向迭代器</td><td>提供读写操作，并能向前和向后操作</td><td>读写，支持++、–</td></tr><tr><td>随机访问迭代器</td><td>提供读写操作，并能以跳跃的方式访问容器的任意数据，是功能最强的迭代器</td><td>读写，支持++、–、+n、-n、&lt;、&lt;=、&gt;、&gt;=</td></tr></tbody></table><p>​常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p><h2 id="常用容器"><a href="#常用容器" class="headerlink" title="常用容器"></a>常用容器</h2><p>以vector容器为例写一个简单的程序</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;string&gt;using namespace std;class My{public:    My(string a,int b){        this-&gt;name=a;        this-&gt;age=b;    }    string name;    int age;};void test01(){    //存放自定义数据类型    vector&lt;My&gt; t;    My p1("aaa",10);    My p2("bbb",20);    My p3("ccc",30);    My p4("ddd",40);    My p5("eee",50);    //向容器中添加数据    t.push_back(p1);    t.push_back(p2);    t.push_back(p3);    t.push_back(p4);    t.push_back(p5);    //遍历数据    for(vector&lt;My&gt;::iterator it=t.begin();it!=t.end();it++){        cout&lt;&lt;"name "&lt;&lt;(*it).name&lt;&lt;"age "&lt;&lt;(*it).age&lt;&lt;endl;    }}int main(){    test01();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221143114814.png" alt="运行结果"></p><p>通过代码运行我们可以简单的理解为vector容器就是一个存放数组类型的容器。</p><h3 id="string容器"><a href="#string容器" class="headerlink" title="string容器"></a>string容器</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ul><li>string(); //创建一个空的字符串 例如: string str; </li><li>string(const char* s); //使用字符串s初始化 </li><li>string(const string&amp; str); //使用一个string对象初始化另一个string对象  <strong>拷贝构造函数</strong></li><li>string(int n, char c); //使用n个字符c初始化</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//构造函数#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;void test(){    //默认构造    string str1;    //字符串初始化    const char* str = "hello world";    string str2(str);    cout &lt;&lt;"str2="&lt;&lt;str2&lt;&lt;endl;    //拷贝构造函数    string str3(str2);    cout&lt;&lt;"str3="&lt;&lt;str3&lt;&lt;endl;    //n个字符初始化    string str4(10,'a');    cout&lt;&lt;"str4="&lt;&lt;str4&lt;&lt;endl;}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221145521831.png" alt="运行结果"></p><h4 id="字符串赋值"><a href="#字符串赋值" class="headerlink" title="字符串赋值"></a>字符串赋值</h4><ul><li>string&amp; operator=(const char* s); //char*类型字符串 赋值给当前的字符串 </li><li>string&amp; operator=(const string &amp;s); //把字符串s赋给当前的字符串 </li><li>string&amp; operator=(char c); //字符赋值给当前的字符串 </li><li>string&amp; assign(const char *s); //把字符串s赋给当前的字符串 </li><li>string&amp; assign(const char *s, int n); //把字符串s的前n个字符赋给当前的字符串 </li><li>string&amp; assign(const string &amp;s); //把字符串s赋给当前字符串 </li><li>string&amp; assign(int n, char c); //用n个字符c赋给当前字符</li></ul><p>示例</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//字符串赋值#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;void test(){    //char*类型字符串 赋值给当前的字符串     string str1;    str1="hello world";    cout &lt;&lt;"str1="&lt;&lt;str1&lt;&lt;endl;    //把字符串s赋给当前的字符串     string str2=str1;    cout &lt;&lt;"str2="&lt;&lt;str2&lt;&lt;endl;    //字符赋值给当前的字符串     string str3;    str3='a';    cout &lt;&lt;"str3="&lt;&lt;str3&lt;&lt;endl;    //把字符串s赋给当前的字符串     string str4;    str4.assign("hello STL");    cout &lt;&lt;"str4="&lt;&lt;str4&lt;&lt;endl;    //把字符串s的前n个字符赋给当前的字符串     string str5;    str5.assign(str1,5);    cout &lt;&lt;"str5="&lt;&lt;str5&lt;&lt;endl;    //把字符串s赋给当前字符串     string str6;    str6.assign(str1);    cout &lt;&lt;"str6="&lt;&lt;str6&lt;&lt;endl;    //用n个字符c赋给当前字符    string str7;    str7.assign(10,'w');    cout &lt;&lt;"str7="&lt;&lt;str7&lt;&lt;endl;}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221152446912.png" alt="运行结果"></p><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><ul><li>string&amp; operator+=(const char* str); //重载+=操作符 </li><li>string&amp; operator+=(const char c); //重载+=操作符 </li><li>string&amp; operator+=(const string&amp; str); //重载+=操作符 </li><li>string&amp; append(const char *s); //把字符串s连接到当前字符串结尾 </li><li>string&amp; append(const char *s, int n); //把字符串s的前n个字符连接到当前字符串结尾 </li><li>string&amp; append(const string &amp;s); //同operator+=(const string&amp; str) </li><li>string&amp; append(const string &amp;s, int pos, int n); //字符串s中从pos开始的n个字符连接到字符串结尾</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//字符串拼接#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;void test(){    //重载+=操作符 1    string str1;    str1 = "I ";    str1+="Love game";    cout &lt;&lt;"str1="&lt;&lt;str1&lt;&lt;endl;    //重载+=操作符 2    str1+='.';    cout &lt;&lt;"str1="&lt;&lt;str1&lt;&lt;endl;    //重载+=操作符 3    string str2;    str2 = " No,you don't";    str1+=str2;    cout &lt;&lt;"str1="&lt;&lt;str1&lt;&lt;endl;    //把字符串s连接到当前字符串结尾     str1.append(" ....");    cout &lt;&lt;"str1="&lt;&lt;str1&lt;&lt;endl;    //把字符串s的前n个字符连接到当前字符串结尾     str1.append(" bey sdfsdfasdhf",4);    cout &lt;&lt;"str1="&lt;&lt;str1&lt;&lt;endl;    //同operator+=(const string&amp; str)     string str3;    str3 = " aaaa";    str1.append(str3);    cout &lt;&lt;"str1="&lt;&lt;str1&lt;&lt;endl;    //字符串s中从pos开始的n个字符连接到字符串结尾 */    str1.append(str3,0,3);    cout &lt;&lt;"str1="&lt;&lt;str1&lt;&lt;endl;}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221153634731.png" alt="运行结果"></p><h4 id="字符串查找替换"><a href="#字符串查找替换" class="headerlink" title="字符串查找替换"></a>字符串查找替换</h4><ul><li>int find(const string&amp; str, int pos = 0) const; //查找str第一次出现位置,从pos开始查找 </li><li>int find(const char* s, int pos = 0) const; //查找s第一次出现位置,从pos开始查找 </li><li>int find(const char* s, int pos, int n) const; //从pos位置查找s的前n个字符第一次位置 </li><li>int find(const char c, int pos = 0) const; //查找字符c第一次出现位置 </li><li>int rfind(const string&amp; str, int pos = npos) const; //查找str最后一次位置,从pos开始查找 </li><li>int rfind(const char* s, int pos = npos) const; //查找s最后一次出现位置,从pos开始查找 </li><li>int rfind(const char* s, int pos, int n) const; //从pos查找s的前n个字符最后一次位置 </li><li>int rfind(const char c, int pos = 0) const; //查找字符c最后一次出现位置 </li><li>string&amp; replace(int pos, int n, const string&amp; str); //替换从pos开始n个字符为字符串str </li><li>string&amp; replace(int pos, int n,const char* s); //替换从pos开始的n个字符为字符串s</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;//查找void test01(){    //使用find    string str = "abcdefg_de";    if(str.find("de")==-1){        cout &lt;&lt;"find erro"&lt;&lt;endl;    }else{        cout &lt;&lt;"find success,this point is "&lt;&lt;str.find("de")&lt;&lt;endl;    }    if(str.find("dg")==-1){        cout &lt;&lt;"find erro"&lt;&lt;endl;    }else{        cout &lt;&lt;"find success,this point is "&lt;&lt;str.find("de")&lt;&lt;endl;    }    //使用rfind    if(str.rfind("de")==-1){        cout &lt;&lt;"rfind erro"&lt;&lt;endl;    }else{        cout &lt;&lt;"rfind success,this point is "&lt;&lt;str.rfind("de")&lt;&lt;endl;    }    if(str.rfind("dg")==-1){        cout &lt;&lt;"rfind erro"&lt;&lt;endl;    }else{        cout &lt;&lt;"rfind success,this point is "&lt;&lt;str.rfind("de")&lt;&lt;endl;    }    //find是从左向右找，rfind是从右往左找}//替换void test02(){    string str = "abcdefg";    str.replace(1,3,"1111");//把一号位置后面三个位置替换为1111    cout &lt;&lt;"str="&lt;&lt;str&lt;&lt;endl;}int main(){    test01();    test02();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221160303435.png" alt="运行结果"></p><h4 id="字符串比较和存取"><a href="#字符串比较和存取" class="headerlink" title="字符串比较和存取"></a>字符串比较和存取</h4><ul><li>int compare(const string &amp;s) const; //与字符串s比较 </li><li>int compare(const char *s) const; //与字符串s比较</li><li>char&amp; operator[] (int n); //通过[]方式取字符 </li><li>char&amp; at(int n); //通过at方法获取字符</li></ul><p>示例</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;//字符串比较void test01(){    string str1 ="hello";    string str2 ="hello";    if(str1.compare(str2)==0){        cout &lt;&lt;"str1 == str2"&lt;&lt;endl;    }else{        cout &lt;&lt;"str1!=str2"&lt;&lt;endl;    }}//字符串存取void test02(){    //通过[]方式取字符     string str ="hello";    for(int i =0; i&lt;str.size();i++){         cout &lt;&lt;str[i]&lt;&lt;" ";    }    cout &lt;&lt; endl;    //通过at方法获取字符    for(int i =0; i&lt;str.size();i++){         cout &lt;&lt;str.at(i)&lt;&lt;" ";    }    cout &lt;&lt; endl;    //修改字符串中的字符    str[0]='x';    str.at(1)='m';    cout &lt;&lt;"str="&lt;&lt;str&lt;&lt;endl;}int main(){    test01();    cout &lt;&lt;"-------------"&lt;&lt;endl;    test02();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221163442897.png" alt="运行结果"></p><h4 id="字符串插入与删除"><a href="#字符串插入与删除" class="headerlink" title="字符串插入与删除"></a>字符串插入与删除</h4><ul><li>string&amp; insert(int pos, const char* s); //插入字符串 </li><li>string&amp; insert(int pos, const string&amp; str); //插入字符串 </li><li>string&amp; insert(int pos, int n, char c); //在指定位置插入n个字符c </li><li>string&amp; erase(int pos, int n = npos); //删除从Pos开始的n个字符</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;//插入字符串void test01(){    string str1 = "hello ";    string str2 = "world";    str1.insert(6,str2);    cout &lt;&lt;"str1="&lt;&lt;str1&lt;&lt;endl;    //在指定位置插入n个字符c     str1.insert(11,1,' ');    str1.insert(12,3,'m');    cout &lt;&lt;"str1="&lt;&lt;str1&lt;&lt;endl;}//删除字符串void test02(){    string str = "asdjfhldskjhf";    str.erase(3,5);    cout &lt;&lt;"str="&lt;&lt;str&lt;&lt;endl;}int main(){    test01();    test02();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221165257432.png" alt="运行结果"></p><h4 id="字符串子串"><a href="#字符串子串" class="headerlink" title="字符串子串"></a>字符串子串</h4><ul><li>string substr(int pos = 0, int n = npos) const; //返回由pos开始的n个字符组成的字符串</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;string&gt;#include&lt;iostream&gt;using namespace std;//截取用户名void test(){    string emil = "zhangfsdf@qq.com";    int pos=emil.find("@");    string emilUser = emil.substr(0,pos);    cout &lt;&lt;"emilUser is "&lt;&lt;emilUser&lt;&lt;endl;}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221170025796.png" alt="运行结果"></p><h3 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h3><p>vector数据结构和数组非常相似，也称为单端数组，不同之处在于数组是静态空间，而vector可以动态扩展</p><p><strong>动态扩展并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</strong></p><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221171523525.png"></p><h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h4><ul><li>vector v; //采用模板实现类实现，默认构造函数 </li><li>vector(v.begin(), v.end()); //将v[begin(), end())区间中的元素拷贝给本身</li><li>vector(n, elem); //构造函数将n个elem拷贝给本身</li><li>vector(const vector &amp;vec); //拷贝构造函数</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;void printVector(vector&lt;int&gt;&amp; t){    for(vector&lt;int&gt;::iterator it=t.begin();it!=t.end();it++){        cout &lt;&lt;(*it)&lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    //采用模板实现类实现，默认构造函数     vector&lt;int&gt;a;    for(int i=0;i&lt;10;i++){        a.push_back(i);    }    printVector(a);    //将v[begin(), end())区间中的元素拷贝给本身    vector&lt;int&gt;b(a.begin(),a.end());    printVector(b);    //构造函数将n个elem拷贝给本身    vector&lt;int&gt;c(10,100);    printVector(c);    //拷贝构造函数    vector&lt;int&gt;d(c);    printVector(d);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221172513923.png" alt="运行结果"></p><h4 id="vector赋值"><a href="#vector赋值" class="headerlink" title="vector赋值"></a>vector赋值</h4><ul><li>vector&amp; operator=(const vector &amp;vec); //重载等号操作符</li><li>assign(beg, end); //将[beg, end)区间中的数据拷贝赋值给本身</li><li>assign(n, elem); //将n个elem拷贝赋值给本身</li></ul><p>示例</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;void printVector(vector&lt;int&gt;&amp; t){    for(vector&lt;int&gt;::iterator it=t.begin();it!=t.end();it++){        cout &lt;&lt;(*it)&lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    vector&lt;int&gt;a;    for(int i=0;i&lt;10;i++){        a.push_back(i);    }    printVector(a);    //重载等号操作符    vector&lt;int&gt;b;    b=a;    printVector(b);    //将[beg, end)区间中的数据拷贝赋值给本身    vector&lt;int&gt;c;    c.assign(b.begin(),b.end());    printVector(c);    //将n个elem拷贝赋值给本身    vector&lt;int&gt;d;    d.assign(10,100);    printVector(d);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221173155571.png" alt="运行结果"></p><h4 id="vector容量和大小"><a href="#vector容量和大小" class="headerlink" title="vector容量和大小"></a>vector容量和大小</h4><ul><li>empty(); //判断容器是否为空 </li><li>capacity(); //容器的容量 </li><li>size(); //返回容器中元素的个数 </li><li>resize(int num); //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。 //如果容器变短，则末尾超出容器长度的元素被删除</li><li>resize(int num, elem); //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。 //如果容器变短，则末尾超出容器长度的元素被删除</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;void printVector(vector&lt;int&gt;&amp; t){    for(vector&lt;int&gt;::iterator it=t.begin();it!=t.end();it++){        cout&lt;&lt;(*it)&lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    vector&lt;int&gt;a;    for(int i = 0;i&lt;10;i++){        a.push_back(i);    }    printVector(a);    //如果是空的    if(a.empty()){        cout&lt;&lt;"a is empty"&lt;&lt;endl;    }else{        cout&lt;&lt;"a is not empty "&lt;&lt;endl;        cout&lt;&lt;"a capacity is "&lt;&lt;a.capacity()&lt;&lt;endl;        cout&lt;&lt;"a size is "&lt;&lt;a.size()&lt;&lt;endl;    }    a.resize(15,1);//重设size大小，多余的空间用1填充    printVector(a);    a.resize(5);//设置的比原来小，把后面多的删除了    printVector(a);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221174903311.png" alt="运行结果"></p><h4 id="vector插入和删除"><a href="#vector插入和删除" class="headerlink" title="vector插入和删除"></a>vector插入和删除</h4><ul><li>push_back(ele); //尾部插入元素ele </li><li>pop_back(); //删除最后一个元素 </li><li>insert(const_iterator pos, ele); //迭代器指向位置pos插入元素ele </li><li>insert(const_iterator pos, int count,ele); //迭代器指向位置pos插入count个元素ele </li><li>erase(const_iterator pos); //删除迭代器指向的元素 </li><li>erase(const_iterator start, const_iterator end); //删除迭代器从start到end之间的元素 </li><li>clear(); //删除容器中所有元素</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;void printVector(vector&lt;int&gt;&amp; t){    for(vector&lt;int&gt;::iterator it=t.begin();it!=t.end();it++){        cout &lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    vector&lt;int&gt;a;    //尾部插入元素ele     a.push_back(10);    a.push_back(20);    a.push_back(30);    a.push_back(40);    a.push_back(50);    //遍历    printVector(a);    //删除最后一个元素     a.pop_back();    printVector(a);    //迭代器指向位置pos插入元素ele    a.insert(a.begin()+2,3); //在第二个位置插入一个3    printVector(a);    //迭代器指向位置pos插入count个元素ele     a.insert(a.begin(),3,100);//在开始位置插入三个100    printVector(a);    //删除迭代器指向的元素     a.erase(a.begin());    printVector(a);    //删除迭代器从start到end之间的元素     a.erase(a.begin(),a.begin()+2);    printVector(a);    //删除容器中所有元素    a.clear();    if(a.empty()){        cout&lt;&lt;"a is empty"&lt;&lt;endl;    }else{        cout&lt;&lt;"a is not empty "&lt;&lt;endl;        cout&lt;&lt;"a capacity is "&lt;&lt;a.capacity()&lt;&lt;endl;        cout&lt;&lt;"a size is "&lt;&lt;a.size()&lt;&lt;endl;    }}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221221180445309.png" alt="运行结果"></p><h4 id="vector数据存取"><a href="#vector数据存取" class="headerlink" title="vector数据存取"></a>vector数据存取</h4><ul><li>at(int idx); //返回索引idx所指的数据 </li><li>operator[]; //返回索引idx所指的数据 </li><li>front(); //返回容器中第一个数据元素 </li><li>back(); //返回容器中最后一个数据元素</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;void test(){    vector&lt;int&gt;v;    for(int i;i&lt;v.size();i++){        v.push_back(i);    }    //返回索引idx所指的数据    for(int i = 0; i&lt;10;i++){        cout &lt;&lt;v.at(i)&lt;&lt; " ";    }    cout &lt;&lt; endl;    //返回索引idx所指的数据    for(int i = 0; i&lt;10;i++){        cout &lt;&lt;v[i]&lt;&lt; " ";    }     cout &lt;&lt; endl;    //返回容器中第一个数据元素    cout &lt;&lt;"第一个数据元素 "&lt;&lt;v.front()&lt;&lt;endl;    //返回容器中最后一个数据元素    cout &lt;&lt;"最后一个数据元素 "&lt;&lt;v.back()&lt;&lt;endl;}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vector互换容器"><a href="#vector互换容器" class="headerlink" title="vector互换容器"></a>vector互换容器</h4><p>实现两个容器内元素进行互换</p><ul><li>swap(vec); // 将vec与本身的元素互换</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;void printVector(vector&lt;int&gt; t){    for(vector&lt;int&gt;::iterator it = t.begin();it!=t.end();it++){        cout &lt;&lt; *it &lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    vector&lt;int&gt;a;    vector&lt;int&gt;b;    for(int i = 0;i&lt;10;i++){        a.push_back(i);    }    for(int i = 10;i&gt;0;i--){        b.push_back(i);    }    cout &lt;&lt;"交换前"&lt;&lt;endl;    printVector(a);    printVector(b);    cout &lt;&lt;"交换后"&lt;&lt;endl;    a.swap(b);    printVector(a);    printVector(b);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221222164440087.png" alt="运行结果"></p><h4 id="vector预留空间"><a href="#vector预留空间" class="headerlink" title="vector预留空间"></a>vector预留空间</h4><ul><li>reserve(int len); //容器预留len个元素长度，预留位置不初始化，元素不可访问</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;//不预留空间，看看空间开辟次数void test01(){    vector&lt;int&gt;a;    int num=0;    int *p = NULL;    for(int i = 0;i&lt;100000;i++){        a.push_back(i);        if(p!=&amp;a[0]){            p=&amp;a[0];            num++;//因为每次重新开辟，头地址都会换位置，可以这么统计开辟次数        }    }    cout &lt;&lt;"开辟次数:"&lt;&lt;num&lt;&lt;endl;}//预留空间void test02(){    vector&lt;int&gt;a;    a.reserve(100000);    int num=0;    int *p = NULL;    for(int i = 0;i&lt;100000;i++){        a.push_back(i);        if(p!=&amp;a[0]){            p=&amp;a[0];            num++;        }    }    cout &lt;&lt;"开辟次数:"&lt;&lt;num&lt;&lt;endl;}int main(){    test01();    test02();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221222165811098.png" alt="运行结果"></p><h3 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h3><p>双端数组，可以对头端进行插入删除操作</p><p>deque与vector的区别</p><ul><li>vector对于头部的插入删除效率低，数据量越大，效率越低 deque相对而言，</li><li>对头部的插入删除速度回比vector快 </li><li>vector访问元素时的速度会比deque快,这和两者内部实现有关</li></ul><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221222170343794.png"></p><p><strong>deque内部有个中控器，维护每段缓冲区中的内容，缓冲区中存放真实数据 中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间</strong></p><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221222170442527.png"></p><h4 id="deque构造函数"><a href="#deque构造函数" class="headerlink" title="deque构造函数"></a>deque构造函数</h4><ul><li>deque deqT; //默认构造形式 </li><li>deque(beg, end); //构造函数将[beg, end)区间中的元素拷贝给本身</li><li>deque(n, elem); //构造函数将n个elem拷贝给本身</li><li>deque(const deque &amp;deq); //拷贝构造函数</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;deque&gt;using namespace std;void printDeque(const deque&lt;int&gt;&amp; t){    for(deque&lt;int&gt;::const_iterator it = t.begin(); it!=t.end();it++){        cout &lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    //默认构造形式    deque&lt;int&gt;a;    for(int i = 0; i &lt; 10; i++){        a.push_back(i);    }    printDeque(a);    //构造函数将[beg, end)区间中的元素拷贝给本身    deque&lt;int&gt;b(a.begin()+5,a.end());    printDeque(b);    //构造函数将n个elem拷贝给本身    deque&lt;int&gt;c(10,100);    printDeque(c);    //拷贝构造函数    deque&lt;int&gt;d(c);    printDeque(d);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与vector的构造基本一致</p><h4 id="deque赋值操作"><a href="#deque赋值操作" class="headerlink" title="deque赋值操作"></a>deque赋值操作</h4><ul><li>deque&amp; operator=(const deque &amp;deq); //重载等号操作符 </li><li>assign(beg, end); //将[beg, end)区间中的数据拷贝赋值给本身</li><li>assign(n, elem); //将n个elem拷贝赋值给本身</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;deque&gt;using namespace std;void printDeque(const deque&lt;int&gt;&amp; t){    for(deque&lt;int&gt;::const_iterator it = t.begin(); it!=t.end();it++){        cout &lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    deque&lt;int&gt;a;    for(int i = 0; i &lt; 10; i++){        a.push_back(i);    }    printDeque(a);    //重载等号操作符     deque&lt;int&gt;b;    b=a;    printDeque(b);    //将[beg, end)区间中的数据拷贝赋值给本身    deque&lt;int&gt;c;    c.assign(b.begin()+5,b.end()-2);    printDeque(c);    //将n个elem拷贝赋值给本身    deque&lt;int&gt;d;    d.assign(10,100);    printDeque(d);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221222172325690.png" alt="运行结果"></p><p>与vector基本相同</p><h4 id="deque大小操作"><a href="#deque大小操作" class="headerlink" title="deque大小操作"></a>deque大小操作</h4><ul><li>deque.empty(); //判断容器是否为空</li><li>deque.size(); //返回容器中元素的个数 </li><li>deque.resize(num); //重新指定容器的长度为num,若容器变长，则以默认值填充新位置。 //如果容器变短，则末尾超出容器长度的元素被删除 </li><li>deque.resize(num, elem); //重新指定容器的长度为num,若容器变长，则以elem值填充新位置。 //如果容器变短，则末尾超出容器长度的元素被删除</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;deque&gt;using namespace std;void printDeque(const deque&lt;int&gt;&amp; t){    for(deque&lt;int&gt;::const_iterator it = t.begin(); it!=t.end();it++){        cout &lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    //判断容器是否为空    deque&lt;int&gt;a;    deque&lt;int&gt;b;    for(int i = 0; i &lt; 10; i++){        a.push_back(i);    }    if(a.empty()){        cout &lt;&lt;"这个容器是空的"&lt;&lt;endl;    }else{        cout &lt;&lt;"这个容器不是空的且";        //返回容器中元素的个数         cout &lt;&lt; "这个容器的size为: "&lt;&lt;a.size()&lt;&lt;endl;    }    if(b.empty()){        cout &lt;&lt;"这个容器是空的"&lt;&lt;endl;    }else{        cout &lt;&lt;"这个容器不是空的"&lt;&lt;endl;        //返回容器中元素的个数         cout &lt;&lt; "这个容器的size为: "&lt;&lt;a.size()&lt;&lt;endl;    }    //重新指定容器的长度为num,若容器变长，则以默认值填充新位置。 //如果容器变短，则末尾超出容器长度的元素被删除     a.resize(15);    printDeque(a);    a.resize(5);    printDeque(a);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221222173220277.png" alt="运行结果"></p><p><strong>deque没有容量的概念</strong></p><h4 id="deque-插入和删除"><a href="#deque-插入和删除" class="headerlink" title="deque 插入和删除"></a>deque 插入和删除</h4><p>两端插入操作：</p><ul><li>push_back(elem); //在容器尾部添加一个数据 </li><li>push_front(elem); //在容器头部插入一个数据 </li><li>pop_back(); //删除容器最后一个数据 </li><li>pop_front(); //删除容器第一个数据</li></ul><p>指定位置操作：</p><ul><li>insert(pos,elem); //在pos位置插入一个elem元素的拷贝，返回新数据的位置。 </li><li>insert(pos,n,elem); //在pos位置插入n个elem数据，无返回值。 </li><li>insert(pos,beg,end); //在pos位置插入[beg,end)区间的数据，无返回值。 </li><li>clear(); //清空容器的所有数据 </li><li>erase(beg,end); //删除[beg,end)区间的数据，返回下一个数据的位置。 </li><li>erase(pos); //删除pos位置的数据，返回下一个数据的位置。</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;deque&gt;using namespace std;void printDeque(const deque&lt;int&gt;&amp; t){    for(deque&lt;int&gt;::const_iterator it = t.begin(); it!=t.end();it++){        cout &lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;}void test01(){    //判断容器是否为空    deque&lt;int&gt;a;    deque&lt;int&gt;b;    a.push_back(10);    a.push_back(20);    a.push_back(30);    a.push_back(40);    a.push_back(50);    cout &lt;&lt;"在容器a尾部添加一个数据"&lt;&lt;endl;    printDeque(a);    b.push_front(10);    b.push_front(20);    b.push_front(30);    b.push_front(40);    b.push_front(50);    cout &lt;&lt;"在容器b头部插入一个数据"&lt;&lt;endl;    printDeque(b);    cout &lt;&lt;"删除容器a最后一个数据"&lt;&lt;endl;    a.pop_back();    printDeque(a);    cout &lt;&lt;"删除容器d第一个数据"&lt;&lt;endl;    b.pop_front();    printDeque(b);}/* insert(pos,elem); //在pos位置插入一个elem元素的拷贝，返回新数据的位置。insert(pos,n,elem); //在pos位置插入n个elem数据，无返回值。insert(pos,beg,end); //在pos位置插入[beg,end)区间的数据，无返回值。clear(); //清空容器的所有数据erase(beg,end); //删除[beg,end)区间的数据，返回下一个数据的位置。erase(pos); //删除pos位置的数据，返回下一个数据的位置。 */void test02(){    //判断容器是否为空    deque&lt;int&gt;a;    deque&lt;int&gt;b;    a.push_back(10);    a.push_back(20);    a.push_back(30);    a.push_back(40);    a.push_back(50);    b.push_front(1);    b.push_front(2);    b.push_front(3);    b.push_front(4);    b.push_front(5);    cout &lt;&lt;"在pos位置插入一个elem元素的拷贝"&lt;&lt;endl;    a.insert(a.begin(),100);    printDeque(a);    cout&lt;&lt;"在pos位置插入n个elem数据"&lt;&lt;endl;    a.insert(a.begin(),3,10);    printDeque(a);    cout&lt;&lt;"在pos位置插入[beg,end)区间的数据"&lt;&lt;endl;    a.insert(a.begin(),b.begin(),b.end());    printDeque(a);    cout&lt;&lt;"删除[beg,end)区间的数据"&lt;&lt;endl;    a.erase(a.begin()+1,a.begin()+4);    printDeque(a);    cout &lt;&lt;"删除pos位置的数据"&lt;&lt;endl;    a.erase(a.end());    printDeque(a);}int main(){    test01();    test02();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221222175701643.png" alt="运行结果"></p><h4 id="deque-数据存取"><a href="#deque-数据存取" class="headerlink" title="deque 数据存取"></a>deque 数据存取</h4><ul><li>at(int idx); //返回索引idx所指的数据 </li><li>operator[]; //返回索引idx所指的数据 </li><li>front(); //返回容器中第一个数据元素</li><li>back(); //返回容器中最后一个数据元素</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;deque&gt;using namespace std;void printDeque(const deque&lt;int&gt;&amp; t){    for(deque&lt;int&gt;::const_iterator it = t.begin(); it!=t.end();it++){        cout &lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    //默认构造形式    deque&lt;int&gt;a;    for(int i = 0; i &lt; 10; i++){        a.push_back(i);    }    cout &lt;&lt;"返回索引idx所指的数据 at(5)="&lt;&lt;a.at(5)&lt;&lt;" a[4]="&lt;&lt;a[4]&lt;&lt;endl;    cout &lt;&lt;"返回容器中第一个数据元素 a.front()="&lt;&lt;a.front()&lt;&lt;endl;    cout &lt;&lt;"返回容器中最后一个数据元素 a.back()="&lt;&lt;a.back()&lt;&lt;endl;    printDeque(a);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221222180416635.png" alt="运行结果"></p><h4 id="deque-排序"><a href="#deque-排序" class="headerlink" title="deque 排序"></a>deque 排序</h4><p>利用算法实现对deque容器进行排序</p><ul><li>sort(iterator beg, iterator end) //对beg和end区间内元素进行排序</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;deque&gt;#include &lt;algorithm&gt;using namespace std;void printDeque(const deque&lt;int&gt;&amp; t){    for(deque&lt;int&gt;::const_iterator it = t.begin(); it!=t.end();it++){        cout &lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    //默认构造形式    deque&lt;int&gt;a;    a.push_back(12);    a.push_back(43);    a.push_back(21);    a.push_back(1);    a.push_back(90);    a.push_back(3);    printDeque(a);    sort(a.begin(),a.end());    printDeque(a);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sort算法非常实用，使用时包含头文件 algorithm即可</p><h3 id="stack容器"><a href="#stack容器" class="headerlink" title="stack容器"></a>stack容器</h3><p>stack是一种先进后出(First In Last Out,FILO)的数据结构，它只有一个出口</p><ul><li><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221222183044923.png"></li><li>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为 </li><li>栈中进入数据称为 — 入栈 push </li><li>栈中弹出数据称为 — 出栈 pop</li></ul><h4 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h4><p>构造函数</p><ul><li>stack stk; //stack采用模板类实现， stack对象的默认构造形式 </li><li>stack(const stack &amp;stk); //拷贝构造函数</li></ul><p>赋值操作：</p><ul><li>stack&amp; operator=(const stack &amp;stk); //重载等号操作符</li></ul><p>数据存取：</p><ul><li>push(elem); //向栈顶添加元素 </li><li>pop(); //从栈顶移除第一个元素</li><li>top(); //返回栈顶元素</li></ul><p>大小操作：</p><ul><li>empty(); //判断堆栈是否为空</li><li>size(); //返回栈的大小</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;stack&gt;using namespace std;void test(){    //构造函数创建    stack&lt;int&gt;a;    //数据存取，向栈中添加元素，叫做 压栈 入栈    a.push(10);    a.push(20);    a.push(30);    a.push(40);    a.push(50);    cout &lt;&lt;"这个栈的大小是:"&lt;&lt;a.size()&lt;&lt;endl;    //栈是不能遍历的    while(!a.empty()){        //查看栈顶数据        cout &lt;&lt;"栈顶数据是:"&lt;&lt;a.top()&lt;&lt;endl;        //出栈        a.pop();    }    cout &lt;&lt;"这个栈的大小是:"&lt;&lt;a.size()&lt;&lt;endl;}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221222183758702.png"></p><h3 id="queue容器"><a href="#queue容器" class="headerlink" title="queue容器"></a>queue容器</h3><p>Queue是一种先进先出(First In First Out,FIFO)的数据结构，它有两个出口</p><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221222184449640.png"></p><ul><li>队列容器允许从一端新增元素，从另一端移除元素 </li><li>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为 </li><li>队列中进数据称为 — 入队 push </li><li>队列中出数据称为 — 出队 pop</li></ul><h4 id="常用接口-1"><a href="#常用接口-1" class="headerlink" title="常用接口"></a>常用接口</h4><p>构造函数：</p><ul><li>queue que; //queue采用模板类实现，queue对象的默认构造形式 </li><li>queue(const queue &amp;que); //拷贝构造函数</li></ul><p>赋值操作：</p><ul><li>queue&amp; operator=(const queue &amp;que); //重载等号操作符</li></ul><p>数据存取：</p><ul><li>push(elem); //往队尾添加元素 </li><li>pop(); //从队头移除第一个元素</li><li>back(); //返回最后一个元素 </li><li>front(); //返回第一个元素</li></ul><p>大小操作：</p><ul><li>empty(); //判断堆栈是否为空 </li><li>size(); //返回栈的大小</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;queue&gt;using namespace std;class Person{public:    friend void test();    Person(int age,string name){        this-&gt;age=age;        this-&gt;name=name;    }private:    int age;    string name;};void test(){    //构造函数    queue&lt;Person&gt;a;    //数据存取    Person p1(19,"张三");    Person p2(20,"李四");    Person p3(25,"王二");    Person p4(18,"刘五");    a.push(p1);    a.push(p2);    a.push(p3);    a.push(p4);    cout &lt;&lt;"这个队列大小是:"&lt;&lt;a.size()&lt;&lt;endl;    while(!a.empty()){        cout&lt;&lt;"排头的名字和年龄分别是"&lt;&lt;a.front().name&lt;&lt;" "&lt;&lt;a.front().age&lt;&lt;endl;        cout&lt;&lt;"排尾的名字和年龄分别是"&lt;&lt;a.back().name&lt;&lt;" "&lt;&lt;a.back().age&lt;&lt;endl;        //出队        a.pop();    }    cout &lt;&lt;"这个队列大小是:"&lt;&lt;a.size()&lt;&lt;endl;}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221222185626947.png"></p><h3 id="list容器"><a href="#list容器" class="headerlink" title="list容器"></a>list容器</h3><p>链表（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p><p><strong>链表的组成：链表由一系列结点组成</strong></p><p><strong>结点的组成：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域</strong></p><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223150534966.png" alt="双向循环链表"></p><p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，<strong>属于双向迭代器</strong></p><p>list的优缺点：</p><ul><li>采用动态存储分配，不会造成内存浪费和溢出 </li><li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li><li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</li></ul><h4 id="list构造函数"><a href="#list构造函数" class="headerlink" title="list构造函数"></a>list构造函数</h4><ul><li>list lst; //list采用采用模板类实现,对象的默认构造形式：</li><li>list(beg,end); //构造函数将[beg, end)区间中的元素拷贝给本身</li><li>list(n,elem); //构造函数将n个elem拷贝给本身</li><li>list(const list &amp;lst); //拷贝构造函数</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;list&gt;using namespace std;void printList(const list&lt;int&gt;&amp; t){    for(list&lt;int&gt;::const_iterator it = t.begin();it!=t.end();it++){        cout &lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){        list&lt;int&gt;a;    a.push_back(10);    a.push_back(20);    a.push_back(30);    a.push_back(40);    a.push_back(50);    cout&lt;&lt;"list采用采用模板类实现,对象的默认构造形式："&lt;&lt;endl;    printList(a);    a.pop_front();    a.pop_back();    cout &lt;&lt;"构造函数将[beg, end)区间中的元素拷贝给本身"&lt;&lt;endl;    list&lt;int&gt;b(a.begin(),a.end());    printList(b);    cout &lt;&lt;"构造函数将n个elem拷贝给本身"&lt;&lt;endl;    list&lt;int&gt;c(5,10);    printList(c);    c.pop_back();    c.pop_front();    cout &lt;&lt;"拷贝构造函数"&lt;&lt;endl;    list&lt;int&gt;d(c);    printList(d);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223151604960.png" alt="运行结果"></p><h4 id="list-赋值和交换"><a href="#list-赋值和交换" class="headerlink" title="list 赋值和交换"></a>list 赋值和交换</h4><ul><li>给list容器进行赋值，以及交换list容器</li><li>assign(beg, end); //将[beg, end)区间中的数据拷贝赋值给本身</li><li>assign(n, elem); //将n个elem拷贝赋值给本身</li><li>list&amp; operator=(const list &amp;lst); //重载等号操作符 </li><li>swap(lst); //将lst与本身的元素互换</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;list&gt;using namespace std;void printList(const list&lt;int&gt;&amp; t){    for(list&lt;int&gt;::const_iterator it = t.begin();it!=t.end();it++){        cout &lt;&lt;*it &lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    list&lt;int&gt;a;    for(int i = 0;i&lt;10;i++){        a.push_back(i);    }    cout &lt;&lt;"将[beg, end)区间中的数据拷贝赋值给本身。"&lt;&lt;endl;    list&lt;int&gt;b;    b.assign(a.begin(),a.end());    printList(b);    cout &lt;&lt;"将n个elem拷贝赋值给本身。"&lt;&lt;endl;    list&lt;int&gt;c(10,5);    printList(c);    cout &lt;&lt;"重载等号操作符"&lt;&lt;endl;    a.pop_back();    a.pop_front();    list&lt;int&gt;d;    d=a;    printList(d);    cout &lt;&lt;"将lst与本身的元素互换"&lt;&lt;endl;    d.swap(b);    printList(d);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223152459311.png" alt="运行结果"></p><h4 id="list-大小操作"><a href="#list-大小操作" class="headerlink" title="list 大小操作"></a>list 大小操作</h4><ul><li>size(); //返回容器中元素的个数 </li><li>empty(); //判断容器是否为空 </li><li>resize(num); //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。 //如果容器变短，则末尾超出容器长度的元素被删除。 </li><li>resize(num, elem); //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。 //如果容器变短，则末尾超出容器长度的元素被删除。</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;list&gt;using namespace std;void printList(const list&lt;int&gt;&amp; t){    for(list&lt;int&gt;::const_iterator it = t.begin();it!=t.end();it++){        cout &lt;&lt;*it &lt;&lt;" ";    }    cout &lt;&lt; endl;}void if_empty(const list&lt;int&gt;&amp; t){    if(t.empty()){        cout &lt;&lt;"这个容器是空的"&lt;&lt;endl;    }else{        cout &lt;&lt;"这个容器不是空的,其中的元素个数为:"&lt;&lt;t.size()&lt;&lt;endl;    }}void test(){    list&lt;int&gt;a;    list&lt;int&gt;b;    for(int i = 0;i&lt;10;i++){        a.push_back(i);    }    if_empty(a);    if_empty(b);    cout &lt;&lt;"重新指定容器的长度为num,重载版本"&lt;&lt;endl;    b.resize(10,1);    printList(b);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223153128424.png" alt="运行结果"></p><h4 id="list-插入和删除"><a href="#list-插入和删除" class="headerlink" title="list 插入和删除"></a>list 插入和删除</h4><ul><li>push_back(elem);//在容器尾部加入一个元素 </li><li>pop_back();//删除容器中最后一个元素 </li><li>push_front(elem);//在容器开头插入一个元素 </li><li>pop_front();//从容器开头移除第一个元素 </li><li>insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置</li><li>insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值</li><li>insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值</li><li>clear();//移除容器的所有数据</li><li>erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置</li><li>erase(pos);//删除pos位置的数据，返回下一个数据的位置</li><li>remove(elem);//删除容器中所有与elem值匹配的元素</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;list&gt;using namespace std;void printList(const list&lt;int&gt;&amp; t){    for(list&lt;int&gt;::const_iterator it = t.begin();it!=t.end();it++){        cout &lt;&lt;*it &lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    list&lt;int&gt;a;    list&lt;int&gt;b;    a.push_back(10);    a.push_back(20);    a.push_back(30);    a.push_back(40);    a.push_back(50);    cout &lt;&lt;"在a容器尾部加入一个元素 "&lt;&lt;endl;    printList(a);    cout &lt;&lt;"删除a容器中最后一个元素 "&lt;&lt;endl;    a.pop_back();    printList(a);    b.push_front(10);    b.push_front(20);    b.push_front(30);    b.push_front(40);    b.push_front(50);    cout &lt;&lt;"在容器b开头插入一个元素 "&lt;&lt;endl;    printList(b);    cout &lt;&lt;"删除容器b中第一个元素"&lt;&lt;endl;    b.pop_front();    printList(b);    cout &lt;&lt;"在pos位置插elem元素的拷贝"&lt;&lt;endl;    list&lt;int&gt;::iterator it = a.begin();    a.insert(++it,114514);    printList(a);    cout &lt;&lt;"删除容器中所有与elem值匹配的元素"&lt;&lt;endl;    b.remove(30);    printList(b);    cout &lt;&lt;"输入想删除pos位置的数据"&lt;&lt;endl;    int n;    cin&gt;&gt;n;    it=a.begin();    for(int i=0;i&lt;n-1;i++){        it++;    }    a.erase(it);    printList(a);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223154821444.png" alt="运行结果"></p><h4 id="list-数据存取"><a href="#list-数据存取" class="headerlink" title="list 数据存取"></a>list 数据存取</h4><ul><li>front(); //返回第一个元素</li><li>back(); //返回最后一个元素</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;list&gt;using namespace std;void test(){    list&lt;int&gt;a;    a.push_back(10);    a.push_back(20);    a.push_back(30);    a.push_back(40);    a.push_back(50);    cout&lt;&lt;"链表a第一个元素是:"&lt;&lt;a.front()&lt;&lt;endl;    cout&lt;&lt;"链表a最后一个元素是:"&lt;&lt;a.back()&lt;&lt;endl;    //cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据    //cout &lt;&lt; L1[0] &lt;&lt; endl; //错误 不支持[]方式访问数据}   int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> list<int>::iterator it = a.begin()+1; 错误的写法</int></p><p>it= it+1；这也是错误的写法</p><p><strong>因为list容器的迭代器是双向迭代器，不支持随机访问</strong></p><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223155332070.png"></p><h4 id="list-反转和排序"><a href="#list-反转和排序" class="headerlink" title="list 反转和排序"></a>list 反转和排序</h4><ul><li>将容器中的元素反转，以及将容器中的数据进行排序</li><li>reverse(); //反转链表 </li><li>sort(); //链表排序   这个sort不再是#include <algorithm> 中的，而是成员函数</algorithm></li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;list&gt;using namespace std;void printList(const list&lt;int&gt;&amp; t){    for(list&lt;int&gt;::const_iterator it = t.begin();it!=t.end();it++){        cout &lt;&lt;*it &lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    list&lt;int&gt;a;    list&lt;int&gt;b;    a.push_back(10);    a.push_back(20);    a.push_back(30);    a.push_back(40);    a.push_back(50);    cout&lt;&lt;"反转链表前"&lt;&lt;endl;    printList(a);    cout&lt;&lt;"反转链表后"&lt;&lt;endl;    a.reverse();    printList(a);    b.push_front(23);    b.push_front(43);    b.push_front(34);    b.push_front(9);    b.push_front(12);    cout &lt;&lt;"链表排序前"&lt;&lt;endl;    printList(b);    cout &lt;&lt;"链表排序后"&lt;&lt;endl;    b.sort();    printList(b);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223160026928.png" alt="运行结果"></p><h3 id="set-x2F-multiset-容器"><a href="#set-x2F-multiset-容器" class="headerlink" title="set/ multiset 容器"></a>set/ multiset 容器</h3><p>所有元素都会在插入时自动被排序</p><p>set/multiset属于关联式容器，底层结构是用二叉树实现</p><p><strong>set不允许容器中有重复的元素 multiset允许容器中有重复的元素</strong></p><h4 id="set构造和赋值"><a href="#set构造和赋值" class="headerlink" title="set构造和赋值"></a>set构造和赋值</h4><ul><li>set st; //默认构造函数</li><li>set(const set &amp;st); //拷贝构造函数</li><li>set&amp; operator=(const set &amp;st); //重载等号操作符</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;void printSet(const set&lt;int&gt;&amp; t){    for(set&lt;int&gt;::const_iterator it = t.begin();it!=t.end();it++){        cout&lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;}void test(){    set&lt;int&gt;a;    a.insert(20);    a.insert(50);    a.insert(30);    a.insert(10);    a.insert(40);    cout &lt;&lt;"默认构造函数"&lt;&lt;endl;    printSet(a);    cout &lt;&lt;"拷贝构造函数"&lt;&lt;endl;    set&lt;int&gt;b(a);    printSet(b);    cout &lt;&lt;"重载等号操作符"&lt;&lt;endl;    set&lt;int&gt;c;    c=a;    printSet(c);}   int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223162326901.png" alt="运行结果"></p><p><strong>set容器插入数据时用insert</strong></p><h4 id="set大小和交换"><a href="#set大小和交换" class="headerlink" title="set大小和交换"></a>set大小和交换</h4><ul><li>size(); //返回容器中元素的数目</li><li>empty(); //判断容器是否为空 </li><li>swap(st); //交换两个集合容器</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;void printSet(const set&lt;int&gt;&amp; t){    for(set&lt;int&gt;::const_iterator it = t.begin();it!=t.end();it++){        cout&lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;}void if_empty(const set&lt;int&gt;&amp; t){    if(t.empty()){        cout &lt;&lt;"这个容器是空的"&lt;&lt;endl;    }else{        cout&lt;&lt;"这个容器不是空的,并且容器大小为:"&lt;&lt;t.size()&lt;&lt;endl;    }}void test(){    set&lt;int&gt;a;    a.insert(20);    a.insert(50);    a.insert(30);    a.insert(10);    a.insert(40);    set&lt;int&gt;b;    b.insert(1);    b.insert(5);    b.insert(2);    b.insert(4);    b.insert(3);    set&lt;int&gt;c;    if_empty(a);    if_empty(c);    cout &lt;&lt;"交换前"&lt;&lt;endl;    printSet(a);    printSet(b);    cout &lt;&lt;"交换后"&lt;&lt;endl;    a.swap(b);    printSet(a);    printSet(b);}   int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223162910820.png" alt="运行结果"></p><h4 id="set插入和删除"><a href="#set插入和删除" class="headerlink" title="set插入和删除"></a>set插入和删除</h4><ul><li>insert(elem); //在容器中插入元素</li><li>clear(); //清除所有元素</li><li>erase(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器</li><li>erase(beg, end); //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器</li><li>erase(elem); //删除容器中值为elem的元素</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;set&gt;#include &lt;iostream&gt;using namespace std;void printSet(set&lt;int&gt; &amp;s){    for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++)    {        cout &lt;&lt; *it &lt;&lt; " ";    }    cout &lt;&lt; endl;}// 插入和删除void test01(){    set&lt;int&gt; s1;    // 插入    s1.insert(10);    s1.insert(30);    s1.insert(20);    s1.insert(40);    printSet(s1);    // 删除    s1.erase(s1.begin());    printSet(s1);    s1.erase(30);    printSet(s1);    // 清空    // s1.erase(s1.begin(), s1.end());    s1.clear();    printSet(s1);}int main(){    test01();    system("pause");    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与前面基本一致</p><h4 id="set查找和统计"><a href="#set查找和统计" class="headerlink" title="set查找和统计"></a>set查找和统计</h4><ul><li>find(key); //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end(); </li><li>count(key); //统计key的元素个数，返回值是0 或者 1</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt; #include &lt;set&gt;using namespace std;void test(){    set&lt;double&gt;a;    a.insert(1.0);    a.insert(4.0);    a.insert(2.0);    a.insert(3.0);    a.insert(5.0);    set&lt;double&gt;::iterator it = a.find(3.0);    if(it!=a.end()){        cout &lt;&lt;"找到了这个元素"&lt;&lt;endl;    }else{        cout&lt;&lt;"没找到这个元素"&lt;&lt;endl;    }    int m = a.count(1.0);    int n = a.count(223);    cout &lt;&lt;m&lt;&lt;endl;    cout &lt;&lt;n&lt;&lt;endl;}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223164917438.png" alt="运行结果"></p><h4 id="set和multiset区别"><a href="#set和multiset区别" class="headerlink" title="set和multiset区别"></a>set和multiset区别</h4><ul><li>set不可以插入重复数据，而multiset可以 </li><li>set插入数据的同时会返回插入结果，表示插入是否成功 </li><li>multiset不会检测数据，因此可以插入重复数据</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;void test(){    set&lt;int&gt;a;    //判断是否插入成功     pair&lt;set&lt;int&gt;::iterator,bool&gt; ret = a.insert(10);    if(ret.second){        cout&lt;&lt;"插入成功"&lt;&lt;endl;    }else{        cout&lt;&lt;"插入失败"&lt;&lt;endl;    }    ret = a.insert(10);    if(ret.second){        cout&lt;&lt;"插入成功"&lt;&lt;endl;    }else{        cout&lt;&lt;"插入失败"&lt;&lt;endl;    }    multiset&lt;int&gt;b;    b.insert(10);    b.insert(10);    b.insert(10);    b.insert(10);    for(multiset&lt;int&gt;::iterator it = b.begin();it!=b.end();it++){        cout&lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;}   int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>multise用法基本一样，只是multiset允许插入重复的数据</strong></p><h4 id="pair对组创建"><a href="#pair对组创建" class="headerlink" title="pair对组创建"></a>pair对组创建</h4><p>成对出现的数据，利用对组可以返回两个数据</p><p>创建方式：</p><ul><li>pair p ( value1, value2 ); </li><li>pair p = make_pair( value1, value2 );</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main(){    pair&lt;string,int&gt;a("张三",18);    pair&lt;string,int&gt; b = make_pair("李四",20);    cout &lt;&lt;"第一个人叫"&lt;&lt;a.first&lt;&lt;"年龄是"&lt;&lt;a.second&lt;&lt;endl;    cout &lt;&lt;"第二个人叫"&lt;&lt;b.first&lt;&lt;"年龄是"&lt;&lt;b.second&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223170920243.png" alt="运行结果"></p><h4 id="set容器排序"><a href="#set容器排序" class="headerlink" title="set容器排序"></a>set容器排序</h4><p><strong>set是会默认从小到大排序，利用仿函数，可以改变排序规则</strong></p><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;set&gt;#include &lt;string&gt;using namespace std;class Person{public:    string name;    int age;    int hight;    Person(string name,int age,int hight){        this-&gt;name=name;        this-&gt;age=age;        this-&gt;hight=hight;    }};class MyCompare{public:    bool operator()(const Person&amp; p1,const Person&amp; p2) const{        if(p1.age == p2.age){            return p1.hight &lt; p2.hight;        }else{            return p1.age &lt; p2.age;        }    }  };void test(){    Person a1("张三",18,170);    Person a2("李四",22,165);    Person a3("王二",22,180);    Person a4("刘五",22,190);    Person a5("陈七",17,176);    set&lt;Person,MyCompare&gt;a;    a.insert(a1);    a.insert(a2);    a.insert(a3);    a.insert(a4);    a.insert(a5);    for (set&lt;Person, MyCompare&gt;::iterator it = a.begin(); it != a.end(); it++){        cout &lt;&lt; "姓名： " &lt;&lt; it-&gt;name &lt;&lt; " 年龄： " &lt;&lt; it-&gt;age &lt;&lt; "身高："&lt;&lt;it-&gt;hight&lt;&lt;endl;    }}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223174710464.png" alt="运行结果"></p><h3 id="map-x2F-multimap容器"><a href="#map-x2F-multimap容器" class="headerlink" title="map/ multimap容器"></a>map/ multimap容器</h3><ul><li><p>map中所有元素都是pair </p></li><li><p>pair中第一个元素为key（键值），起到索引作用，</p></li><li><p>第二个元素为value（实值） 所有元素都会根据元素的键值自动排序</p></li><li><p>map/multimap属于关联式容器，底层结构是用二叉树实现</p></li><li><p>可以根据key值快速找到value值</p></li><li><p>map不允许容器中有重复key值元素 </p></li><li><p>multimap允许容器中有重复key值元素</p></li></ul><p><strong>是不能重复key值而不是value值</strong></p><h4 id="map构造和赋值"><a href="#map构造和赋值" class="headerlink" title="map构造和赋值"></a>map构造和赋值</h4><ul><li>map mp; //map默认构造函数</li><li>map(const map &amp;mp); //拷贝构造函数</li><li>map&amp; operator=(const map &amp;mp); //重载等号操作符</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;map&gt;using namespace std;void printMap(const map&lt;int,int&gt;&amp; t ){    for(map&lt;int,int&gt;::const_iterator it = t.begin();it!=t.end();it++){        cout &lt;&lt;it-&gt;first&lt;&lt;" "&lt;&lt;it-&gt;second&lt;&lt;" ";        cout &lt;&lt; endl;    }           cout &lt;&lt; endl;}void test(){    map&lt;int,int&gt;m;    m.insert(pair&lt;int,int&gt;(1,10));    m.insert(pair&lt;int,int&gt;(2,20));    m.insert(pair&lt;int,int&gt;(3,30));    m.insert(pair&lt;int,int&gt;(4,40));    m.insert(pair&lt;int,int&gt;(5,50));    cout &lt;&lt;"默认构造"&lt;&lt;endl;    printMap(m);    map&lt;int,int&gt;n(m);    cout &lt;&lt;"拷贝构造"&lt;&lt;endl;    printMap(n);    map&lt;int,int&gt;s;    s=m;    cout &lt;&lt;"赋值"&lt;&lt;endl;    printMap(s);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>map中所有元素都是成对出现，插入数据时候要使用对组</strong></p><h4 id="map大小和交换"><a href="#map大小和交换" class="headerlink" title="map大小和交换"></a>map大小和交换</h4><ul><li>size(); //返回容器中元素的数目 </li><li>empty(); //判断容器是否为空 </li><li>swap(st); //交换两个集合容器</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;map&gt;using namespace std;void printMap(const map&lt;int,int&gt;&amp; t ){    for(map&lt;int,int&gt;::const_iterator it = t.begin();it!=t.end();it++){        cout &lt;&lt;it-&gt;first&lt;&lt;" "&lt;&lt;it-&gt;second&lt;&lt;"|";    }           cout &lt;&lt; endl;}void if_empty(const map&lt;int,int&gt;&amp; t ){    if(t.empty()){        cout &lt;&lt;"这个容器是空的"&lt;&lt;endl;    }else{        cout &lt;&lt;"这个容器不是空的,大小为"&lt;&lt;t.size()&lt;&lt;endl;    }}void test(){    map&lt;int,int&gt;m;    map&lt;int,int&gt;n;    m.insert(pair&lt;int,int&gt;(1,10));    m.insert(pair&lt;int,int&gt;(2,20));    m.insert(pair&lt;int,int&gt;(3,30));    m.insert(pair&lt;int,int&gt;(4,40));    m.insert(pair&lt;int,int&gt;(5,50));    if_empty(m);    if_empty(n);    map&lt;int,int&gt;s;    s.insert(pair&lt;int,int&gt;(1,22));    s.insert(pair&lt;int,int&gt;(2,32));    cout &lt;&lt;"交换前"&lt;&lt;endl;    printMap(m);    printMap(s);    cout &lt;&lt;"交换后"&lt;&lt;endl;    m.swap(s);    printMap(m);    printMap(s);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223181601113.png" alt="运行结果"></p><h4 id="map插入和删除"><a href="#map插入和删除" class="headerlink" title="map插入和删除"></a>map插入和删除</h4><ul><li>insert(elem); //在容器中插入元素。 </li><li>clear(); //清除所有元素 </li><li>erase(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li>erase(beg, end); //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。 </li><li>erase(key); //删除容器中值为key的元素。</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;map&gt;using namespace std;void printMap(const map&lt;int,int&gt;&amp; t ){    for(map&lt;int,int&gt;::const_iterator it = t.begin();it!=t.end();it++){        cout &lt;&lt;it-&gt;first&lt;&lt;" "&lt;&lt;it-&gt;second&lt;&lt;"|";    }           cout &lt;&lt; endl;}void if_empty(const map&lt;int,int&gt;&amp; t ){    if(t.empty()){        cout &lt;&lt;"这个容器是空的"&lt;&lt;endl;    }else{        cout &lt;&lt;"这个容器不是空的,大小为"&lt;&lt;t.size()&lt;&lt;endl;    }}void test(){    map&lt;int,int&gt;m;    //插入方式一    m.insert(pair&lt;int,int&gt;(1,10));    //插入方式二    m.insert(make_pair(2,20));    //插入方式三    m.insert(map&lt;int,int&gt;::value_type(3,30));    //插入方式四    m[4]=40;    printMap(m);    map&lt;int,int&gt;::iterator it = m.begin();    m.erase(++it);    cout&lt;&lt;"删除元素"&lt;&lt;endl;    printMap(m);    cout&lt;&lt;"删除key为3的元素"&lt;&lt;endl;    m.erase(3);    printMap(m);    cout&lt;&lt;"清空数据"&lt;&lt;endl;    m.clear();    if_empty(m);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221223182457788.png" alt="运行结果"></p><h4 id="map查找和统计"><a href="#map查找和统计" class="headerlink" title="map查找和统计"></a>map查找和统计</h4><ul><li>find(key); //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end(); </li><li>count(key); //统计key的元素个数</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;#include &lt;iostream&gt;using namespace std;// 查找和统计void test01(){    map&lt;int, int&gt; m;    m.insert(pair&lt;int, int&gt;(1, 10));    m.insert(pair&lt;int, int&gt;(2, 20));    m.insert(pair&lt;int, int&gt;(3, 30));    // 查找    map&lt;int, int&gt;::iterator pos = m.find(3);    if (pos != m.end())    {        cout &lt;&lt; "找到了元素 key = " &lt;&lt; (*pos).first &lt;&lt; " value = " &lt;&lt; (*pos).second &lt;&lt; endl;    }    else    {        cout &lt;&lt; "未找到元素" &lt;&lt; endl;    }    // 统计    int num = m.count(3);    cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;}int main(){    test01();    system("pause");    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>find的返回值还是迭代器</p><p>count的返回值不是0就是1</p><h4 id="map容器排序"><a href="#map容器排序" class="headerlink" title="map容器排序"></a>map容器排序</h4><p>默认的是从小到大，利用仿函数，可以改变排序规则</p><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;map&gt;#include &lt;iostream&gt;using namespace std;class MyCompare{public:    bool operator()(int v1, int v2) const    {        return v1 &gt; v2;    }};void test01(){    // 默认从小到大排序    // 利用仿函数实现从大到小排序    map&lt;int, int, MyCompare&gt; m;    m.insert(make_pair(1, 10));    m.insert(make_pair(2, 20));    m.insert(make_pair(3, 30));    m.insert(make_pair(4, 40));    m.insert(make_pair(5, 50));    for (map&lt;int, int, MyCompare&gt;::iterator it = m.begin(); it != m.end(); it++)    {        cout &lt;&lt; "key:" &lt;&lt; it-&gt;first &lt;&lt; " value:" &lt;&lt; it-&gt;second &lt;&lt; endl;    }}int main(){    test01();    system("pause");    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本上与其他的容器排序方法相同，同样这里可以排序自定义类型</p><h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><h3 id="函数对象-1"><a href="#函数对象-1" class="headerlink" title="函数对象"></a>函数对象</h3><ul><li>重载函数调用操作符的类，其对象常称为函数对象 </li><li>函数对象使用重载的()时，行为类似函数调用，也叫仿函数</li></ul><p><strong>函数对象(仿函数)是一个类，不是一个函数</strong></p><p>函数对象的使用：</p><ul><li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值 </li><li>函数对象超出普通函数的概念，函数对象可以有自己的状态 </li><li>函数对象可以作为参数传递</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;class Myadd{public:    int operator()(int a,int b){        return a + b;    }};class Myprint{public:    Myprint(){        count = 0;    }    void operator()(string a){        cout &lt;&lt; a &lt;&lt; endl;        count++;    }    int count;};void doPrint(Myprint&amp; t,string p){    t(p);}void test(){   cout &lt;&lt;"函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值"&lt;&lt;endl;    Myadd myadd;    cout &lt;&lt;"myadd(10,30)="&lt;&lt;myadd(10,30)&lt;&lt;endl;    cout &lt;&lt;"函数对象超出普通函数的概念，函数对象可以有自己的状态"&lt;&lt;endl;    Myprint myprint;    myprint("hello world");    myprint("hello world");    myprint("hello world");    myprint("hello world");    cout &lt;&lt;"一共打印了"&lt;&lt;myprint.count&lt;&lt;"次"&lt;&lt;endl;    cout &lt;&lt;"函数对象可以作为参数传递"&lt;&lt;endl;    doPrint(myprint,"hello C++");}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221224164047573.png" alt="运行结果"></p><p><strong>仿函数写法非常灵活，可以作为参数进行传递。</strong></p><h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h3><ul><li>返回bool类型的仿函数称为谓词 </li><li>如果operator()接受一个参数，那么叫做一元谓词 </li><li>如果operator()接受两个参数，那么叫做二元谓词</li></ul><h4 id="一元谓词"><a href="#一元谓词" class="headerlink" title="一元谓词"></a>一元谓词</h4><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;class My{public:    bool operator()(int a){        return a&gt;5;    }};void test(){    vector&lt;int&gt;a;    for(int i = 0; i&lt;10; i++){        a.push_back(i);    }    vector&lt;int&gt;::iterator it = find_if(a.begin(),a.end(),My());//My()是匿名函数    //这里使用了find_if算法    if(it == a.end()){        cout &lt;&lt;"没有找到" &lt;&lt;endl;    }else{        cout &lt;&lt;"找到了大于5的数为:"&lt;&lt;*it&lt;&lt;endl;    }}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二元谓词"><a href="#二元谓词" class="headerlink" title="二元谓词"></a>二元谓词</h4><p>sort算法默认是从小到大排序，利用仿函数可以改成从大到小排序</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;iostream&gt;using namespace std;// 二元谓词class MyCompare{public:    bool operator()(int num1, int num2)    {        return num1 &gt; num2;    }};void test01(){    vector&lt;int&gt; v;    v.push_back(10);    v.push_back(40);    v.push_back(20);    v.push_back(30);    v.push_back(50);    // 默认从小到大    sort(v.begin(), v.end());    for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)    {        cout &lt;&lt; *it &lt;&lt; " ";    }    cout &lt;&lt; endl;    cout &lt;&lt; "----------------------------" &lt;&lt; endl;    // 使用函数对象改变算法策略，排序从大到小    sort(v.begin(), v.end(), MyCompare());    for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)    {        cout &lt;&lt; *it &lt;&lt; " ";    }    cout &lt;&lt; endl;}int main(){    test01();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内建函数对象"><a href="#内建函数对象" class="headerlink" title="内建函数对象"></a>内建函数对象</h3><ul><li>STL内建了一些函数对象</li><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li>使用内建函数对象，需要引入头文件 #include&lt; functional&gt;</li></ul><p>分类：</p><ul><li>算术仿函数 </li><li>关系仿函数</li><li>逻辑仿函数</li></ul><h4 id="算术函数"><a href="#算术函数" class="headerlink" title="算术函数"></a>算术函数</h4><ul><li>实现四则运算 </li><li>其中negate是一元运算，其他都是二元运算</li><li>template T plus //加法仿函数 </li><li>template T minus //减法仿函数 </li><li>template T multiplies //乘法仿函数</li><li>template T divides //除法仿函数</li><li>template T modulus //取模仿函数 </li><li>template T negate //取反仿函数</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;functional&gt;using namespace std;void test(){    cout &lt;&lt;"negate()"&lt;&lt;endl;    negate&lt;int&gt;a;    cout &lt;&lt;"10取反是"&lt;&lt;a(10)&lt;&lt;endl;    cout &lt;&lt;"plus()"&lt;&lt;endl;    plus&lt;int&gt;b;    cout &lt;&lt;"10+1="&lt;&lt;b(10,1)&lt;&lt;endl;    cout &lt;&lt;"modulus()"&lt;&lt;endl;    modulus&lt;int&gt;c;    cout&lt;&lt;"3模2等于"&lt;&lt;c(3,2)&lt;&lt;endl;}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221224171858644.png" alt="运行结果"></p><h4 id="关系仿函数"><a href="#关系仿函数" class="headerlink" title="关系仿函数"></a>关系仿函数</h4><ul><li>template bool equal_to //等于</li><li>template bool not_equal_to //不等于</li><li>template bool greater //大于</li><li>template bool greater_equal //大于等于</li><li>template bool less //小于</li><li>template bool less_equal //小于等于</li></ul><p>在二元谓词的时候我们自己写了sort从大到小的排序，这里就可以直接使用关系仿函数</p><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;functional&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;void test(){    vector&lt;int&gt;a;    a.push_back(21);    a.push_back(12);    a.push_back(31);    a.push_back(2);    a.push_back(11);    cout &lt;&lt;"排序前"&lt;&lt;endl;    for(vector&lt;int&gt;::iterator it =a.begin();it!=a.end();it++){        cout &lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;    sort(a.begin(),a.end(),greater&lt;int&gt;());    cout &lt;&lt;"排序后"&lt;&lt;endl;    for(vector&lt;int&gt;::iterator it =a.begin();it!=a.end();it++){        cout &lt;&lt;*it&lt;&lt;" ";    }    cout &lt;&lt; endl;}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221224172727223.png" alt="运行结果"></p><h4 id="逻辑仿函数"><a href="#逻辑仿函数" class="headerlink" title="逻辑仿函数"></a>逻辑仿函数</h4><ul><li>template bool logical_and //逻辑与</li><li>template bool logical_or //逻辑或</li><li>template bool logical_not //逻辑非</li></ul><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;functional&gt;#include &lt;algorithm&gt;#include &lt;iostream&gt;using namespace std;void test01(){    vector&lt;bool&gt; v;    v.push_back(true);    v.push_back(false);    v.push_back(true);    v.push_back(false);    for (vector&lt;bool&gt;::iterator it = v.begin(); it != v.end(); it++)    {        cout &lt;&lt; *it &lt;&lt; " ";    }    cout &lt;&lt; endl;    // 逻辑非 将v容器搬运到v2中，并执行逻辑非运算    vector&lt;bool&gt; v2;    v2.resize(v.size());//不开辟空间不能运行    transform(v.begin(), v.end(), v2.begin(), logical_not&lt;bool&gt;());    for (vector&lt;bool&gt;::iterator it = v2.begin(); it != v2.end(); it++)    {        cout &lt;&lt; *it &lt;&lt; " ";    }    cout &lt;&lt; endl;}int main(){    test01();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><ul><li><p>算法主要是由头文件&lt; algorithm&gt;,&lt; functional&gt;,&lt; numeric&gt;组成。 </p></li><li><p>&lt; algorithm&gt;是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等 </p></li><li><p>&lt; numeric&gt;体积很小，只包括几个在序列上面进行简单数学运算的模板函数 </p></li><li><p>&lt; functional&gt;定义了一些模板类,用以声明函数对象。</p></li></ul><h3 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h3><ul><li>for_each //遍历容器 </li><li>transform //搬运容器到另一个容器中</li></ul><h5 id="for-each"><a href="#for-each" class="headerlink" title="for_each"></a>for_each</h5><p>函数原型：</p><ol><li>for_each(iterator beg, iterator end, _func);</li><li>遍历算法 遍历容器元素  </li><li>beg 开始迭代器 </li><li>end 结束迭代器 </li><li>_func 函数或者函数对象</li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;void print(int a){    cout &lt;&lt;a&lt;&lt;" ";}class Myprint{public:    void operator()(int a){        cout &lt;&lt;a&lt;&lt;" ";    }};void test(){    vector&lt;int&gt;a;    a.push_back(10);    a.push_back(20);    a.push_back(30);    a.push_back(40);    a.push_back(50);    cout &lt;&lt;"普通函数"&lt;&lt;endl;    for_each(a.begin(),a.end(),print);    cout &lt;&lt; endl;    cout &lt;&lt;"函数对象"&lt;&lt;endl;    for_each(a.begin(),a.end(),Myprint());}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221224175000050.png" alt="运行结果"></p><p><strong>普通函数是不用加括号的，函数对象要加上括号创建匿名函数</strong></p><h5 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h5><p>函数原型：</p><ol><li>transform(iterator beg1, iterator end1, iterator beg2, _func)</li><li>beg1 源容器开始迭代器</li><li>end1 源容器结束迭代器</li><li>beg2 目标容器开始迭代器</li><li>_func 函数或者函数对象</li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;vector&gt;#include &lt;functional&gt;#include &lt;algorithm&gt;#include &lt;iostream&gt;using namespace std;void print(int a){    cout &lt;&lt;a&lt;&lt;" ";}class Tranform{public:    int operator()(int a){        return a-1;//这里的返回值要是int，相当于先把值传给这个函数运算后再返回给v2    }};void test01(){    vector&lt;int&gt; v;    v.push_back(12);    v.push_back(13);    v.push_back(14);    v.push_back(15);    cout &lt;&lt;"v的数据是"&lt;&lt;endl;    for_each(v.begin(),v.end(),print);    cout &lt;&lt; endl;    vector&lt;int&gt; v2;    v2.resize(v.size());//不开辟空间不能运行    cout&lt;&lt;"把v中的元素都-1再传入v2"&lt;&lt;endl;    transform(v.begin(), v.end(), v2.begin(),Tranform());    cout &lt;&lt;"v2的数据是"&lt;&lt;endl;    for_each(v2.begin(),v2.end(),print);}int main(){    test01();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221224180413037.png" alt="运行结果"></p><h3 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h3><ul><li><p>find //查找元素 </p></li><li><p>find_if //按条件查找元素 </p></li><li><p>adjacent_find //查找相邻重复元素 </p></li><li><p>binary_search //二分查找法 </p></li><li><p>count //统计元素个数 </p></li><li><p>count_if //按条件统计元素个数</p></li></ul><h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><p>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()</p><p>函数原型：</p><ol><li>find(iterator beg, iterator end, value); </li><li>按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置 </li><li>beg 开始迭代器 </li><li>end 结束迭代器 </li><li>value 查找的元素</li><li>返回值是迭代器</li></ol><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;string&gt;using namespace std;//查找自定义数据类型class Person{public:    Person(string name,int age,int hight){        this-&gt;name = name;        this-&gt;age = age;        this-&gt;hight = hight;    }    //对于自定义的类型,使用find是重载 == 符号，不然find不知道怎么比较    bool operator==(const Person&amp; p1){        if(this-&gt;name == p1.name &amp;&amp;        this-&gt;age == p1.age &amp;&amp;        this-&gt;hight == p1.hight){            return true;        }else{            return false;        }    }    string name;    int age;    int hight;};void test(){    Person a1("张三",18,170);    Person a2("李四",22,165);    Person a3("王二",22,180);    Person a4("刘五",22,190);    Person a5("陈七",17,176);    Person aa("张三",18,170);    vector&lt;Person&gt;v;    v.push_back(a1);    v.push_back(a2);    v.push_back(a3);    v.push_back(a4);    v.push_back(a5);    vector&lt;Person&gt;::iterator it = find(v.begin(),v.end(),aa);    if(it == v.end()){        cout &lt;&lt;"没有找"&lt;&lt;endl;    }else{        cout &lt;&lt;"找到了"&lt;&lt;it-&gt;name&lt;&lt;" "&lt;&lt;it-&gt;age&lt;&lt;" "&lt;&lt;it-&gt;hight&lt;&lt;endl;    }}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在查找定义类型的时候一定要重载==符号</strong></p><h5 id="find-if"><a href="#find-if" class="headerlink" title="find_if"></a>find_if</h5><p>按条件查找元素</p><p>函数原型：</p><ol><li>find_if(iterator beg, iterator end, _Pred); </li><li>按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置 </li><li>beg 开始迭代器 </li><li>end 结束迭代器 </li><li>_Pred 函数或者谓词（返回bool类型的仿函数）</li><li>返回值是迭代器</li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//所有找年龄大于20的人/* find(iterator beg, iterator end, value);  */#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;string&gt;using namespace std;//查找自定义数据类型class Person{public:    Person(string name,int age,int hight){        this-&gt;name = name;        this-&gt;age = age;        this-&gt;hight = hight;    }    //使用一元谓词    bool operator()(const Person&amp; p1){        return p1.age &gt; this-&gt;age;    }    string name;    int age;    int hight;};class My{public:    //使用一元谓词    bool operator()(const Person&amp; p1){        return p1.age &gt; 20;    }};void test(){    Person a1("陈七",17,176);    Person a2("李四",11,165);    Person a3("张三",18,170);    Person a4("王二",11,180);    Person a5("刘五",19,190);    vector&lt;Person&gt;v;    v.push_back(a1);    v.push_back(a2);    v.push_back(a3);    v.push_back(a4);    v.push_back(a5);    vector&lt;Person&gt;::iterator it = find_if(v.begin(),v.end(),My());    if(it == v.end()){        cout &lt;&lt;"没有找"&lt;&lt;endl;    }else{        cout &lt;&lt;"找到了"&lt;&lt;it-&gt;name&lt;&lt;" "&lt;&lt;it-&gt;age&lt;&lt;" "&lt;&lt;it-&gt;hight&lt;&lt;endl;    }}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>find_if通过仿函数改变查找条件</p><h5 id="adjacent-find"><a href="#adjacent-find" class="headerlink" title="adjacent_find"></a>adjacent_find</h5><p>查找相邻重复元素</p><p>函数原型：</p><ol><li>adjacent_find(iterator beg, iterator end); </li><li>查找相邻重复元素,返回相邻元素的第一个位置的迭代器 </li><li>beg 开始迭代器 </li><li>end 结束迭代器</li><li>返回值是迭代器</li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;string&gt;using namespace std;void test(){    vector&lt;int&gt;v;    v.push_back(1);    v.push_back(2);    v.push_back(3);    v.push_back(3);    v.push_back(4);    vector&lt;int&gt;::iterator it = adjacent_find(v.begin(),v.end());    if(it == v.end()){        cout &lt;&lt;"没有找重复的数"&lt;&lt;endl;    }else{        cout&lt;&lt;"找到了重复的数字:"&lt;&lt;*it&lt;&lt;endl;    }}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="binary-search"><a href="#binary-search" class="headerlink" title="binary_search"></a>binary_search</h5><p>查找指定元素是否存在</p><p>函数原型：</p><ol><li>bool binary_search(iterator beg, iterator end, value); </li><li>查找指定的元素，查到 返回true 否则false </li><li>beg 开始迭代器 </li><li>end 结束迭代器 </li><li>value 查找的元素</li><li>返回值是bool</li></ol><p>**二分查找，在无序序列中不可用 **</p><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;string&gt;using namespace std;void test(){    vector&lt;int&gt;v;    v.push_back(1);    v.push_back(2);    v.push_back(3);    v.push_back(4);    v.push_back(5);    bool ret = binary_search(v.begin(),v.end(),3);    if(ret){        cout&lt;&lt;"找到了"&lt;&lt;endl;    }else{        cout&lt;&lt;"没有找到"&lt;&lt;endl;    }}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><p>统计元素个数</p><p>函数原型：</p><ol><li>count(iterator beg, iterator end, value); </li><li>beg 开始迭代器 </li><li>end 结束迭代器 </li><li>value 统计的元素</li><li>返回值是int</li></ol><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;string&gt;using namespace std;class Person{public:    Person(string name,int age,int hight){        this-&gt;name = name;        this-&gt;age = age;        this-&gt;hight = hight;    }    //对于自定义的类型,使用find是重载 == 符号，不然find不知道怎么比较    bool operator==(const Person&amp; p1){        if(this-&gt;age == p1.age){            return true;        }else{            return false;        }    }    string name;    int age;    int hight;};//找到年龄为22的人出现次数void test(){    Person a1("张三",18,170);    Person a2("李四",22,165);    Person a3("王二",22,180);    Person a4("刘五",22,190);    Person a5("陈七",17,176);    Person aa("张三",22,170);    vector&lt;Person&gt;v;    v.push_back(a1);    v.push_back(a2);    v.push_back(a3);    v.push_back(a4);    v.push_back(a5);    int num= count(v.begin(),v.end(),aa);    if(num == 0){        cout &lt;&lt;"没有找年龄为22的人"&lt;&lt;endl;    }else{        cout &lt;&lt;"找到了年龄为22的有"&lt;&lt;num&lt;&lt;"个人"&lt;&lt;endl;    }}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义的数据类型比较还是要重载运算符</p><h5 id="count-if"><a href="#count-if" class="headerlink" title="count_if"></a>count_if</h5><p>按条件统计元素个数</p><p>函数原型：</p><ol><li>count_if(iterator beg, iterator end, _Pred); </li><li>按条件统计元素出现次数 </li><li>beg 开始迭代器 </li><li>end 结束迭代器 </li><li>_Pred 谓词</li><li>返回值是int</li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;string&gt;using namespace std;class Person{public:    Person(string name,int age,int hight){        this-&gt;name = name;        this-&gt;age = age;        this-&gt;hight = hight;    }    string name;    int age;    int hight;};class My{public:    //使用一元谓词    bool operator()(const Person&amp; p1){        return p1.age &gt; 22;    }};//找到年龄为22的人出现次数void test(){    Person a1("张三",18,170);    Person a2("李四",22,165);    Person a3("王二",23,180);    Person a4("刘五",25,190);    Person a5("陈七",17,176);    vector&lt;Person&gt;v;    v.push_back(a1);    v.push_back(a2);    v.push_back(a3);    v.push_back(a4);    v.push_back(a5);    int num= count_if(v.begin(),v.end(),My());//第三个参数是谓词    if(num == 0){        cout &lt;&lt;"没有找年龄大于22的人"&lt;&lt;endl;    }else{        cout &lt;&lt;"找到了年龄大于22的有"&lt;&lt;num&lt;&lt;"个人"&lt;&lt;endl;    }}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><ul><li>sort 对容器内元素进行排序 </li><li>random_shuffle 洗牌 指定范围内的元素随机调整次序 </li><li>merge  容器元素合并，并存储到另一容器中 </li><li>reverse  反转指定范围的元素</li></ul><h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><p>对容器内元素进行排序</p><p>函数原型 ：</p><ol><li>sort(iterator beg, iterator end, _Pred);   按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置 </li><li>beg 开始迭代器 </li><li>end 结束迭代器 </li><li>_Pred 谓词</li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;functional&gt;using namespace std;void myPrint(int a){    cout &lt;&lt;a&lt;&lt;" ";}void test(){    vector&lt;int&gt;a;    a.push_back(2);    a.push_back(4);    a.push_back(1);    a.push_back(5);    a.push_back(3);    cout &lt;&lt;"从小到大排序"&lt;&lt;endl;    sort(a.begin(),a.end());    for_each(a.begin(),a.end(),myPrint);//这里调用函数不用写()    cout &lt;&lt; endl;    cout &lt;&lt;"从大到小排序"&lt;&lt;endl;    sort(a.begin(),a.end(),greater&lt;int&gt;());    for_each(a.begin(),a.end(),myPrint);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221225160332181.png" alt="运行结果"></p><h5 id="random-shuffle"><a href="#random-shuffle" class="headerlink" title="random_shuffle"></a>random_shuffle</h5><p>指定范围内的元素随机调整次序</p><p>函数原型：</p><ol><li>random_shuffle(iterator beg, iterator end); </li><li>指定范围内的元素随机调整次序 </li><li>beg 开始迭代器 </li><li>end 结束迭代器</li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;ctime&gt;using namespace std;void myPrint(int a){    cout &lt;&lt;a&lt;&lt;" ";   }void test(){    //设置随机数种子    srand((unsigned int)time(NULL));    vector&lt;int&gt;a;    for(int i =0;i&lt;10;i++){        a.push_back(i);    }    random_shuffle(a.begin(),a.end());//如果不设置随机数种子那么每次运行生成的随机数都一样    for_each(a.begin(),a.end(),myPrint);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h5><p>两个容器元素合并，并存储到另一容器中</p><p>函数原型：</p><p>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest); </p><ol><li>beg1 容器1开始迭代器 </li><li>end1 容器1结束迭代器 </li><li>beg2 容器2开始迭代器 </li><li>end2 容器2结束迭代器 </li><li>dest 目标容器开始迭代器</li></ol><p><strong>两个容器必须都是有序的</strong></p><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;class myPrint{public:    void operator()(int val)    {        cout &lt;&lt; val &lt;&lt; " ";    }};void test01(){    vector&lt;int&gt; v1;    vector&lt;int&gt; v2;    for (int i = 0; i &lt; 10; i++)    {        v1.push_back(i);        v2.push_back(i + 1);    }    vector&lt;int&gt; vtarget;    // 目标容器需要提前开辟空间    vtarget.resize(v1.size() + v2.size());    // 合并 需要两个有序序列    merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vtarget.begin());    for_each(vtarget.begin(), vtarget.end(), myPrint());    cout &lt;&lt; endl;}int main(){    test01();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合并两个容器中的元素，相同的元素在一起并且会自动排序</p><h5 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h5><p>将容器内元素进行反转</p><p>函数原型：</p><ol><li>reverse(iterator beg, iterator end); </li><li>反转指定范围的元素 </li><li>beg 开始迭代器</li><li>end 结束迭代器</li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;void myPrint(string a){    cout &lt;&lt;a;   }void test(){    vector&lt;string&gt;a;    a.push_back("zhang");    a.push_back("jin");    a.push_back("wei");    for_each(a.begin(),a.end(),myPrint);    cout &lt;&lt; endl;    reverse(a.begin(),a.end());    for_each(a.begin(),a.end(),myPrint);}int main(){    test();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拷贝和替换算法"><a href="#拷贝和替换算法" class="headerlink" title="拷贝和替换算法"></a>拷贝和替换算法</h3><ul><li>copy                 容器内指定范围的元素拷贝到另一容器中</li><li>replace             将容器内指定范围的旧元素修改为新元素</li><li>replace_if         容器内指定范围满足条件的元素替换为新元素</li><li>swap                 互换两个容器的元素</li></ul><h5 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h5><p>容器内指定范围的元素拷贝到另一容器中</p><p>函数原型：</p><ol><li><p>copy(iterator beg, iterator end, iterator dest);</p></li><li><p>按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p></li><li><p>beg  开始迭代器</p></li><li><p>end  结束迭代器</p></li><li><p>dest 目标起始迭代器</p></li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;class myPrint{public:void operator()(int a){        cout &lt;&lt; a &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;for (int i = 0; i &lt; 10; i++) {v1.push_back(i + 1);}vector&lt;int&gt; v2;v2.resize(v1.size());//要提前开辟空间copy(v1.begin(), v1.end(), v2.begin());for_each(v2.begin(), v2.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h5><p>将容器内指定范围的旧元素修改为新元素</p><p>函数原型：</p><ol><li>replace(iterator beg, iterator end, oldvalue, newvalue); </li><li>将区间内旧元素 替换成 新元素 </li><li>beg 开始迭代器 </li><li>end 结束迭代器 </li><li>oldvalue 旧元素</li><li>newvalue 新元素</li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;class myPrint{public:void operator()(int a){        cout &lt;&lt; a &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;    v1.push_back(10);    v1.push_back(20);    v1.push_back(20);    v1.push_back(30);    v1.push_back(40);    cout&lt;&lt;"替换前"&lt;&lt;endl;for_each(v1.begin(), v1.end(), myPrint());    cout &lt;&lt; endl;    cout&lt;&lt;"替换后"&lt;&lt;endl;    //把20替换成11    replace(v1.begin(),v1.end(),20,11);for_each(v1.begin(), v1.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221225164756623.png" alt="运行结果"></p><h5 id="replace-if"><a href="#replace-if" class="headerlink" title="replace_if"></a>replace_if</h5><p>将区间内满足条件的元素，替换成指定元素</p><p>函数原型：</p><ol><li>replace_if(iterator beg, iterator end, _pred, newvalue); </li><li>按条件替换元素，满足条件的替换成指定元素 </li><li>beg 开始迭代器 </li><li>end 结束迭代器</li><li>_pred 谓词 </li><li>newvalue 替换的新元素</li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;class myPrint{public:void operator()(int a){        cout &lt;&lt; a &lt;&lt; " ";}};class My{public:    bool operator()(int t){        return t &gt;= 30;    }};void test01(){vector&lt;int&gt; v1;    v1.push_back(10);    v1.push_back(20);    v1.push_back(20);    v1.push_back(30);    v1.push_back(40);    cout&lt;&lt;"替换前"&lt;&lt;endl;for_each(v1.begin(), v1.end(), myPrint());    cout &lt;&lt; endl;    cout&lt;&lt;"替换后"&lt;&lt;endl;    //把大于等于30的数替换成11    replace_if(v1.begin(),v1.end(),My(),11);for_each(v1.begin(), v1.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h5><p>互换两个容器的元素</p><p>函数原型：</p><ul><li>swap(container c1, container c2); </li><li>互换两个容器的元素 </li><li>c1容器1 </li><li>c2容器2</li></ul><p><strong>要交换的两个容器必须是同种类型</strong></p><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;iostream&gt;using namespace std;class myPrint{public:void operator()(int a){        cout &lt;&lt; a &lt;&lt; " ";}};void test01(){vector&lt;int&gt; v1;for (int i = 0; i &lt; 10; i++) {v1.push_back(i);}vector&lt;int&gt; v2;    for (int i = 0; i &lt; 10; i++) {v2.push_back(i+10);}    cout &lt;&lt;"交换前"&lt;&lt;endl;    cout &lt;&lt;"容器一: ";for_each(v1.begin(), v1.end(), myPrint());    cout &lt;&lt;"容器二: ";for_each(v2.begin(), v2.end(), myPrint());    cout &lt;&lt;"交换后"&lt;&lt;endl;    swap(v1,v2);    cout &lt;&lt;"容器一: ";for_each(v1.begin(), v1.end(), myPrint());    cout &lt;&lt;"容器二: ";for_each(v2.begin(), v2.end(), myPrint());cout &lt;&lt; endl;}int main() {test01();return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221225165938121.png" alt="运行结果"></p><h2 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h2><p>这部分是在刷题过程中遇到的</p><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a><strong>priority_queue</strong></h3><p>这是用的其实还是queue这个容器，这个在算法题里经常用来解决一些哈夫曼树的问题</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){  //创建哈夫曼树  priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;a;  int n;  cin&gt;&gt;n;  for(int i=0;i&lt;n;i++){    int temp;    cin&gt;&gt;temp;    a.push(temp);  }  int sum=0;  while(a.size()&gt;1){    int x=a.top();    a.pop();//顶层元素出栈    int y=a.top();    a.pop();//顶层元素出栈    sum+=x+y;    a.push(x+y);//将刚才顶层两个元素相加再入队  }  cout&lt;&lt;sum;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用这个容器实现起来很简单，创建的时候如果直接用<strong>priority_queue&lt;int.&gt;a</strong>这样就是默认的vector&lt;int.&gt;，而且将插入的元素从大到小排序的，greater就是指定从小到大排序的阿，符合我们创建哈夫曼树的要求，主要用于解决一些需要用到哈夫曼树的贪心问题</p><h3 id="string-npos"><a href="#string-npos" class="headerlink" title="string::npos"></a>string::npos</h3><p>可以用于表示string的结束位置</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;int main(){    string str = "123sadfa";    if(str.find("sdf") == string::npos) cout&lt;&lt;"not found"&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="std-unordered-set"><a href="#std-unordered-set" class="headerlink" title="std::unordered_set"></a>std::unordered_set</h3><p>unordered_set 容器，可直译为“无序 set 容器”，即 unordered_set 容器和 set 容器很像，唯一的区别就在于 set 容器会自行对存储的数据进行排序，而 unordered_set 容器不会。</p><p><strong>2.特性</strong></p><ol><li>不再以键值对的形式存储数据，而是直接存储数据的值。</li><li>容器内部存储的各个元素的值都互不相等，且不能被修改。</li><li>不会对内部存储的数据进行排序（这和该容器底层采用哈希表结构存储数据有关）。</li></ol><h3 id="std-unordered-map"><a href="#std-unordered-map" class="headerlink" title="std::unordered_map"></a>std::unordered_map</h3><p>相当于无序的map容器</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本上每个容器的使用都差不多，可以看成是不同的数据结构</p><p><img src="/2022/10/27/stl-biao-zhun-mo-ban-ku/image-20221225171608159.png" alt="各个容器"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode+CMake+多文件编译</title>
      <link href="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/"/>
      <url>/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>​    vscode不同其他的集成ide，更像是一个轻量化的编辑器，集成的ide所有东西都是官方内置好了自带各种框架，但是ide一般来说运行速度是慢于vscode的，由于vscode强大的插件功能，vscode基本可以胜任大部分编程语言。但是由于vscode很多东西要自己配置所以相较于集成ide直接可以编译运行调试，vscode需要进行一些相关的设置，由于笔者也是新手所以有很多东西说的可能不是很清楚，或者有错误还请指出。</p><h2 id="二、vscode的安装"><a href="#二、vscode的安装" class="headerlink" title="二、vscode的安装"></a>二、vscode的安装</h2><p>这一部分我建议是直接观看B站小甲鱼的视频</p><p>视频链接：【在VSCode搭建C/C++环境【秒杀Visual C++/Dev C++]】 <a href="https://www.bilibili.com/video/BV1nt4y1r7Ez/?share_source=copy_web&amp;vd_source=46305e689a1990fcb387e3066edbcdc8">https://www.bilibili.com/video/BV1nt4y1r7Ez/?share_source=copy_web&amp;vd_source=46305e689a1990fcb387e3066edbcdc8</a></p><p>基本步骤：</p><p>1.下载vscode</p><p>官方链接： <a href="https://code.visualstudio.com/">Visual Studio Code - Code Editing. Redefined</a> </p><p>2.下载MInGW编译器</p><p>官方链接： <a href="https://www.mingw-w64.org/">MinGW-w64</a> </p><p>3.安装插件：</p><p>除了视频里提到的必装的，还可以装以下的，看个人需求</p><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><p>vscode是默认英文的用这个设置中文</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667556791022.png" alt="中文插件"></p><p>这个使用的可能会比较多，变量一般命名都是按照英文来的，要是那个变量的英文不会的话可以用中文来替代，然后右击翻译成驼峰格式的英文变量名</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667556811954.png" alt="命名插件"></p><p>改变背景图片，效果如下图</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667556966772.png" alt="背景插件"></p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667557163778.png" alt="效果图"></p><p>改变文件列表图标的美化插件</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667557185893.png" alt="文件图标插件"></p><p>美化小人，还以加别的</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667557249899.png"></p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667557403063.png" alt="效果图"></p><h2 id="三、编译一个单文件"><a href="#三、编译一个单文件" class="headerlink" title="三、编译一个单文件"></a>三、编译一个单文件</h2><p>在你的电脑选取一个合适的位置创建一个空的文件价，我这个以D盘根目录下test文件为例子，两种创建方式，可以在vscode左上角文件按钮创建，也可以直接去D盘根目录创建test文件夹，然后以vscode方式打开</p><p>新建的文件目录是空的</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667557900012.png" alt="空目录"></p><h3 id="1-创建一个CPP文件"><a href="#1-创建一个CPP文件" class="headerlink" title="1.创建一个CPP文件"></a>1.创建一个CPP文件</h3><p>右击目录后者点击上面的新建一个文件 test.cpp</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;int main(){    std::cout&lt;&lt;"Hello world"&lt;&lt;std::endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667558250714.png"></p><h3 id="2-编译运行"><a href="#2-编译运行" class="headerlink" title="2.编译运行"></a>2.编译运行</h3><p>有三种方式可以运行</p><h4 id="（1）黑窗口运行"><a href="#（1）黑窗口运行" class="headerlink" title="（1）黑窗口运行"></a>（1）黑窗口运行</h4><p>如图直接点</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667558513698.png"></p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667558558250.png" alt="运行结果"></p><h4 id="（2）输出窗口运行"><a href="#（2）输出窗口运行" class="headerlink" title="（2）输出窗口运行"></a>（2）输出窗口运行</h4><p>直接在代码处右击Run Code</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667558652698.png" alt="运行结果1"></p><h4 id="（3）终端窗口运行"><a href="#（3）终端窗口运行" class="headerlink" title="（3）终端窗口运行"></a>（3）终端窗口运行</h4><p>重要啊，很重要啊</p><p>如图先换到终端窗口</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667558777269.png" alt="运行结果2"></p><p>在终端嵌入g++ .\test.cpp -o main.exe 回车，这个地方不用全打用Tab键是可以补全的</p><p>运行完之后会发现左边文件目录新出现一个main.exe</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667559046847.png"></p><p>当然还有一个test.exe，不过如果你细心的会发现在用第一种黑窗口运行的时候就出现了这个文件，我们都知道源码文件文件想要运行是要由编译器驱动程序把源文件翻译成可执行文件的，这个翻译过程有四个阶段（预处理阶段—–&gt;编译器—–&gt;汇编器—–&gt;链接器）详细的可以看看csapp，总之最好是要形成一个.exe的可执行文件，而这个文件就和源码放在一起</p><p>你问为什么第二种没有新生成一个一个.exe，我的评价是我也不知道，我不过我认为应该是这两种运行方式本质是一样的，只是不同的输出方式（如果有大佬知道一定告诉我啊）</p><p>再在终端嵌入.\main.exe，然后就运行成功了</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667559836312.png" alt="运行结果3"></p><p>具体这个命令什么意思呢</p><p>g++就是使用g++编译器，同理如果是c语言源码就可以使用gcc编译器，g++ 后面紧跟的是要编译的文件，-o 是指定生成可执行文件，后面紧跟的是可执行文件名称，所以这个名称你可以自己随意命名，我这里就命名的main.exe，第一行命令就是编译源码，第二行的.\main.exe就是运行了</p><p>第一行命令还可以这样输入 g++ -g .\test.cpp -o a.exe，这个在第一个源码文件前多了一个-g，如图运行起来也没有错误，但是跟第一种有什么不同呢</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667560427636.png" alt="运行结果4"> </p><p>在终端嵌入ls，ls就是查看当前目录的所有文件信息</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667560686336.png"></p><p>这里我们看到系统自动编译和我们不用 -g 编译出来的.exe文件大小是相同的，而用 -g 编译的a.exe是大于main.exe和test.exe的，这是因为用了 -g 的源文件包含了调试信息，所以 -g 编译的文件是可以调试的，<strong>如果你刚开始接触vscode你的可能可以运行程序但是你不能调试，基本就是你直接编译运行的源码，这个生成的是不能调试的，这个时候问题就来了，那么不用自己指定编译的方式实现文件可以调试，这个时候就要涉及launch.json和task.json文件了</strong></p><h2 id="四、配置文件和单文件编译"><a href="#四、配置文件和单文件编译" class="headerlink" title="四、配置文件和单文件编译"></a>四、配置文件和单文件编译</h2><p><strong>首先配置文件绝对不能直接复制粘贴别人，可以直接用自动生成的简单改一下就可以了，直接用别人的连Mingw安装的位置都不一样是不可能成功的</strong></p><h3 id="1-launch-json和tasks-json"><a href="#1-launch-json和tasks-json" class="headerlink" title="1.launch.json和tasks.json"></a>1.launch.json和tasks.json</h3><p>按F5快捷键在弹出的窗口选择 C++(GDB/LLDB)</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667629452402.png"></p><p>然后再选择g++.exe -生成和调试活动文件</p><p>这个时候如果你开始就已经配置好了而且可以正常调试运行（要是你直接弹出如图错误直接跳转—&gt;2.“打开launch.json”情况），</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667631642599.png" alt="遇到这个直接看2.打开&quot;launch.json&quot;情况"></p><p>就会在文件目录下自动生成一个.vscode文件不过配置好的里面没有launch.json文件，但是不影响简单的单文件调试</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667630598777.png" alt="这个是可以正常调试编译的，应该是我之前配置过"></p><p>要想加launch.json文件的话如图</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667630512204.png" alt="点击创建launch.json文件---图1"></p><p>这个时候就会自动创建一个launch.json文件，</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667630884929.png" alt="有三个文件"></p><p>这里的launch.json文件只有两行</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667631083860.png" alt="点击右下方的添加配置"></p><p>这个地方会有好几个选项，我也不是很懂这里，我一般都是用的是gdb：启动，然后就会自动在这个文件里生成配置文件</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667631344496.png"></p><p>添加完成后，上面图一的那框就会变成这样</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667631451510.png"></p><p>然后这个时候在按F5快速调试快捷键就会报错</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667631708360.png"></p><h3 id="2-”打开launch-json”情况"><a href="#2-”打开launch-json”情况" class="headerlink" title="2.”打开launch.json”情况"></a>2.”打开launch.json”情况</h3><p>点击打开”launch.json”,就会跳转到我们刚才添加过的配置的launch.json文件（ 第一步进报错的，如果打开了launch文件如果也只有两行，往上翻），根据报错的提示就是因为我们没有配置launch.json文件就直接调试，尽管你开始没有添加这个文件的时候可以调试</p><p>初始的配置文件是</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token comment">// 使用 IntelliSense 了解相关属性。 </span>    <span class="token comment">// 悬停以查看现有属性的描述。</span>    <span class="token comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"(gdb) 启动"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"输入程序名称，例如 ${workspaceFolder}/a.exe"</span><span class="token punctuation">,</span><span class="token comment">//第一个要改的地方</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${fileDirname}"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"/path/to/gdb"</span><span class="token punctuation">,</span><span class="token comment">//第二个要改的地方</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"为 gdb 启用整齐打印"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"description"</span><span class="token operator">:</span>  <span class="token string">"将反汇编风格设置为 Intel"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-gdb-set disassembly-flavor intel"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是只需要改两个位置就可以实现简单的调试</p><h4 id="1-修改program"><a href="#1-修改program" class="headerlink" title="(1)修改program"></a>(1)修改program</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"输入程序名称，例如 ${workspaceFolder}/a.exe"</span><span class="token punctuation">,</span><span class="token comment">//第一个要改的地方</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个地方改成</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/${fileBasenameNoExtension}.exe"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先把前面的中文删掉，后面的.exe文件名字是和tasks.json里面的一句相对应的</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"-fdiagnostics-color=always"</span><span class="token punctuation">,</span>    <span class="token string">"-g"</span><span class="token punctuation">,</span>    <span class="token string">"${file}"</span><span class="token punctuation">,</span>    <span class="token string">"-o"</span><span class="token punctuation">,</span>    <span class="token string">"${fileDirname}\\${fileBasenameNoExtension}.exe"</span><span class="token comment">//和这里的.exe相对应</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tasks.json是编译的配置文件，launch.json是调试的配置文件</p><p>${fileBasenameNoExtension}就是在当前用当前编译文件的名字作为可执行文件的名字，这个源文件我们命名的是test.cpp，所以它自动生成的可执行文件是test.exe，所以要我们把tasks.json里这一行改成”${fileDirname}\main.exe”，这个时候就不会自动生成以当前编译文件的名字作为可执行文件的名字而是叫main.exe，如果不改相对应的launch.json文件就会出现以下错误</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667633117818.png"></p><p>因为调试文件找的还是test.exe文件，但是编译配置文件tasks.json已经不生成test.exe，而是main.exe，所以launch文件找不到main.exe因此不能调试，如果要是反过来不变tasks文件改launch文件</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667633267489.png"></p><p><strong>又出现了这种情况，这也是很多刚接触vscode配置文件不会配置而去网上直接复制粘贴而出现的错误</strong></p><p>在换个思路，我们还可以自己用终端输入</p><pre class="line-numbers language-none"><code class="language-none">g++ -g .\test.cpp -o main.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面- o是我们自己指定生成的可执行文件的名称，我们把launch文件要改的第一个地方改成这样</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/main.exe"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里tasks是没有改的，如果没有我们自己指定生成main.exe文件是会报错的，但是我们这回自己指定了一个main.exe所以是可以正常调试，launch文件找到了一个和自己匹配的文件名称，尽管这个不与tasks指定生成的</p><p>因此launch文件里的那一行是可以不和tasks文件相同的，但是一般我们为了方便还是直接用${fileBasenameNoExtension}这个的，毕竟不用在麻烦自己去终端指定生成可执行文件名称，直接用源码的相同的就可以了。</p><p><strong>这个地方要说一下，启动tasks.json文件编译的快捷键是ctrl+shift+b，用这个编译方式生成的可执行文件就是${fileBasenameNoExtension}.exe这个，然后再快捷键F5就可以调试了</strong></p><h4 id="2-修改miDebuggerpath"><a href="#2-修改miDebuggerpath" class="headerlink" title="(2)修改miDebuggerpath"></a>(2)修改miDebuggerpath</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"/path/to/gdb"</span><span class="token punctuation">,</span><span class="token comment">//第二个修改的地方</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>path to gdb 就是添加gdb.exe的文件呗，找到自己的gdb.exe文件的绝对路径添加</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667635522585.png" alt="就在mingw文件下"></p><h4 id="3-修改tasks-json"><a href="#3-修改tasks-json" class="headerlink" title="(3)修改tasks.json"></a>(3)修改tasks.json</h4><p>tasks文件是修改两个位置，第一个位置在上面已经说过了</p><p>第二个位置</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">"command": "C:\\MinGW\\bin\\g++.exe",<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里修改成自己编译器的路径，不过这里好像是自动生成的，如果不对的话是需要修改的，对的话就不改了</p><h3 id="3-简单的注释"><a href="#3-简单的注释" class="headerlink" title="3.简单的注释"></a>3.简单的注释</h3><h4 id="1-launch-json"><a href="#1-launch-json" class="headerlink" title="(1)launch.json"></a>(1)launch.json</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"(gdb) 启动"</span><span class="token punctuation">,</span><span class="token comment">//选择的配置名称</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span><span class="token comment">//c++的debug</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span><span class="token comment">//配置类型</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/${fileBasenameNoExtension}.exe"</span><span class="token punctuation">,</span><span class="token comment">//需要调试的文件的路径，</span>            <span class="token comment">//${workspaceFolder}就是调试文件的目录，</span>            <span class="token comment">//${fileBasenameNoExtension}就是你按下调试时正打开的文件的文件名，与tasks.json的args下的-o指定的名称对应</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//再main开始处添加一个断点</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${fileDirname}"</span><span class="token punctuation">,</span><span class="token comment">//调试文件的目录</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否启用黑窗口调试</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span><span class="token comment">//调试器，这里用的就是gdb</span>            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"C:\\MinGW\\bin\\gdb.exe"</span><span class="token punctuation">,</span><span class="token comment">//重中之中，你调试器的文件目录</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"为 gdb 启用整齐打印"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"description"</span><span class="token operator">:</span>  <span class="token string">"将反汇编风格设置为 Intel"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-gdb-set disassembly-flavor intel"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-tasks-json"><a href="#2-tasks-json" class="headerlink" title="(2)tasks.json"></a>(2)tasks.json</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppbuild"</span><span class="token punctuation">,</span><span class="token comment">//编译类型这里是c++的</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"C/C++: g++.exe 生成活动文件"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"C:\\MinGW\\bin\\g++.exe"</span><span class="token punctuation">,</span><span class="token comment">//要使用的编译器路径</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">//这些就是我们在终端编译时后面跟的参数，这里只写了-g 和 -o但是其实还有别的不过单文件编译这就够了</span>            <span class="token comment">//多文件编译还会改这里，还有-I的是添加头文件的</span>                <span class="token string">"-fdiagnostics-color=always"</span><span class="token punctuation">,</span>                <span class="token string">"-g"</span><span class="token punctuation">,</span><span class="token comment">//调试信息</span>                <span class="token string">"${file}"</span><span class="token punctuation">,</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span><span class="token comment">//生成的可执行文件路劲</span>                <span class="token string">"${fileDirname}\\${fileBasenameNoExtension}.exe"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${fileDirname}"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"$gcc"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//开启编译快捷键ctrl_shift+b</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token string">"调试器生成的任务。"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一些我没有注释的是一些用的不太多的，然后就是我也懂得比如</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">setupCommands"<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"为 gdb 启用整齐打印"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"description"</span><span class="token operator">:</span>  <span class="token string">"将反汇编风格设置为 Intel"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-gdb-set disassembly-flavor intel"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一段我也不是很明白，有些我说的不是很明白的可以把指针听到相应的key，很有提示</p><h2 id="五、多文件编译"><a href="#五、多文件编译" class="headerlink" title="五、多文件编译"></a>五、多文件编译</h2><h3 id="1-终端编译"><a href="#1-终端编译" class="headerlink" title="1.终端编译"></a>1.终端编译</h3><p>首先还是利用终端来进行多文件的编译先来感受一下捏</p><p>在你的文件夹中在新建两个文件hello.cpp，和hello.h</p><p>hello.cpp文件</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include"hello.h"void print(){    std::cout&lt;&lt;"hello world"&lt;&lt;std::endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hello.h文件</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifndef _HELLO_H#define _HELLO_Hvoid print();#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候的文件目录（不用的.exe文件是可以直接删除的）</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667637085474.png"></p><p>然后在终端运行</p><pre class="line-numbers language-none"><code class="language-none">g++ .\test.cpp .\hello.cpp -o main.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在</p><pre class="line-numbers language-none"><code class="language-none">.\main.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就成功了额</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667637187578.png"></p><p>然后你要想直接已经配置好了两个文件是不是这个也可以直接编译然后调试捏，你可以试一试先ctrl+shift+B编译结果就是报错了，害编译都不能过，单文件和多文件还在不一样的，多文件了之后还要再改一下配置文件才能调试</p><h3 id="2-直接编译"><a href="#2-直接编译" class="headerlink" title="2.直接编译"></a>2.直接编译</h3><p>有了前面的基础，这里我们只需修改tasks.json文件里的arg[] </p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token string">"-g"</span><span class="token punctuation">,</span><span class="token comment">//调试信息</span><span class="token string">"${workspaceFolder}\\*.cpp"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>*cpp代表把这个工作目录下的所有cpp都编译了</p><p>然后在ctrl+shift+b就可以正常编译了，然后再F5就可以正常调试了</p><p>但是我们这里的文件目录是这样的</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667637951938.png" alt="所有的文件都直接在目录下"></p><p>实际上我们会为源文件创建一个source文件夹，给头文件创建一个head文件，这个时候就是这样了</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667638091830.png"></p><p>这里也可以配置两个文件来进行编译的不过我的建议是用cmake来编译</p><h2 id="六、CMake使用"><a href="#六、CMake使用" class="headerlink" title="六、CMake使用"></a>六、CMake使用</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>首先在你的电脑安装CMake，安装教程： <a href="https://blog.csdn.net/qq_42598221/article/details/121952160">(65条消息) Windows下Cmake安装步骤详解（图文）_L_Li_L的博客-CSDN博客_windows安装cmake</a> </p><p>然后就是vscode插件的安装</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667641835164.png" alt="这三个"></p><h3 id="2-CMake编译"><a href="#2-CMake编译" class="headerlink" title="2.CMake编译"></a>2.CMake编译</h3><p>现在你在项目目录创建两个文件</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667642184744.png"></p><p>include用来放你头文件，src用来放你的源码，然后再根目录下创建一个CMake文件叫做<strong>CMakeLists.txt这个文件名是固定的</strong>然后在其中添加语句</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">project</span><span class="token punctuation">(</span>SortMake<span class="token punctuation">)</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>src DIG_F<span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>main <span class="token punctuation">${</span>DIG_F<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span>include<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>project()//设置项目的名称</p><p>aux_source_directory(src DIG_F)搜索src目录下所有源文件，并将列表存在变量，这两个变量可以看需修改（第二个参数相当于名字可以随便命名）</p><p>add_executable(main ${DIG_F})指定使用源文件DIG_F(跟上一句的对应)，生成可执行文件的名称main(这个名称自己可以随便命名)</p><p>include_directories(include)设置包含头文件的目录</p><p>然后分别在include和src文件中添加源码</p><p>再快捷键ctrl+shift+p 在搜索框搜索CMake configure</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667645270191.png" alt="第一个"></p><p>然后再选择GCC后面跟的是你的版本号，配置完成后vscode工作目录会出现一个build目录</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667645394861.png"></p><p>然在在终端执行</p><pre class="line-numbers language-none"><code class="language-none">cd build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cd就移动到指定的文件夹目录下，然后执行</p><pre class="line-numbers language-none"><code class="language-none">cmake ..<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再然后生成makefile文件构造项目，这一步在linux是make，但是在windows的Mingw上是</p><pre class="line-numbers language-none"><code class="language-none">mingw32-make.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以执行文件就生成到了build目录里面</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667645670889.png" alt="当前文件视图"></p><p>到这里可执行文件也成功生成了但是要怎么运行调试捏，又要配置两个文件了，launch文件基本没什么变化，主要是tasks的变化</p><h3 id="3-CMake多文件调试"><a href="#3-CMake多文件调试" class="headerlink" title="3.CMake多文件调试"></a>3.CMake多文件调试</h3><p>还是先创建launch文件和tasks文件</p><p>(1)launch.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token comment">// 使用 IntelliSense 了解相关属性。 </span>    <span class="token comment">// 悬停以查看现有属性的描述。</span>    <span class="token comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"(gdb) 启动"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/build/main.exe"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${fileDirname}"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"C:\\MinGW\\bin\\gdb.exe"</span><span class="token punctuation">,</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"为 gdb 启用整齐打印"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"description"</span><span class="token operator">:</span>  <span class="token string">"将反汇编风格设置为 Intel"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-gdb-set disassembly-flavor intel"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)tasks.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/build/"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"cmake"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"cmake"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">".."</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"make"</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"kind"</span><span class="token operator">:</span><span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span><span class="token boolean">true</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"mingw32-make.exe"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span><span class="token string">"Build my project"</span><span class="token punctuation">,</span>            <span class="token property">"dependsOn"</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token string">"cmake"</span><span class="token punctuation">,</span>                <span class="token string">"make"</span>                            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>launch文件还是和上面一样修改</p><pre class="line-numbers language-none"><code class="language-none">"program": "${workspaceFolder}/build/main.exe",<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个生成的可执行文件在build目录下，而且这里同样是和tasks文件相对应的</p><pre><code>"options": {    "cwd": "${workspaceFolder}/build/"},</code></pre><p>要和cwd里的路径对应。</p><p>tasks文件基本就可以直接复用这段代码就可以了不需要修改的，还有就是这里生成的可执行文件的名称是我们在CMakeLists.txt里面指定的，在两个配置文件里不能修改了</p><p><img src="/2022/10/27/vscode-cmake-duo-wen-jian-bian-yi/1667646436540.png" alt="文件目录"></p><p>接着F5就可以成功调试了，也可以ctrl+F5不在调试模式运行</p><h2 id="七、小结"><a href="#七、小结" class="headerlink" title="七、小结"></a>七、小结</h2><p>基本上就上这样的了，当然这都是最基础的开发环境了</p>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> vscode </tag>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XTDrone仿真平台</title>
      <link href="/2022/10/19/xtdrone-fang-zhen-ping-tai/"/>
      <url>/2022/10/19/xtdrone-fang-zhen-ping-tai/</url>
      
        <content type="html"><![CDATA[<p>首先是必要的安装，ROS+gazebo+PX4+MAVROS+QGroundControl+XTDrone(这一部分可以参考我在无人机仿真环境搭建查看)，本篇是基本XTDrone官方的文档所学习的，主要记录仿真环境的运行以及自己在过程中遇到的坑。</p><p>官方文档链接:<a href="https://www.yuque.com/xtdrone/manual_cn">https://www.yuque.com/xtdrone/manual_cn</a></p><h2 id="一、键盘控制无人机飞行"><a href="#一、键盘控制无人机飞行" class="headerlink" title="一、键盘控制无人机飞行"></a>一、键盘控制无人机飞行</h2><p>正确安装完成上面的必要依赖就可以先测试一下无人机是否可以通过键盘控制起飞</p><p>打开一个终端运行启动gazebo，这里的indoor1就是px4自带的一个仿真环境可以改成别的，比如indoor2.launch</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/PX4_Firmwareroslaunch px4 indoor1.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里启动后由于是在虚拟机运行的因此可能有很大的卡顿，可以点左上角的Camera然后勾选Orthographic可以很大的优化</p><p>gazebo启动后再运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/communication/python multirotor_communication.py iris <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与0号iris建立通信，然后再启动键盘控制</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/control/keyboardpython multirotor_keyboard_control.py iris <span class="token number">1</span> vel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>起飞流程</p><p>按住i把速度加到0.3以上—–&gt;按b切换offboard模式—–&gt;按b解锁起飞</p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1667716834278.png" alt="效果图"></p><h2 id="二、配置控制多旋翼无人机"><a href="#二、配置控制多旋翼无人机" class="headerlink" title="二、配置控制多旋翼无人机"></a>二、配置控制多旋翼无人机</h2><h3 id="1-配置方法"><a href="#1-配置方法" class="headerlink" title="1.配置方法"></a>1.配置方法</h3><p>在单机仿真中，indoor和outdoor开头的launch文件都是仿真启动的文件，不同的文件代表在不同的场景下进行仿真，上面已经说过了，这里以outdoor3.launch为例，配置多旋翼无人机</p><p>打开这个文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/PX4_Firmware/launch/gedit outdoor3.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认的是车辆的仿真，搜索rover，只需对应改成需要的机型就可以了。然后就是sdf文件，因为同一种机型可能配备不同的传感器，所以sdf文件的命名也会随之不同，可以在~/PX4_Firmware/Tools/sitl_gazebo/models/ 目录下寻找所需要的sdf文件</p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1667717533413.png" alt="没改的小车仿真"></p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1667717610118.png" alt="改过的多旋翼无人机"></p><h3 id="2-控制方法"><a href="#2-控制方法" class="headerlink" title="2.控制方法"></a>2.控制方法</h3><p>多旋翼无人机相应的机型是solo，这里由于里地面高度较高，需要把launch文件中初始位置z设置为1，不然无人机就在地面以下了</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>z<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后启动仿真程序，这里要是用的别的场景也是设置launch文件的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/PX4_Firmwareroslaunch px4 outdoor3.launch <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后启动通信脚本,solo代表机型，0代表飞机编号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/communicationpython multirotor_communication.py solo <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在启动键盘控制，1代表的是飞机个数，vel代表速度控制</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/control/keyboardpython multirotor_keyboard_control.py solo <span class="token number">1</span> vel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后按i把z速度加到0.3以上，在按b切换到offboard模式，再按t解锁起飞飞到合适位置按s实现悬停</p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1667718809610.png"></p><p>然后打开地面站设置导航点即可运行</p><h2 id="三、PX4飞控EKF配置"><a href="#三、PX4飞控EKF配置" class="headerlink" title="三、PX4飞控EKF配置"></a>三、PX4飞控EKF配置</h2><p>PX4默认使用的EKF配置为融合GPS的水平位置与气压计高度。如果我们想使用视觉定位就需要修改配置文件，我们这里使用的是ORBSLAM2</p><p><em><strong>注意，此修改意味着EKF融合来自mavros/vision_pose/pose的数据，并不是修改完无人机就可以视觉定位了，需要相关程序提供mavros/vision_pose/pose的数据，相关程序包括视觉SLAM、激光SLAM和获取Gazebo真值等。如果没有额外的视觉数据，想要飞行必须改回基于GPS和气压计的定位。</strong></em></p><p>先打开相应文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gedit ~/PX4_Firmware/ROMFS/px4fmu_common/init.d-posix/rcS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># GPS used#param set EKF2_AID_MASK 1# Vision used and GPS deniedparam set EKF2_AID_MASK 24# Barometer used for hight measurement#param set EKF2_HGT_MODE 0# Barometer denied and vision used for hight measurementparam set EKF2_HGT_MODE 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1667720317892.png"></p><p>重启仿真之前要先删除上一次记录在虚拟eeprom中的参数文件，否则仿真程序就会读取参数文件导致本次rcS的修改不能生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> ~/.ros/eeprom/parameters*<span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.ros/sitl*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="四、ORBSLAM视觉仿真"><a href="#四、ORBSLAM视觉仿真" class="headerlink" title="四、ORBSLAM视觉仿真"></a>四、ORBSLAM视觉仿真</h2><p>首先是编译两种方式的ORB文件SLAM</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> ~/XTDrone/sensing/slam/vslam/ORB_SLAM2/ ~/catkin_ws/src/<span class="token function">mkdir</span> ~/catkin_ws/scripts/<span class="token function">cp</span> ~/catkin_ws/src/ORB_SLAM2/xtdrone* ~/catkin_ws/scripts/<span class="token builtin class-name">cd</span> ~/catkin_ws/src/ORB_SLAM2<span class="token function">chmod</span> +x build.sh./build.sh<span class="token builtin class-name">export</span> <span class="token assign-left variable">ROS_PACKAGE_PATH</span><span class="token operator">=</span><span class="token variable">$ROS_PACKAGE_PATH</span>:~/catkin_ws/src/ORB_SLAM2/Examples/ROS <span class="token comment">#将这句放到~/.bashrc中，以后使用更方便</span><span class="token function">chmod</span> +x build_ros.sh./build_ros.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XTDnore官方的方法也可以参考<a href="https://gitee.com/robin_shaun/XTDrone/tree/master/sensing/slam/vslam/ORB_SLAM2#2-prerequisites">https://gitee.com/robin_shaun/XTDrone/tree/master/sensing/slam/vslam/ORB_SLAM2#2-prerequisites</a></p><p>在运行到./build.sh可能会报错，运行崩溃</p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1667727928350.png"></p><p>这里进去./build.sh文件把最后的make -j改成make -j4就可以了，ros版本同理</p><p>这里ORB就已经编译好了。理论上就已经可以跑SLAM仿真了</p><p>1.先启动PX4仿真</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> PX4_Firmwareroslaunch px4 indoor1.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.启动ORNBSLAM</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws/scripts/<span class="token function">sh</span> xtdrone_run_stereo.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里没有运行成功，我自己运行没有反应无论是编译官方的ORB包还是XTD给出的ORB暂时还没有找出问题所在</p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1667728340573.png" alt="官方成功示例"></p><p>成功可以在终端看到</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INFO  <span class="token punctuation">[</span>ecl/EKF<span class="token punctuation">]</span> <span class="token number">23860000</span>: reset position to ev positionINFO  <span class="token punctuation">[</span>ecl/EKF<span class="token punctuation">]</span> <span class="token number">23860000</span>: commencing external vision position fusionINFO  <span class="token punctuation">[</span>ecl/EKF<span class="token punctuation">]</span> <span class="token number">23860000</span>: commencing external vision yaw fusion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.建立通信</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/communicationpython multirotor_communication.py iris <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.启动键盘控制</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/control/keyboardpython multirotor_keyboard_control.py iris <span class="token number">1</span> vel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="五、HectorSLAM建图"><a href="#五、HectorSLAM建图" class="headerlink" title="五、HectorSLAM建图"></a>五、HectorSLAM建图</h2><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h3><p>安装HectorSLAM</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-melodic-hector-slam*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装map server保存地图</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-melodic-map-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制相关文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roscd hector_slam_launch<span class="token function">sudo</span> <span class="token function">cp</span> ~/XTDrone/sensing/slam/laser_slam/hector_slam/hector_slam_xtdrone.launch launch/<span class="token function">sudo</span> <span class="token function">cp</span> ~/XTDrone/sensing/slam/laser_slam/hector_slam/mapping_xtdrone.rviz rviz_cfg/mapping_xtdrone.rvizroscd hector_imu_attitude_to_tf/<span class="token function">sudo</span> <span class="token function">cp</span> ~/XTDrone/sensing/slam/laser_slam/hector_slam/hector_imu_xtdrone.launch launch/roscd hector_mapping/<span class="token function">sudo</span> <span class="token function">cp</span> ~/XTDrone/sensing/slam/laser_slam/hector_slam/hector_mapping_xtdrone.launch launch/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><p>启动仿真环境，这里用的是indoor3.launch，然后要把这个文件里的sdf改成iris_2d_lidar</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch px4 indoor3.launch <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动HectorSLAM</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch hector_slam_launch hector_slam_xtdrone.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668064035807.png"></p><p>如果你运行不出来可以看看当前的tf_tree</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun rqt_tf_tree rqt_tf_tree<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668064336216.png" alt="tf_tree"></p><p>启动通信脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/communication/python multirotor_communication.py iris <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同样的这里的iris要是别的机型也要换成相应的</p><p>将HectorSLAM输出的2D位姿和高度值（由1D激光测距仪获得），转换为mavros话题</p><pre class="line-numbers language-bsah" data-language="bsah"><code class="language-bsah">cd ~/XTDrone/sensing/slam/laser_slam/script/python laser_transfer.py iris 0 hector<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动键盘控制脚本，控制无人机飞行，注意不能飞太高，导致激光雷达扫不到围墙。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/control/keyboard/python multirotor_keyboard_control.py iris <span class="token number">1</span> vel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>绕着场地飞行保存地图，用于后面路径规划</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun map_server map_saver <span class="token parameter variable">-f</span> ~/XTDrone/motion_planning/2d/map/indoor3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668066273306.png"></p><p>这里要慢慢飞不然画的地图就很奇怪</p><h2 id="六、Cartographer建图"><a href="#六、Cartographer建图" class="headerlink" title="六、Cartographer建图"></a>六、Cartographer建图</h2><h3 id="1-安装依赖-1"><a href="#1-安装依赖-1" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h3><p>安装Cartographer</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-melodic-cartographer-ros<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-melodic-cartographer-rviz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从XTD复制相关文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roscd cartographer_ros<span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-r</span>  ~/XTDrone/sensing/slam/laser_slam/cartographer/* ./<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h3><p>启动indoor3.launch，这里还是和上面一样要改sdf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch px4 indoor3.launch <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动Cartographer</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch cartographer_ros xtdrone_2d.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668066751060.png"></p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668066840356.png" alt="tf_tree"></p><p>启动通信脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/communication/python multirotor_communication.py iris <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将cartographer输出的2D位姿和高度值（由1D激光测距仪获得），转换为mavros话题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/sensing/slam/laser_slam/script/python laser_transfer.py iris <span class="token number">0</span> cartographer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动键盘控制脚本，控制无人机飞行，注意不能飞太高，导致激光雷达扫不到围墙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/control/keyboard/python multirotor_keyboard_control.py iris <span class="token number">1</span> vel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后再保存地图</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun map_server map_saver <span class="token parameter variable">-f</span> ~/XTDrone/motion_planning/2d/map/indoor3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>总的来说就是跟上面的HectorSLAM差不多只不过是不同的SLAM算法</p><h2 id="七、二维运动规划"><a href="#七、二维运动规划" class="headerlink" title="七、二维运动规划"></a>七、二维运动规划</h2><p>这一部分的运动规划可以任意选取上面两种二维视觉算法</p><p>这里以HectorSLAM为例</p><h3 id="1-安装依赖-2"><a href="#1-安装依赖-2" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h3><p>安装ros的规划库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> ros-melodic-move-base <span class="token punctuation">\</span>ros-melodic-costmap-2d <span class="token punctuation">\</span>ros-melodic-dwa-local-planner <span class="token punctuation">\</span>ros-melodic-global-planner<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>先把launch文件里的rviz启动注释掉</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roscd hector_slam_launch/launch/<span class="token function">sudo</span> gedit hector_slam_xtdrone.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668237841251.png"></p><p>这里提一句这里用的所有相关文件都是可以px4还有XTD文件下找到的</p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668159898362.png" alt="例如Cartographer都是可以找到的"></p><p>之前在安装依赖的时候用的cp都是从这里复制出去的</p><h3 id="2-在已经建好的地图进行规划"><a href="#2-在已经建好的地图进行规划" class="headerlink" title="2.在已经建好的地图进行规划"></a>2.在已经建好的地图进行规划</h3><p>先用Cartographer已经建好的地图修改配置文件，使新发布的地图不会代替已经建好的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roscd hector_mapping/launch/<span class="token function">sudo</span> gedit hector_mapping_xtdrone.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>把发布地图服务改为false</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"advertise_map_service"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"false"</span>/<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668238109893.png"></p><p>放开56行的话题名映射注释，将map映射为map_new，从而不被订阅使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>remap <span class="token assign-left variable">from</span><span class="token operator">=</span><span class="token string">"/map"</span> <span class="token assign-left variable">to</span><span class="token operator">=</span><span class="token string">"/map_new"</span>/<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668238186527.png"></p><p>启动仿真环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/PX4_Firmwareroslaunch px4 indoor3.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动二维激光，但是这里启动的时候并不会打开rviz了，上面已经把这个文件里的rviz启动注释了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch hector_slam_launch hector_slam_xtdrone.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立和PX4仿真的通信，同时发布位置真值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/communicationpython multirotor_communication.py iris <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将激光水平定位和高度真值数据通过MAVROS发给PX4</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/sensing/slam/laser_slam/scriptpython laser_transfer.py iris <span class="token number">0</span> hector<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动运动规划（注意 2d_motion_planning.launch、move_base.launch和indoor3.yaml中的路径变量，要改成自己电脑对应的路径名）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/motion_planning/2d/launchroslaunch 2d_motion_planning.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个时候就会弹出rviz界面了</p><p>控制无人机起飞，如果您是用的takeoff模式起飞，起飞后需要切换到offboard模式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/control/keyboardpython multirotor_keyboard_control.py iris <span class="token number">1</span> vel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功起飞之后要把键盘控制关掉，不然会与地图规划消息冲突</p><p>然后再切换到rviz，使用一个2D Nav Goal无人机就可以自己规划路线了</p><pre class="line-numbers language-none"><code class="language-none">cd ~/PX4_Firmwareroslaunch px4 indoor4.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-边建图边规划"><a href="#3-边建图边规划" class="headerlink" title="3.边建图边规划"></a>3.边建图边规划</h3><p>修改HectorSLAM配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roscd hector_mapping/launch/<span class="token function">sudo</span> gedit hector_mapping_xtdrone.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>把地图发布服务改成true</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"advertise_map_service"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"true"</span>/<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释掉map话题映射</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>--remap <span class="token assign-left variable">from</span><span class="token operator">=</span><span class="token string">"/map"</span> <span class="token assign-left variable">to</span><span class="token operator">=</span><span class="token string">"/map_new"</span>/--<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改地图尺寸</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>arg <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"map_size"</span> <span class="token assign-left variable">default</span><span class="token operator">=</span><span class="token string">"2048"</span>/<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改地图原点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"map_start_x"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.5"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"map_start_y"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"0.5"</span> /<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后后面的操作就跟上面一样的了</p><h2 id="八、三维激光SLAM"><a href="#八、三维激光SLAM" class="headerlink" title="八、三维激光SLAM"></a>八、三维激光SLAM</h2><h3 id="1-安装编译ALOAM"><a href="#1-安装编译ALOAM" class="headerlink" title="1.安装编译ALOAM"></a>1.安装编译ALOAM</h3><h4 id="（1）安装ALOAM依赖"><a href="#（1）安装ALOAM依赖" class="headerlink" title="（1）安装ALOAM依赖"></a>（1）安装ALOAM依赖</h4><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668242749932.png"></p><p><a href="https://blog.csdn.net/Wadewhl/article/details/112648707">Ceres Solver编译</a></p><p>这里一定要记得编译ceres solver虽然这里不编译ALOAM仍然可以编译成功但是仿真跑不了</p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668392765512.png"></p><p>出现这种编译错误多编译几次</p><p>PCL：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libpcl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）编译ALOAM"><a href="#（2）编译ALOAM" class="headerlink" title="（2）编译ALOAM"></a>（2）编译ALOAM</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> ~/XTDrone/sensing/slam/laser_slam/A-LOAM ~/catkin_try/src/<span class="token function">cp</span> <span class="token parameter variable">-r</span> ~/XTDrone/sitl_config/gazebo_plugin/velodyne/* ~/catkin_try/src/ <span class="token comment">#这里是3D激光雷达插件</span><span class="token builtin class-name">cd</span> ~/catkin_trycatkin_make <span class="token comment">#或catkin build，取决于您的编译工具</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我这里出现了这个错误不过不要紧，这是catkin_make编译崩溃导致的，可以多执行几遍，直至成功为止，或者也可以参考这篇文章就行设置</p><p> <a href="https://www.cnblogs.com/vcan123/p/12218927.html">关于树莓派编译工作空间卡死情况的解决办法 - Yimiu - 博客园 (cnblogs.com)</a> </p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668242939491.png"></p><p>然后一定要再bashrc下添加source ~/catkin_try/devel/setup.bash<strong>（这个功能包的名字用你自己的）</strong></p><p>然后刷新以下bashrc</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-启动仿真"><a href="#2-启动仿真" class="headerlink" title="2.启动仿真"></a>2.启动仿真</h3><p>三维激光雷达有两个模型3d_lidar和3d_gpu_lidar，前者使用CPU计算，后者使用GPU计算，其他没有区别，您可以根据您的需要选择。在模型中可以设置激光雷达的线数，以3d_gpu_lidar.sdf为例<em>（文件目录：/home/zhang/PX4Firmware/Tools/sitlgazebo/models/3d_gpu_lidar）</em>，官方教程用的32线程，您可以修改为其他线数，其他参数也都可以修改。注意刷新率不能改的太高，否则ALOAM算不过来。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;sensor name='3d_lidar' type='gpu_ray'<span class="token punctuation">&gt;</span>   &lt;ray<span class="token punctuation">&gt;</span>     &lt;scan<span class="token punctuation">&gt;</span>       &lt;horizontal<span class="token punctuation">&gt;</span>         &lt;samples<span class="token punctuation">&gt;</span>512&lt;/samples<span class="token punctuation">&gt;</span>         &lt;resolution<span class="token punctuation">&gt;</span>1&lt;/resolution<span class="token punctuation">&gt;</span>         &lt;min_angle<span class="token punctuation">&gt;</span><span class="token punctuation">-</span>3.1415926535897931&lt;/min_angle<span class="token punctuation">&gt;</span>         &lt;max_angle<span class="token punctuation">&gt;</span>3.1415926535897931&lt;/max_angle<span class="token punctuation">&gt;</span>       &lt;/horizontal<span class="token punctuation">&gt;</span>       &lt;vertical<span class="token punctuation">&gt;</span>         &lt;samples<span class="token punctuation">&gt;</span>32&lt;/samples<span class="token punctuation">&gt;</span>         &lt;min_angle<span class="token punctuation">&gt;</span><span class="token punctuation">-</span>0.2617993877991494365&lt;/min_angle<span class="token punctuation">&gt;</span>         &lt;max_angle<span class="token punctuation">&gt;</span>0.2617993877991494365&lt;/max_angle<span class="token punctuation">&gt;</span>       &lt;/vertical<span class="token punctuation">&gt;</span>     &lt;/scan<span class="token punctuation">&gt;</span>     &lt;range<span class="token punctuation">&gt;</span>       &lt;min<span class="token punctuation">&gt;</span>0.2&lt;/min<span class="token punctuation">&gt;</span>       &lt;max<span class="token punctuation">&gt;</span>30&lt;/max<span class="token punctuation">&gt;</span>       &lt;resolution<span class="token punctuation">&gt;</span>0.01&lt;/resolution<span class="token punctuation">&gt;</span>     &lt;/range<span class="token punctuation">&gt;</span>   &lt;/ray<span class="token punctuation">&gt;</span>   &lt;plugin name='3d_laser' filename='libgazebo_ros_velodyne_gpu_laser.so'<span class="token punctuation">&gt;</span>       &lt;topicName<span class="token punctuation">&gt;</span>/velodyne_points&lt;/topicName<span class="token punctuation">&gt;</span>       &lt;frameName<span class="token punctuation">&gt;</span>laser_3d&lt;/frameName<span class="token punctuation">&gt;</span>       &lt;gaussianNoise<span class="token punctuation">&gt;</span>0.008&lt;/gaussianNoise<span class="token punctuation">&gt;</span>     &lt;/plugin<span class="token punctuation">&gt;</span>     &lt;always_on<span class="token punctuation">&gt;</span>1&lt;/always_on<span class="token punctuation">&gt;</span>     &lt;update_rate<span class="token punctuation">&gt;</span>15&lt;/update_rate<span class="token punctuation">&gt;</span>     &lt;visualize<span class="token punctuation">&gt;</span>0&lt;/visualize<span class="token punctuation">&gt;</span>   &lt;/sensor<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将outdoor1.launch中的无人机换为iris_3d_gpu_lidar，然后启动仿真文件(更换教程在配置控制多旋翼无人机)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch px4 outdoor1.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668244793476.png" alt="由于是虚拟机有时候会很卡的"></p><p>这里会卡成这样，我这个换一个gazebo版本即可，我这里开始是gazebo9然后换成gazebo11结果还是不可以，然后又换回gazebo9不知道为什么又可以了，可能是别的版本的gazebo9</p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668326879031.png" alt="这个虚拟机运行有点卡"></p><p>启动ALOAM</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch aloam_velodyne aloam_velodyne_HDL_32.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里我还是运行不了</p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668396064951.png"></p><p>目前能想到的原因是这是由显卡渲染的但是虚拟机里不能共用主机显卡，也安装不了显卡驱动，所以有没有可能是由于这个原因导致黑屏</p><h2 id="九、三维路径规划"><a href="#九、三维路径规划" class="headerlink" title="九、三维路径规划"></a>九、三维路径规划</h2><h3 id="1-编译VINS-Fusion"><a href="#1-编译VINS-Fusion" class="headerlink" title="1.编译VINS-Fusion"></a>1.编译VINS-Fusion</h3><p><a href="https://gitee.com/robin_shaun/XTDrone/tree/master/sensing/slam/vio/VINS-Fusion">相关依赖安装</a></p><p>编译VINS-Fusion</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> ~/XTDrone/sensing/slam/vio/VINS-Fusion ~/catkin_ws/src/<span class="token function">mkdir</span> ~/catkin_ws/scripts/<span class="token function">cp</span> ~/XTDrone/sensing/slam/vio/xtdrone_run_vio.sh ~/catkin_ws/scripts/<span class="token builtin class-name">cd</span> ~/catkin_wscatkin_make <span class="token comment">#或catkin build，取决于您的编译工具</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我在这里报错</p><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668413091217.png"></p><p>是ceres这里出错，百度后发现是版本问题，所以我就把我的2.1版本删了换了 ceres1.14.0 </p><p>先把相对应的ceres文件删除再执行彻底删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> /usr/local/lib/cmake/Ceres<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/local/include/ceres /usr/local/lib/libceres.a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重新安装放到合适位置编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ceres-solver-1.14.0<span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> buildcmake <span class="token punctuation">..</span><span class="token function">make</span> <span class="token parameter variable">-j4</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-启动VINS-Fusion仿真"><a href="#2-启动VINS-Fusion仿真" class="headerlink" title="2.启动VINS-Fusion仿真"></a>2.启动VINS-Fusion仿真</h3><p>先把EKF设置为视觉定位</p><p>PX4默认使用的EKF配置为融合GPS的水平位置与气压计高度。如果我们想使用视觉定位，就需要把修改配置文件。<br>● 注意，此修改意味着EKF融合来自mavros/vision_pose/pose的数据，并不是修改完无人机就可以视觉定位了，需要相关程序提供mavros/vision_pose/pose的数据，相关程序包括视觉SLAM、激光SLAM和获取Gazebo真值等。如果没有额外的视觉数据，想要飞行必须改回基于GPS和气压计的定位。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gedit ~/PX4_Firmware/ROMFS/px4fmu_common/init.d-posix/rcS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># GPS used</span><span class="token comment">#param set EKF2_AID_MASK 1</span><span class="token comment"># Vision used and GPS denied</span>param <span class="token builtin class-name">set</span> EKF2_AID_MASK <span class="token number">24</span><span class="token comment"># Barometer used for hight measurement</span><span class="token comment">#param set EKF2_HGT_MODE 0</span><span class="token comment"># Barometer denied and vision used for hight measurement</span>param <span class="token builtin class-name">set</span> EKF2_HGT_MODE <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启仿真前，需要删除上一次记录在虚拟eeprom中的参数文件，否则仿真程序会读取该参数文件，导致本次rcS的修改不能生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> ~/.ros/eeprom/parameters*<span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.ros/sitl*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动仿真程序，将launch文件中的sdf改为iris_stereo_camera.sdf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roslaunch px4 indoor1.launch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动VINS-Fusion，注意其默认订阅的话题是iris_0的，如果要换别的vehicle，需要对应修改。另外临时文件存储路径也要对应修改。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gedit ~/catkin_ws/src/VINS-Fusion/config/xtdrone_sitl/px4_sitl_stereo_imu_config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">imu_topic</span><span class="token punctuation">:</span> <span class="token string">"/iris_0/imu_gazebo"</span><span class="token key atrule">image0_topic</span><span class="token punctuation">:</span> <span class="token string">"/iris_0/stereo_camera/left/image_raw"</span><span class="token key atrule">image1_topic</span><span class="token punctuation">:</span> <span class="token string">"/iris_0/stereo_camera/right/image_raw"</span><span class="token key atrule">output_path</span><span class="token punctuation">:</span> <span class="token string">"/home/robin/catkin_ws/vins_output"</span>...<span class="token key atrule">pose_graph_save_path</span><span class="token punctuation">:</span> <span class="token string">"/home/robin/catkin_ws/vins_output/pose_graph/"</span>  <span class="token comment"># save and load path</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里没有改所以就继续用iris就可以了</p><p>启动VINS-Fusion</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/catkin_ws<span class="token function">bash</span> scripts/xtdrone_run_vio.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/10/19/xtdrone-fang-zhen-ping-tai/1668415378343.png"></p><p>出现这种错误是由于没有刷新配置环境，在当前终端执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> devel/setup.bash <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再重新启动就可以了</p><p>由于VINS-Fusion发布的是Odometry类型的话题，我们要将其对应转为PX4所需的话题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/sensing/slam/viopython vins_transfer.py iris <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时PX4仿真终端出现如下所示输出，代表视觉信息融合成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INFO  <span class="token punctuation">[</span>ecl/EKF<span class="token punctuation">]</span> <span class="token number">1213644000</span>: reset position to ev positionINFO  <span class="token punctuation">[</span>ecl/EKF<span class="token punctuation">]</span> <span class="token number">1213644000</span>: commencing external vision position fusionINFO  <span class="token punctuation">[</span>ecl/EKF<span class="token punctuation">]</span> <span class="token number">1213644000</span>: commencing external vision yaw fusion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后建立通信，键盘控制起飞即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/communicationpython multirotor_communication.py iris <span class="token number">0</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/XTDrone/control/keyboardpython multirotor_keyboard_control.py iris <span class="token number">1</span> vel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-编译ego-planner"><a href="#3-编译ego-planner" class="headerlink" title="3.编译ego_planner"></a>3.编译ego_planner</h3><pre class="line-numbers language-none"><code class="language-none">cp -r  ~/XTDrone/motion_planning/3d/ego_planner ~/catkin_ws/src/cd ~/catkin_ws/catkin_make #或catkin build ego_planner<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ego_planner需要输入深度图+相机位姿或是点云，深度图来源于realsense_camera，(记得把indoor1.launch的iris_stereo_camera换成iris_realsense_camera)，相机位姿由VINS-Fusion计算得到，所以按照上步将飞机用键盘控制起飞后悬停，关闭键盘控制。</p>]]></content>
      
      
      <categories>
          
          <category> ros </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ros </tag>
            
            <tag> 无人机仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习</title>
      <link href="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/"/>
      <url>/2022/10/19/shu-ju-jie-gou-yu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、线性表"><a href="#一、线性表" class="headerlink" title="一、线性表"></a>一、线性表</h2><h3 id="1-顺序储存结构的插入与删除"><a href="#1-顺序储存结构的插入与删除" class="headerlink" title="1.顺序储存结构的插入与删除"></a>1.顺序储存结构的插入与删除</h3><h4 id="1-获取元素"><a href="#1-获取元素" class="headerlink" title="(1)获取元素"></a>(1)获取元素</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;class list{public:    int a[10]={1,2,3,4,5,6,7,8,9,10};    int length;    list(){length=sizeof(a)/4;}};//获取元素操作int GetNum(list t, int length, int *p){    //判断线表是否长度为0    if(length==0){        return 0;    }    int m;    cout &lt;&lt; "输入获取哪个元素" &lt;&lt; endl;    cin&gt;&gt;m;    //确保正确输入获取的元素下标    while(m&gt;length || m&lt;0){        cout &lt;&lt; "重新输入 " &lt;&lt;endl;        cin&gt;&gt;m;    }    length=m;    *p=t.a[length-1];    return *p;}int main(){    list t;    int q;    q=GetNum(t,t.length,&amp;q);    cout &lt;&lt; "这个数是" &lt;&lt;q&lt;&lt;endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-插入"><a href="#2-插入" class="headerlink" title="(2)插入"></a>(2)插入</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#define MAXSIZE 100class list{private:    int data[MAXSIZE];    int length=0;public:    void inlist(int len);    void putlist(int len);    void onlist(int len);};int main(){    list T;    int len;    cout &lt;&lt;"请输入线性表的长度"&lt;&lt;endl;    cin&gt;&gt;len;    T.inlist(len);    T.putlist(len);    T.onlist(len);}inline void list::inlist(int len){    if(len&lt;1||len&gt;MAXSIZE){        cout &lt;&lt;"输入不规范"&lt;&lt;endl;    }else    {        cout &lt;&lt;"输入元素"&lt;&lt; endl;        for(int i=0;i&lt;len;i++){            cin&gt;&gt;data[i];        }        length=len;    }}inline void list::putlist(int len){    cout &lt;&lt; "输入的元素为" &lt;&lt;  endl;    for(int i=0;i&lt;len;i++){        cout &lt;&lt;data[i]&lt;&lt;endl;    }}inline void list::onlist(int len){    int n,point;    cout &lt;&lt;"插入的个数"&lt;&lt;endl;    cin &gt;&gt; n;    if(len+n&gt;=MAXSIZE &amp;&amp; n&gt;len+1){        cout &lt;&lt;"插入失败"&lt;&lt; endl;    }else    {        cout &lt;&lt;"插入成功"&lt;&lt;endl;        for(int i=0;i&lt;n;i++){            cout &lt;&lt;"插入的第"&lt;&lt;i+1&lt;&lt;"个数的位置"&lt;&lt;endl;            cin&gt;&gt;point;            cout &lt;&lt;"插入的数字是"&lt;&lt;endl;            for(int j=length-1;j&gt;=point-1;j--){                data[j+1]=data[j];            }                cin&gt;&gt;data[point-1];            length++;            list::putlist(length);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="(3)删除"></a>(3)删除</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#define MAXSIZE 100class list{private:    int data[MAXSIZE];    int length=0;public:    void inlist(int len);    void putlist(int len);    void onlist(int len);};int main(){    list T;    int len;    cout &lt;&lt;"请输入线性表的长度"&lt;&lt;endl;    cin&gt;&gt;len;    T.inlist(len);    T.putlist(len);    T.onlist(len);}inline void list::inlist(int len){    if(len&lt;1||len&gt;MAXSIZE){        cout &lt;&lt;"输入不规范"&lt;&lt;endl;    }else    {        cout &lt;&lt;"输入元素"&lt;&lt; endl;        for(int i=0;i&lt;len;i++){            cin&gt;&gt;data[i];        }        length=len;    }}inline void list::putlist(int len){    cout &lt;&lt; "输入的元素为" &lt;&lt;  endl;    for(int i=0;i&lt;len;i++){        cout &lt;&lt;data[i]&lt;&lt;endl;    }}inline void list::onlist(int len){    int n,point;    cout &lt;&lt;"删除的个数"&lt;&lt;endl;    cin &gt;&gt; n;    if(n&gt;=MAXSIZE || n&lt;0 ){        cout &lt;&lt;"删除失败"&lt;&lt; endl;    }else    {        cout &lt;&lt;"删除成功"&lt;&lt;endl;        for(int i=0;i&lt;n;i++){            cout &lt;&lt;"删除的第"&lt;&lt;i+1&lt;&lt;"个数的位置"&lt;&lt;endl;            cin&gt;&gt;point;            for(int j=point;j&lt;=length-1;j++){                data[j-1]=data[j];            }                length--;            list::putlist(length);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/1666690310554.png" alt="优缺点"></p><h3 id="2-链式储存结构"><a href="#2-链式储存结构" class="headerlink" title="2.链式储存结构"></a>2.链式储存结构</h3><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/1667204968016.png" alt="头指针与头节点"></p><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/1667205223108.png"></p><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><h5 id="（1）初始化赋值"><a href="#（1）初始化赋值" class="headerlink" title="（1）初始化赋值"></a>（1）初始化赋值</h5><p>头插法：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;typedef struct Node{    int date;    struct Node* next;}Node,*PNode;//Node 相当于struct Node , *PNode 相当于struct Node*//用PNode主要为了强调这是一个单链表，用Node*主要强调这是一个节点PNode ListNodeInit(){    Node* L;    L=(Node* )malloc(sizeof(Node));//申请头节点空间    L-&gt;next=NULL;    int a;    cout&lt;&lt;"请输入节点数字"&lt;&lt;endl;    cin&gt;&gt;a;    for(int i=0;i&lt;a;i++){        int t;        cin&gt;&gt;t;        Node* p;//创建节点        p=(Node* )malloc(sizeof(Node));        p-&gt;date=t;        p-&gt;next=L-&gt;next;        L-&gt;next=p;        int m;    }    return L;}void ListPrint(){    Node* O;    Node* Y=ListNodeInit();    O=Y-&gt;next;    while(O){        cout&lt;&lt;O-&gt;date&lt;&lt;" ";        O=O-&gt;next;    }}int main(){    ListPrint();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用头插法的遍历输出是逆序输出的，头插法是把每一个节点放在第一位，所以后面放在第一位的就会把之前的第一位挤到后面去</p><p>通过调试数据可以看出链表结构如下</p><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/1667293723164.png" alt="L链表"></p><p>输出结果如下</p><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/1667293885302.png"></p><p>尾插法：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">PNode ListNodeInit(){    Node* L;    Node* r;//定义尾指针，每次都指向最后一个节点    L=(Node* )malloc(sizeof(Node));//申请头节点空间    L-&gt;next=NULL;    r=L;//尾指针指向头节点    int a;    cout&lt;&lt;"请输入节点数"&lt;&lt;endl;    cin&gt;&gt;a;    for(int i=0;i&lt;a;i++){        int t;        cin&gt;&gt;t;        Node* p;//创建节点        p=(Node* )malloc(sizeof(Node));        p-&gt;date=t;        r-&gt;next=p;//把新节点插入到r节点之后        r=p;//尾指针指向下一个节点    }    r-&gt;next=NULL;    return L;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/1667305383631.png" alt="图解"></p><p>尾插的聊表结构如下：</p><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/1667305845976.png"></p><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/1667305870232.png" alt="输出结果"></p><h5 id="（2）查找"><a href="#（2）查找" class="headerlink" title="（2）查找"></a>（2）查找</h5><p>按位查找，返回第i个元素</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 按位查找,返回第i个数据Node *GetData_1(PNode L, int i){    if (i &lt; 0)    {        return NULL;    }    Node *p;   // p指向当前指向的节点    int j = 0; // 计数,记录当前p指向的是第几个节点    p = L;     // p开始指向头节点    while (p != NULL &amp;&amp; j &lt; i)    {        p = p-&gt;next;        j++;    }    return p;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按值查找，返回第i个数据</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Node *GetData_2(PNode L, int e){    Node *p;   // p指向当前指向的节点    p = L-&gt;next;     // 从第一个数据开始查找,头节点是没有数据域的    while(p!=NULL &amp;&amp; p-&gt;date != e){//这里两个条件顺序不能变,不然会报错        p = p-&gt;next;    }    return p;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查表长</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int GetListLen(PNode L){    Node* s = L;    int num=0;    while(s-&gt;next!=NULL){        s = s-&gt;next;        num++;    }    return num;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）插入"><a href="#（3）插入" class="headerlink" title="（3）插入"></a>（3）插入</h5><p>指定节点的后插操作</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool Set_Behind(Node* p,int i){    if(p==NULL){//这里是防止在按位插入数据操作前的GetData()传入表尾的数据的NULL        return false;    }    Node* s = (Node*)malloc(sizeof(PNode));//开辟一块空间    s-&gt;date = i;    s-&gt;next = p-&gt;next;    p-&gt;next =s;    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按位插入数据</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool Set_Wei(PNode L,int i){    Node *p = GetData_1(L, i-1);//这里要传入i-1,因为插入数据的时候是前一个数据的next指向的    int t;    cout &lt;&lt;"插入的数据是:";    cin&gt;&gt;t;     if(Set_Behind(p,t)){        return true;//如果插入成功就返回真    }else{        return false;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（4）删除"><a href="#（4）删除" class="headerlink" title="（4）删除"></a>（4）删除</h5><p>指定节点p的删除</p><p>这个操作的原理就是实际上就是把p后一个节点的数据搬到p节点，实现将p节点删除</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool ListDel_1(Node* p){    if(p==NULL){        return false;    }    Node* s = p-&gt;next;//让节点s指向p的下一个节点    p-&gt;date = p-&gt;next-&gt;date;//让p下一个节点的数据将p覆盖掉    p-&gt;next = s-&gt;next;//把p的指针域换成下一个节点的指针域    free(s);//释放s节点    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该代码有点bug，p-&gt;date = p-&gt;next-&gt;date，如果是删除最后一个元素，那么最后指向的NULL是没有数据域的。</p><p>按位删除节点</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool ListDel_2(PNode L,int i){    Node *p = GetData_1(L, i);//这里要传入i    if(ListDel_1(p)){        return true;//如果插入成功就返回真    }else{        return false;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;typedef struct Node{    int date;    struct Node *next;} Node, *PNode; // Node 相当于struct Node , *PNode 相当于struct Node*// 用PNode主要为了强调这是一个单链表，用Node*主要强调这是一个节点// 尾插法创建链表PNode ListNodeInit(){    Node *L;    Node *r;                          // 定义尾指针，每次都指向最后一个节点    L = (Node *)malloc(sizeof(Node)); // 申请头节点空间    L-&gt;next = NULL;    r = L; // 尾指针指向头节点    int a;    cout &lt;&lt; "请输入节点数" &lt;&lt; endl;    cin &gt;&gt; a;    for (int i = 0; i &lt; a; i++)    {        int t;        cin &gt;&gt; t;        Node *p; // 创建节点        p = (Node *)malloc(sizeof(Node));        p-&gt;date = t;        r-&gt;next = p; // 把新节点插入到r节点之后        r = p;       // 尾指针指向下一个节点    }    r-&gt;next = NULL;    return L;}// 按位查找,返回第i个数据Node *GetData_1(PNode L, int i){    if (i &lt; 0)    {        return NULL;    }    Node *p;   // p指向当前指向的节点    int j = 0; // 计数,记录当前p指向的是第几个节点    p = L;     // p开始指向头节点    while (p != NULL &amp;&amp; j &lt; i)    {        p = p-&gt;next;        j++;    }    return p;}//按值查找，返回第i个数据Node *GetData_2(PNode L, int e){    Node *p;   // p指向当前指向的节点    p = L-&gt;next;     // 从第一个数据开始查找,头节点是没有数据域的    while(p != NULL &amp;&amp; p-&gt;date != e){        p = p-&gt;next;    }    return p;}//返回表长int GetListLen(PNode L){    Node* s = L;    int num=0;    while(s-&gt;next!=NULL){        s = s-&gt;next;        num++;    }    return num;}//指定节点的后插操作bool Set_Behind(Node* p,int t){    if(p==NULL){        return false;    }    Node* s = (Node*)malloc(sizeof(PNode));//开辟一块空间    s-&gt;date = t;    s-&gt;next = p-&gt;next;    p-&gt;next =s;    return true;}//按位插入数据bool Set_Wei(PNode L,int i){    Node *p = GetData_1(L, i-1);//这里要传入i-1,因为插入数据的时候是前一个数据的next指向的    int t;    cout &lt;&lt;"插入的数据是:";    cin&gt;&gt;t;     if(Set_Behind(p,t)){        return true;//如果插入成功就返回真    }else{        return false;    }}//指定节点的删除bool ListDel_1(Node* p){    if(p==NULL){        return false;    }    Node* s = p-&gt;next;//让节点s指向p的下一个节点    p-&gt;date = p-&gt;next-&gt;date;//让p下一个节点的数据将p覆盖掉    p-&gt;next = s-&gt;next;//把p的指针域换成下一个节点的指针域    free(s);//释放s节点    return true;}//按位删除数据bool ListDel_2(PNode L,int i){    Node *p = GetData_1(L, i);//这里要传入i    if(ListDel_1(p)){        return true;//如果插入成功就返回真    }else{        return false;    }}// 遍历链表void ListPrint(PNode L){    Node *s;    s = L-&gt;next; // 让s指向第一个元素    while (s != NULL)    {        cout &lt;&lt; s-&gt;date &lt;&lt; " ";        s = s-&gt;next;    }}int main(){    PNode L = ListNodeInit();    cout &lt;&lt; "------------------------------" &lt;&lt; endl;    cout&lt;&lt;"遍历这个表"&lt;&lt;endl;    ListPrint(L);    cout &lt;&lt; endl;    cout &lt;&lt; "------------------------------" &lt;&lt; endl;    int len = GetListLen(L);    cout &lt;&lt;"这个表长为:"&lt;&lt;len&lt;&lt;endl;    cout &lt;&lt; "------------------------------" &lt;&lt; endl;    int i;    cout &lt;&lt; "请输入要查找的位数:";    cin &gt;&gt; i;    Node *t1 = GetData_1(L, i);    cout &lt;&lt; "第" &lt;&lt; i &lt;&lt; "个节点的数据是" &lt;&lt; t1-&gt;date &lt;&lt; endl;    cout &lt;&lt; "------------------------------" &lt;&lt; endl;    int e;    cout &lt;&lt; "请输入要查找的数:";    cin &gt;&gt; e;    Node *t2 = GetData_2(L, e);    if(t2!=NULL){        cout &lt;&lt;"找到了数据为"&lt;&lt;e&lt;&lt;"的元素"&lt;&lt;endl;    }else{        cout&lt;&lt;"没有找到值为"&lt;&lt;e&lt;&lt;"的元素"&lt;&lt;endl;    }    cout &lt;&lt; "------------------------------" &lt;&lt; endl;    cout &lt;&lt; "请输入要插入的位数:";    cin &gt;&gt; i;    bool ret = Set_Wei(L, i);    if(ret){        cout &lt;&lt; "插入成功"&lt;&lt; endl;    }else{        cout &lt;&lt; "插入失败"&lt;&lt; endl;    }    cout&lt;&lt;"插入后遍历这个表"&lt;&lt;endl;    ListPrint(L);    cout &lt;&lt; "------------------------------" &lt;&lt; endl;    cout &lt;&lt; "请输入要删除的位数:";    cin &gt;&gt; i;    bool ret2 = ListDel_2(L,i);    if(ret){        cout &lt;&lt; "删除成功"&lt;&lt; endl;    }else{        cout &lt;&lt; "删除失败"&lt;&lt; endl;    }    cout&lt;&lt;"删除后遍历这个表"&lt;&lt;endl;    ListPrint(L);    cout &lt;&lt; "------------------------------" &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/image-20221226174029163.png"></p><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><p>双链表的核心操作与单链表基本无异，双链表多了一个前指针，指向节点的前一个节点，更方便了某些操作</p><h5 id="1-初始化赋值"><a href="#1-初始化赋值" class="headerlink" title="(1)初始化赋值"></a>(1)初始化赋值</h5><p>初始化链表</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool InitDList(DPList&amp; L){    if(L!=NULL){    L = (DNode* )malloc(sizeof(DPList));//开辟头节点    L-&gt;prior = NULL;    L-&gt;next = NULL;    }else{        return false;    }    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尾插赋值</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">DPList SetDList(DPList&amp; L){    InitDList(L);//初始一个空表     int t;    DNode* r;//创建尾指针    r = L;    cout &lt;&lt;"请输入节点数:";    cin&gt;&gt;t;    cout &lt;&lt;"请输入数据"&lt;&lt;endl;    for(int i=0;i&lt;t;i++){        int m;        cin&gt;&gt;m;        DNode* p = (DNode*)malloc(sizeof(DPList));        p-&gt;data = m;//把数据给节点p        r-&gt;next = p;//将r的next指向p        p-&gt;prior =r;//将p的前指针指向r        r = p;//尾指针指向下一个节点    }    r-&gt;next = NULL;    return L;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历链表</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void printDList(DPList t){    DNode* s;    s = t-&gt;next;    while (s != NULL)    {        cout &lt;&lt;s-&gt;data&lt;&lt;" ";        s = s-&gt;next;        /* code */    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-插入-1"><a href="#2-插入-1" class="headerlink" title="(2)插入"></a>(2)插入</h5><p>跟单链表操作差不多，在单链表先写了查找的函数，这里就直接写按位查找的插入操作了</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool DListInsert(DPList&amp; L,int i,int e){    int m = DListLen(L);//计算链表长度    if(i&lt;0 || i&gt;m){        return false;//判断传入位置是否合适    }    DNode* p;//显示p当前指向的节点    int j = 0;//计数    p = L;//p从头节点开始，头节点是第0个数据    while(p!=NULL &amp;&amp; j&lt;i-1){//这里是i-1，因为后插操作使用的是前节点的next指针操作的        p = p-&gt;next;        j++;    }    //-------------------------------------以上是按位查找操作    if(p==NULL){        return false;    }    DNode* s = (DNode*)malloc(sizeof(DPList));//开辟一个节点用于插入    s-&gt;data = e;//把数据给s节点    p-&gt;next-&gt;prior = s;//p下一个节点的前指针指向s    s-&gt;next = p-&gt;next;//将p下一个节点给s下一个节点    s-&gt;prior = p;//s的前指针指向p    p-&gt;next = s; //p的下一个节点改为s    return true;    //-------------------------------------后插操作}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两个操作可以跟单链表里一下分别用两个函数实现，便于代码的维护和复用</p><h5 id="3-删除-1"><a href="#3-删除-1" class="headerlink" title="(3)删除"></a>(3)删除</h5><p>删除指点节点</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//按位删除bool DListDel(DPList&amp; L,int i){    int m = DListLen(L);//计算链表长度    if(i&lt;0 || i&gt;m){        return false;//判断传入位置是否合适    }    DNode* p;//显示p当前指向的节点    int j = 0;//计数    p = L;//p从头节点开始，头节点是第0个数据    while(p!=NULL &amp;&amp; j&lt;i-1){//这里是i-1，因为后插操作使用的是前节点的next指针操作的        p = p-&gt;next;        j++;    }    //-------------------------------------以上是按位查找操作    if(p==NULL){        return false;    }    DNode* s = p-&gt;next;//找到p的下一个节点    if(s == NULL){        return false;//如果下一个节点是NULL返回false    }    p-&gt;next = s-&gt;next;//把s下一个节点给p    if(s-&gt;next!=NULL){//判断s下一个节点是否是空        s-&gt;next-&gt;prior = p;//将s下一个节点的前指针指向p    }    free(s);//删除s    return true;    //-------------------------------------后插操作}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;typedef struct Node{    int data;    struct Node* prior;//前节点    struct Node* next;//后节点    /* data */}DNode,*DPList;//初始化双链表bool InitDList(DPList&amp; L){    if(L!=NULL){    L = (DNode* )malloc(sizeof(DPList));//开辟头节点    L-&gt;prior = NULL;    L-&gt;next = NULL;    }else{        return false;    }    return true;}//建立双链表DPList SetDList(DPList&amp; L){    InitDList(L);//初始一个空表     int t;    DNode* r;//创建尾指针    r = L;    cout &lt;&lt;"请输入节点数:";    cin&gt;&gt;t;    cout &lt;&lt;"请输入数据"&lt;&lt;endl;    for(int i=0;i&lt;t;i++){        int m;        cin&gt;&gt;m;        DNode* p = (DNode*)malloc(sizeof(DPList));        p-&gt;data = m;//把数据给节点p        r-&gt;next = p;//将r的next指向p        p-&gt;prior =r;//将p的前指针指向r        r = p;//尾指针指向下一个节点    }    r-&gt;next = NULL;    return L;}//遍历链表void printDList(DPList t){    DNode* s;    s = t-&gt;next;    while (s != NULL)    {        cout &lt;&lt;s-&gt;data&lt;&lt;" ";        s = s-&gt;next;        /* code */    }}//计算链表长度int DListLen(DPList L){    int num = 0;    if(L==NULL){        return num;    }else{        DNode* s;        s = L;        while (s-&gt;next!=NULL)        {            s = s-&gt;next;            num++;        }     }    return num;}//按位插入bool DListInsert(DPList&amp; L,int i,int e){    int m = DListLen(L);//计算链表长度    if(i&lt;0 || i&gt;m){        return false;//判断传入位置是否合适    }    DNode* p;//显示p当前指向的节点    int j = 0;//计数    p = L;//p从头节点开始，头节点是第0个数据    while(p!=NULL &amp;&amp; j&lt;i-1){//这里是i-1，因为后插操作使用的是前节点的next指针操作的        p = p-&gt;next;        j++;    }    //-------------------------------------以上是按位查找操作    if(p==NULL){        return false;    }    DNode* s = (DNode*)malloc(sizeof(DPList));//开辟一个节点用于插入    s-&gt;data = e;//把数据给s节点    p-&gt;next-&gt;prior = s;//p下一个节点的前指针指向s    s-&gt;next = p-&gt;next;//将p下一个节点给s下一个节点    s-&gt;prior = p;//s的前指针指向p    p-&gt;next = s; //p的下一个节点改为s    return true;    //-------------------------------------后插操作}//按位删除bool DListDel(DPList&amp; L,int i){    int m = DListLen(L);//计算链表长度    if(i&lt;0 || i&gt;m){        return false;//判断传入位置是否合适    }    DNode* p;//显示p当前指向的节点    int j = 0;//计数    p = L;//p从头节点开始，头节点是第0个数据    while(p!=NULL &amp;&amp; j&lt;i-1){//这里是i-1，因为后插操作使用的是前节点的next指针操作的        p = p-&gt;next;        j++;    }    //-------------------------------------以上是按位查找操作    if(p==NULL){        return false;    }    DNode* s = p-&gt;next;//找到p的下一个节点    if(s == NULL){        return false;//如果下一个节点是NULL返回false    }    p-&gt;next = s-&gt;next;//把s下一个节点给p    if(s-&gt;next!=NULL){//判断s下一个节点是否是空        s-&gt;next-&gt;prior = p;//将s下一个节点的前指针指向p    }    free(s);//删除s    return true;    //-------------------------------------后插操作}int main(){    DPList L;    L = SetDList(L);    cout&lt;&lt;"----------------------------"&lt;&lt;endl;    cout&lt;&lt;"插入前"&lt;&lt;endl;    printDList(L);    cout &lt;&lt;endl;    cout&lt;&lt;"----------------------------"&lt;&lt;endl;    cout &lt;&lt;"请分别输入插入的位置和数据:";    int i;    int e;    cin&gt;&gt;i;    cin&gt;&gt;e;    DListInsert(L,i,e);    cout&lt;&lt;"插入后"&lt;&lt;endl;    printDList(L);    cout &lt;&lt;endl;    cout&lt;&lt;"----------------------------"&lt;&lt;endl;    cout &lt;&lt;"请输入删除的位置:";    cin&gt;&gt;i;    DListDel(L,i);    cout&lt;&lt;"删除后"&lt;&lt;endl;    printDList(L);    cout &lt;&lt;endl;    cout&lt;&lt;"----------------------------"&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p>循环链表有循环单链表和循环双链表，本质都是一样的，不过循环链表中最后一个节点的指向不在是NULL而是头节点，这也就意味着在循环链表操作中不存在NULL的判断</p><h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><p>静态链表实质上就是由数组实现的链表</p><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/image-20221227160819117.png" alt="原理图"></p><p>数据被存放在一块连续的空间内，定义方式</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#define MaxSize 10typedef struct{int data;int next;}SList[MaxSize];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的next保存的是下一个数据所在的位置</p><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/image-20221227161215809.png"></p><h2 id="二、栈与队列"><a href="#二、栈与队列" class="headerlink" title="二、栈与队列"></a>二、栈与队列</h2><h3 id="1-栈"><a href="#1-栈" class="headerlink" title="1.栈"></a>1.栈</h3><h4 id="1-栈的顺序储存"><a href="#1-栈的顺序储存" class="headerlink" title="(1)栈的顺序储存"></a>(1)栈的顺序储存</h4><h5 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h5><p>定义顺序栈</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">typedef struct{  int data[MaxSize];//静态数组存放元素  int top;//栈顶指针}SStack;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>初始化栈</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">SStack InitSStack(){    SStack SS;    SS.top=-1;//栈顶指针指向-1    return SS;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断栈是否为空</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool If_empty(SStack SS){    return SS.top==-1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>判断是否满</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool If_full(SStack SS){    return SS.top==MaxSize-1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>进栈</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool Push(SStack&amp; SS,int x){    if(SS.top==MaxSize-1){        cout &lt;&lt;"入栈失败"&lt;&lt;endl;        return false;    }    SS.data[++SS.top] = x;    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出栈</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int pop(SStack&amp; SS){    if(If_empty(SS)){        cout&lt;&lt;"出栈失败"&lt;&lt;endl;        return false;    }    int item;    item  = SS.data[SS.top];    SS.top--;    return item;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;#define MaxSize 10//定义顺序栈typedef struct{    int data[MaxSize];//静态数组存放元素    int top;//栈顶指针}SStack;//初始化栈SStack InitSStack(){    SStack SS;    SS.top=-1;//栈顶指针指向-1    return SS;}//判断栈是否为空bool If_empty(SStack SS){    return SS.top==-1;}//判断栈是否已满bool If_full(SStack SS){    return SS.top==MaxSize-1;}//进栈bool Push(SStack&amp; SS,int x){    if(SS.top==MaxSize-1){        cout &lt;&lt;"入栈失败"&lt;&lt;endl;        return false;    }    SS.data[++SS.top] = x;    return true;}//出栈并返回值int pop(SStack&amp; SS){    if(If_empty(SS)){        cout&lt;&lt;"出栈失败"&lt;&lt;endl;        return false;    }    int item;    item  = SS.data[SS.top];    SS.top--;    return item;}int main(){    SStack SS=InitSStack();    for(int i=0;i&lt;10;i++){        Push(SS,i);    }    int item;    for(int i=0;i&lt;10;i++){        item=pop(SS);        cout &lt;&lt;item&lt;&lt;" ";    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-栈的链式储存"><a href="#2-栈的链式储存" class="headerlink" title="(2)栈的链式储存"></a>(2)栈的链式储存</h4><h5 id="功能实现-1"><a href="#功能实现-1" class="headerlink" title="功能实现"></a>功能实现</h5><p>定义链式节点</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">typedef struct ListNode{    int data;    ListNode* next;}ListNode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义链式栈类</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class ListStack{private:    ListNode* top;    int size;//队列长度public:    ListStack();//构造函数初始化队列    void push(int x);//入队操作    bool If_empty();//判断队列是否为空    bool pop();//出队操作    int GetTop();//获取栈顶元素    void print(ListStack L);//通过出队和获取栈顶元素实现遍历};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数实现</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ListStack::ListStack(){    top = (ListNode*)malloc(sizeof(ListNode));    //为top开辟空间，不开辟会报错    top-&gt;next = NULL;//不带头节点    size = 0;}void ListStack::push(int x){    ListNode* p = (ListNode*)malloc(sizeof(ListNode));//开辟一个节点    p-&gt;data =x;    p-&gt;next = top-&gt;next;    top-&gt;next = p;    size++;}bool ListStack::If_empty(){    return top-&gt;next==NULL;}bool ListStack::pop(){    if(ListStack::If_empty()){        return false;//队空返回false    }    ListNode* s = top-&gt;next;    top-&gt;next = s-&gt;next;    free(s);    size--;    return true;}int ListStack::GetTop(){    return top-&gt;next-&gt;data;}void ListStack::print(ListStack L){    int t = L.size;    int item;    for(int i=0;i&lt;t;i++){        item = L.GetTop();        cout &lt;&lt;item&lt;&lt;" ";        L.pop();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;//定义链式节点typedef struct ListNode{    int data;    ListNode* next;}ListNode;//定义链式队列类class ListStack{private:    ListNode* top;    int size;//队列长度public:    ListStack();//构造函数初始化队列    void push(int x);//入队操作    bool If_empty();//判断队列是否为空    bool pop();//出队操作    int GetTop();//获取栈顶元素    void print(ListStack L);//通过出队和获取栈顶元素实现遍历};ListStack::ListStack(){    top = (ListNode*)malloc(sizeof(ListNode));    //为top开辟空间，不开辟会报错    top-&gt;next = NULL;//不带头节点    size = 0;}void ListStack::push(int x){    ListNode* p = (ListNode*)malloc(sizeof(ListNode));//开辟一个节点    p-&gt;data =x;    p-&gt;next = top-&gt;next;    top-&gt;next = p;    size++;}bool ListStack::If_empty(){    return top-&gt;next==NULL;}bool ListStack::pop(){    if(ListStack::If_empty()){        return false;//队空返回false    }    ListNode* s = top-&gt;next;    top-&gt;next = s-&gt;next;    free(s);    size--;    return true;}int ListStack::GetTop(){    return top-&gt;next-&gt;data;}void ListStack::print(ListStack L){    int t = L.size;    int item;    for(int i=0;i&lt;t;i++){        item = L.GetTop();        cout &lt;&lt;item&lt;&lt;" ";        L.pop();    }}int main(){    ListStack L;    L.push(1);    L.push(2);    L.push(3);    L.push(4);    L.push(5);    L.print(L);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-栈在括号匹配中的应用"><a href="#3-栈在括号匹配中的应用" class="headerlink" title="(3)栈在括号匹配中的应用"></a>(3)栈在括号匹配中的应用</h4><p>在程序中的括号匹配可以利用栈来实现</p><h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool BraceMatch(char* str,int len){    SStack SS = InitSStack();//初始化栈    for(int i=0;i&lt;len;i++){        if(str[i]=='(' || str[i]=='[' || str[i]=='{'){            Push(SS,str[i]);//扫描到左括号入栈        }else{            if(If_empty(SS))                return false;//如果没有扫描到左括号并且栈为空返回false            //这个时候左括号扫描完了，可以出栈左括号了            char item = pop(SS);//用item接受出栈的值进行匹配            if(str[i]==')' &amp;&amp; item!='('){                return false;//括号不匹配            }            if(str[i]==']' &amp;&amp; item!='['){                return false;//括号不匹配            }            if(str[i]=='}' &amp;&amp; item!='{'){                return false;//括号不匹配            }        }    }    return If_empty(SS);//如果全部成功出栈返回true}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;#define MaxSize 10//定义顺序栈typedef struct{    char data[MaxSize];//静态数组存放元素    int top;//栈顶指针}SStack;//初始化栈SStack InitSStack(){    SStack SS;    SS.top=-1;//栈顶指针指向-1    return SS;}//判断栈是否为空bool If_empty(SStack SS){    return SS.top==-1;}//判断栈是否已满bool If_full(SStack SS){    return SS.top==MaxSize-1;}//进栈bool Push(SStack&amp; SS,char x){    if(SS.top==MaxSize-1){        cout &lt;&lt;"入栈失败"&lt;&lt;endl;        return false;    }    SS.data[++SS.top] = x;    return true;}//出栈并返回值char pop(SStack&amp; SS){    if(If_empty(SS)){        cout&lt;&lt;"出栈失败"&lt;&lt;endl;        return false;    }    char item;    item  = SS.data[SS.top];    SS.top--;    return item;}bool BraceMatch(char* str,int len){    SStack SS = InitSStack();//初始化栈    for(int i=0;i&lt;len;i++){        if(str[i]=='(' || str[i]=='[' || str[i]=='{'){            Push(SS,str[i]);//扫描到左括号入栈        }else{            if(If_empty(SS))                return false;//如果没有扫描到左括号并且栈为空返回false            //这个时候左括号扫描完了，可以出栈左括号了            char item = pop(SS);//用item接受出栈的值进行匹配            if(str[i]==')' &amp;&amp; item!='('){                return false;//括号不匹配            }            if(str[i]==']' &amp;&amp; item!='['){                return false;//括号不匹配            }            if(str[i]=='}' &amp;&amp; item!='{'){                return false;//括号不匹配            }        }    }    return If_empty(SS);//如果全部成功出栈返回true}int main(){    char* str;    int len = 6;    for(int i = 0;i&lt;len;i++){        cin&gt;&gt;str[i];    }    if(BraceMatch(str,len)){        cout &lt;&lt;"匹配成功";    }else{        cout &lt;&lt;"匹配失败";    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/image-20221229151254532.png"></p><h4 id="4-栈在表达式求值中的应用"><a href="#4-栈在表达式求值中的应用" class="headerlink" title="(4)栈在表达式求值中的应用"></a>(4)栈在表达式求值中的应用</h4><h5 id="计算中缀表达式"><a href="#计算中缀表达式" class="headerlink" title="计算中缀表达式"></a>计算中缀表达式</h5><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/image-20221229154354234.png"></p><p><img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/image-20221229162405298.png" alt="算法思路"></p><h6 id="功能实现-2"><a href="#功能实现-2" class="headerlink" title="功能实现"></a>功能实现</h6><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void ListStack::compute(ListStack L1,ListStack L2){    char a;//运算符栈传入的是运算的ascll码对应的，用char接收自动转化    T b,c,d;    a = L1.pop();    b = L2.pop();    c = L2.pop();    if(a=='*'){        d = c*b;//这里的c b位置不能改变，因为出栈的顺序是固定的    }else if(a=='/'){        d = c/b;    }else if(a=='+'){        d = c+b;    }else if(a=='-'){        d = c-d;    }else{        //cout &lt;&lt;"erro"&lt;&lt;endl;    }    L2.push(d);//将运算后的值重新压入栈中}//计算中缀表达式//思路初始化两个栈，一个用来放操作数，一个用来放运算符//要是遇到了操作数压入操作数栈//要是遇到运算符压入运算符栈(弹出运算的时候也会弹出两个操作数进行计算，并将结果放回操作数栈)用compute函数实现double ListStack::Cal(char str[100]){    int len = 0;    for(int i = 0;str[i]!='\0';i++){        len++;//计算表达式长度    }       ListStack L1;    ListStack L2;    //(1+2)*3-(2+2)/4    for(int i =0;i&lt;=len;i++){        if('0'&lt;=str[i] &amp;&amp; str[i]&lt;='9'){//判断是不是数字            L2.push(str[i]-48);//因为char传入时转成ascll,减去48就是原来的值            continue;//存入一个后直接开始下一轮循环        }//这是当表达式的开头不是括号的时候           if(str[i]=='(' || L1.If_empty()){//如果开头是括号就将(压入栈，如果不是，那么执行了上面的if，下一个也肯定是运算符            L1.push(str[i]);//这里不是存数字直接存就可以了            continue;        }        if(str[i]==')'){//如果是)则要开始计算括号里的,)是不需要入栈的，只是一个判断的作用            char item = L1.GetTop();            //这个地方我开始写的时候是while(item!='(')，这样就写成一个死循环了，因为现在的item就是开始的值静态的，这样写循环里要加一句item = L1.GetTop();重新获取写的栈顶值            while(item!='('){//如果栈里不是两个连续的( (,这里用while不用if是因为可能括号里不止一个运算符  列入((1+2*2/2)*3)-(2+2)/4                this-&gt;compute(L1,L2);//计算                item = L1.GetTop();            }            L1.pop();//将栈中的(出栈            continue;        }        if(str[i]=='*'||str[i]=='/'){            T item2 = L1.GetTop();//看上一个运算符是否已经是*或/，如果是则先运算上一个* /  例如((1+2*2/2)*3)-(2+2)/4            if(item2 == '/' || item2 == '*'){                this-&gt;compute(L1,L2);            }            L1.push(str[i]);//在把这个运算符压入栈            continue;        }        if(str[i]=='+' || str[i]=='-'){            T item3 = L1.GetTop();            if(item3 !='('){//如果栈最上面不是(则直接运算  列如  (1+(2-3)+4)/4                this-&gt;compute(L1,L2);            }            L1.push(str[i]);//如果是则直接进栈            continue;        }        while(!L1.If_empty()){//如果开头不是(,运算到最后栈不为空则继续运算            this-&gt;compute(L1,L2); //例如1+2-(1*2)        }    }    T num;    num = L2.GetTop();//获取运算值    return num;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void test(){    ListStack L;    char str[100];    cout &lt;&lt;"请输入计算的中缀式:";    cin&gt;&gt;str;    int num = L.Cal(str);    cout &lt;&lt;num; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-队列"><a href="#2-队列" class="headerlink" title="2.队列"></a>2.队列</h3><h4 id="1-队列的顺序储存"><a href="#1-队列的顺序储存" class="headerlink" title="(1)队列的顺序储存"></a>(1)队列的顺序储存</h4><h5 id="功能实现-3"><a href="#功能实现-3" class="headerlink" title="功能实现"></a>功能实现</h5><p>队列的定义</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">typedef struct{    int data[MaxSize];//用静态数组存放队列,一块连续的的储存空间    int front,rear;//队头指针和队尾指针,队尾指针是指向下一个要插入元素的位置,而不是最后一个元素    int size;//记录队列长度}SQueue;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化一个队列</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">SQueue InitSQueue(){    SQueue SQ;    SQ.front=SQ.rear=0;//开始的时候队头和队尾指针都指向,起始位置    SQ.size=0;    return SQ;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断队列是否为空</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool If_empty(SQueue SQ){    if(SQ.front==SQ.rear&amp;&amp;SQ.size==0){//当两个指针指向同一块位置时判断为空且长度为0        return true;    }else{        return false;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断队列是否已满</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//判断队列是否已满bool If_full(SQueue SQ){    if(SQ.size==MaxSize){        return true;    }else{        return false;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>入队操作</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">bool In_queue(SQueue&amp; SQ,int e){    bool ret = If_full(SQ);    if(ret){        cout&lt;&lt;"这个队列已满,入队失败"&lt;&lt;endl;        return false;    }    SQ.data[SQ.rear]=e;//将数据入队    SQ.rear=(SQ.rear+1)%MaxSize;//实现循环队列    SQ.size++;//队列长度加1    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SQ.rear=(SQ.rear+1)%MaxSize;这一句要模上Maxsize之后当rear达到10的时候就会回到0，实现循环队列</p><p>出队操作</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int Out_queue(SQueue&amp; SQ,int&amp; x){    if(If_empty(SQ)){        cout &lt;&lt;"出队失败"&lt;&lt;endl;//判读队列是否为空        return 0;    }    x=SQ.data[SQ.front];    SQ.front=(SQ.front+1)%MaxSize;    SQ.size--;    return x;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为队列不能够遍历，所以用出队的返回值可以模拟遍历</p><h5 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//顺序存储实现的队列#include &lt;iostream&gt;using namespace std;#define MaxSize 10//队列的定义typedef struct{    int data[MaxSize];//用静态数组存放队列,一块连续的的储存空间    int front,rear;//队头指针和队尾指针,队尾指针是指向下一个要插入元素的位置,而不是最后一个元素    int size;//记录队列长度}SQueue;//初始化一个顺序队列SQueue InitSQueue(){    SQueue SQ;    SQ.front=SQ.rear=0;//开始的时候队头和队尾指针都指向,起始位置    SQ.size=0;    return SQ;}//判断队列是否为空bool If_empty(SQueue SQ){    if(SQ.front==SQ.rear&amp;&amp;SQ.size==0){//当两个指针指向同一块位置时判断为空        return true;    }else{        return false;    }}//判断队列是否已满bool If_full(SQueue SQ){    if(SQ.size==MaxSize){        return true;    }else{        return false;    }}//入队操作bool In_queue(SQueue&amp; SQ,int e){    bool ret = If_full(SQ);    if(ret){        cout&lt;&lt;"这个队列已满,入队失败"&lt;&lt;endl;        return false;    }    SQ.data[SQ.rear]=e;//将数据入队    SQ.rear=(SQ.rear+1)%MaxSize;//实现循环队列    SQ.size++;//队列长度加1    return true;}//出队操作，并返回出队的值int Out_queue(SQueue&amp; SQ,int&amp; x){    if(If_empty(SQ)){        cout &lt;&lt;"出队失败"&lt;&lt;endl;//判读队列是否为空        return 0;    }    x=SQ.data[SQ.front];    SQ.front=(SQ.front+1)%MaxSize;    SQ.size--;    return x;}int main(){    int m;    SQueue SQ = InitSQueue();    for(int i = 0;i&lt;10;i++){        In_queue(SQ,i);    }    for(int i = 0;i&lt;10;i++){        Out_queue(SQ,m);        cout &lt;&lt;m&lt;&lt;" ";    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-队列的链式储存"><a href="#2-队列的链式储存" class="headerlink" title="(2)队列的链式储存"></a>(2)队列的链式储存</h4><h5 id="功能实现-4"><a href="#功能实现-4" class="headerlink" title="功能实现"></a>功能实现</h5><p>队列定义</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">typedef struct ListNode{    int data;    ListNode* next;}ListNode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>队列类建立</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class ListQueue{private:    ListNode* front;//队头指针    ListNode* rear;//队尾指针    int size;//队列长度public:    ListQueue();//构造函数初始化队列    ~ListQueue();//析构函数销毁队列    void In_Queue(int x);//入队操作    bool If_empty();//判断队列是否为空    bool Out_Queue(int&amp; x);//出队操作};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数实现</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">ListQueue::ListQueue(){    front = rear =(ListNode*)malloc(sizeof(ListNode));//队头和队尾指针都指向头节点    front-&gt;next=NULL;    size=0;}void ListQueue::In_Queue(int x){    ListNode* s = (ListNode*)malloc(sizeof(ListNode));    s-&gt;data = x;    s-&gt;next =NULL;    rear-&gt;next =s;//让rear的next指针域指向s    rear = s;//将s改为尾指针    size++;}bool ListQueue::If_empty(){    if(this-&gt;front==this-&gt;rear){        cout &lt;&lt;"这个队列是空的"&lt;&lt;endl;        return true;    }else{        return false;    }}bool ListQueue::Out_Queue(int&amp; x){    if(this-&gt;If_empty()){        cout &lt;&lt;"出队失败"&lt;&lt;endl;        return false;    }    ListNode* p = front-&gt;next;//用p指向这次要出队的节点    x  = p-&gt;data;//用x接收要出队节点的数据    front-&gt;next = p-&gt;next;//修改头节点指向    if(rear == p){//如果要删除的是最后一个节点        front = rear;    }    free(p);//删除节点    size--;    return true;}ListQueue::~ListQueue(){    if(front!=rear){        ListNode* p = front-&gt;next;//用p指向这次要出队的节点        front-&gt;next = p-&gt;next;//修改头节点指向        if(rear == p){//如果要删除的是最后一个节点            front = rear;        }        free(p);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="完整代码-4"><a href="#完整代码-4" class="headerlink" title="完整代码"></a>完整代码</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;//定义链式节点typedef struct ListNode{    int data;    ListNode* next;}ListNode;//定义链式队列类class ListQueue{private:    ListNode* front;//队头指针    ListNode* rear;//队尾指针    int size;//队列长度public:    ListQueue();//构造函数初始化队列    ~ListQueue();//析构函数销毁队列    void In_Queue(int x);//入队操作    bool If_empty();//判断队列是否为空    bool Out_Queue(int&amp; x);//出队操作};ListQueue::ListQueue(){    front = rear =(ListNode*)malloc(sizeof(ListNode));//队头和队尾指针都指向头节点    front-&gt;next=NULL;    size=0;}void ListQueue::In_Queue(int x){    ListNode* s = (ListNode*)malloc(sizeof(ListNode));    s-&gt;data = x;    s-&gt;next =NULL;    rear-&gt;next =s;//让rear的next指针域指向s    rear = s;//将s改为尾指针    size++;}bool ListQueue::If_empty(){    if(this-&gt;front==this-&gt;rear){        cout &lt;&lt;"这个队列是空的"&lt;&lt;endl;        return true;    }else{        return false;    }}bool ListQueue::Out_Queue(int&amp; x){    if(this-&gt;If_empty()){        cout &lt;&lt;"出队失败"&lt;&lt;endl;        return false;    }    ListNode* p = front-&gt;next;//用p指向这次要出队的节点    x  = p-&gt;data;//用x接收要出队节点的数据    front-&gt;next = p-&gt;next;//修改头节点指向    if(rear == p){//如果要删除的是最后一个节点        front = rear;    }    free(p);//删除节点    size--;    return true;}ListQueue::~ListQueue(){    if(front!=rear){        ListNode* p = front-&gt;next;//用p指向这次要出队的节点        front-&gt;next = p-&gt;next;//修改头节点指向        if(rear == p){//如果要删除的是最后一个节点            front = rear;        }        free(p);    }}int main(){    ListQueue L;    for(int i =0;i&lt;10;i++){        L.In_Queue(i);    }    int m;    for(int i =0;i&lt;5;i++){        L.Out_Queue(m);        cout &lt;&lt;m&lt;&lt;" ";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、串"><a href="#三、串" class="headerlink" title="三、串"></a>三、串</h2><p>串，即字符串(String），是由零个或多个字符组成的有限序列。<img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/gif.latexs%253Da_%7B1%7D%252Ca_%7B2%7D%252C...gif" alt="格式"><br>其中，s是串名，引号（单/双引号都可）括起来的字符序列是串的值；<img src="/2022/10/19/shu-ju-jie-gou-yu-suan-fa/gif.gif" alt="a_{i}">可以是字母、数字或其他字符；字符下标从1开始，串中字符的个数n称为串的长度。n=0时的串称为空串（用∅表示)。</p><p>基本操作实现就不做了，这里主要是两种匹配算法</p><h3 id="朴素匹配算法"><a href="#朴素匹配算法" class="headerlink" title="朴素匹配算法"></a>朴素匹配算法</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//朴素匹配算法#include &lt;iostream&gt;using namespace std;int test(){    char a[10],b[10];    cin&gt;&gt;a;    cin&gt;&gt;b;    int i =0;int j=0;    while(a[i]!='\0' &amp;&amp; b[j]!='\0'){        if(a[i]==b[j]){            i++;            j++;        }else{            i=i-j+1;            j=0;        }    }    if(b[j]=='\0'){//如果子串指向了\0，返回匹配的位置        return i-j;    }else{//如果没有找到，指向的是主串的\0运行else        return -1;    }}int main(){    int m=test();    if(m==-1){        cout &lt;&lt;"匹配失败";    }else{        cout &lt;&lt;"匹配的位置是:"&lt;&lt;m;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算是暴力求解</p><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><hr><h2 id="四、树"><a href="#四、树" class="headerlink" title="四、树"></a>四、树</h2><p>主要讨论二叉树</p><h3 id="顺序储存"><a href="#顺序储存" class="headerlink" title="顺序储存"></a>顺序储存</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//顺序存储结构#include&lt;iostream&gt;using namespace std;#define Max 100#define ElemType inttypedef ElemType BiTree[Max];//定义二叉树class Mytree{private:    BiTree tree;    int size = 0;public:    Mytree(){}    void InitBiTree();//初始化一个树    void printBiTree();//遍历树(层次遍历)    ElemType FindParent(ElemType e);//查找父节点    ElemType LeftChild(ElemType e);//查找左孩子    ElemType RightChild(ElemType e);//查找有孩子    ElemType Gettree(ElemType e);//获取节点值    bool EmptyTree();//判断是否是空树};void Mytree::InitBiTree(){    ElemType node;    cout&lt;&lt;"请按层次从左向右输入节点,空节点用0表示,按1010停止输入"&lt;&lt;endl;    int i = 1;    while(cin&gt;&gt;node){        if(node == 1010){            break;        }        tree[i] = node;        i++;        size++;    }}void Mytree::printBiTree(){    //层次遍历    for(int i =1;i&lt;=size;i++){        cout&lt;&lt;tree[i]&lt;&lt;" ";    }    cout&lt;&lt;endl;}ElemType Mytree::FindParent(ElemType e){    if(EmptyTree()) cout&lt;&lt;"这是个空树"&lt;&lt;endl;    if(e == 1) cout&lt;&lt;"根节点没有父节点"&lt;&lt;endl;    if(tree[e] == 0) { cout&lt;&lt;"不存在这个节点"; return -1;}    for(int i =2;i&lt;=size;i++){        if(i == e){            return tree[i/2];        }    }    return -1;}ElemType Mytree::LeftChild(ElemType e){    if(EmptyTree()) cout&lt;&lt;"这是个空树"&lt;&lt;endl;    if(tree[e] == 0) { cout&lt;&lt;"不存在这个节点"; return -1;}    for(int i =2;i&lt;=size;i++){        if(i == e){            if(i*2&lt;size &amp;&amp; tree[i*2]!=0){                return tree[i*2];            }else{                cout&lt;&lt;"当前节点没有左孩子"&lt;&lt;endl;            }        }    }    return -1;}   ElemType Mytree::RightChild(ElemType e){    if(EmptyTree()) cout&lt;&lt;"这是个空树"&lt;&lt;endl;    if(tree[e] == 0) { cout&lt;&lt;"不存在这个节点"; return -1;}    for(int i =2;i&lt;=size;i++){        if(i == e){            if(i*2+1&lt;size &amp;&amp; tree[i*2+1]!=0){                return tree[i*2+1];            }else{                cout&lt;&lt;"当前节点没有右孩子"&lt;&lt;endl;            }        }    }    return -1;}bool Mytree::EmptyTree(){    if(size == 0){        return true;    }else{        return false;    }}ElemType Mytree::Gettree(ElemType e){    return tree[e];}int main(){    Mytree a;    int tmp;    a.InitBiTree();    a.printBiTree();    cout&lt;&lt;"-----------------"&lt;&lt;endl;    cout&lt;&lt;"请输入想要查询的节点"&lt;&lt;endl;    cin&gt;&gt;tmp;    cout&lt;&lt;"这个节点的的值是："&lt;&lt;a.Gettree(tmp)&lt;&lt;endl;    cout&lt;&lt;"这个节点的父节点："&lt;&lt;a.FindParent(tmp)&lt;&lt;endl;    cout&lt;&lt;"这个节点的左孩子："&lt;&lt;a.LeftChild(tmp)&lt;&lt;endl;    cout&lt;&lt;"这个节点的右孩子："&lt;&lt;a.RightChild(tmp)&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式适合存储完全二叉树，不然的话会浪费大量空间</p><h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;#define ElemType inttypedef struct BiTreeNode//定义结构体{    ElemType  data; //数据域    BiTreeNode *lChild;//左孩子    BiTreeNode *rChlid;//右孩子} BiTreeNode, *BiTree;//先序创建二叉树void CreateBiTree(BiTree &amp;T){    ElemType ch;    cin &gt;&gt; ch;    if (ch == -1)        T = NULL;    else    {        T = new BiTreeNode;        T-&gt;data = ch;        CreateBiTree(T-&gt;lChild);        CreateBiTree(T-&gt;rChlid);    }}//中序遍历void GetMid(BiTree T){    if(T){        GetMid(T-&gt;lChild);        cout&lt;&lt;T-&gt;data&lt;&lt;" ";        GetMid(T-&gt;rChlid);    }}//先序遍历void GetFrist(BiTree T){    if(T){        cout&lt;&lt;T-&gt;data&lt;&lt;" ";        GetMid(T-&gt;lChild);        GetMid(T-&gt;rChlid);    }}//后序遍历void GetLast(BiTree T){    if(T){        GetMid(T-&gt;lChild);        GetMid(T-&gt;rChlid);        cout&lt;&lt;T-&gt;data&lt;&lt;" ";    }}int main(void){    BiTree T;    cout&lt;&lt;"请输入先序遍历顺序下各个结点的值,-1表示没有结点:"&lt;&lt;endl;    CreateBiTree(T);    GetMid(T);    cout&lt;&lt;endl;    cout&lt;&lt;"---------------"&lt;&lt;endl;    GetFrist(T);    cout&lt;&lt;endl;    cout&lt;&lt;"---------------"&lt;&lt;endl;    GetLast(T);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二叉树的链式存储递归用的比较多</p><h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;iomanip&gt;using namespace std;typedef struct HuFuNode{int weight;int parent, LTree, RTree;}HuFuNode, *PHuFuNode;void Select(PHuFuNode HuFuNode, int n, int &amp;s1, int &amp;s2)    {    for(int i = 1; i &lt; n; i++){                 if(HuFuNode[i].parent == 0){                 s1 = i;            break;                                  }    }    for(int i = 1; i &lt; n; i++){                     if(HuFuNode[i].parent == 0 &amp;&amp; HuFuNode[s1].weight &gt; HuFuNode[i].weight)                s1 = i;    }    for(int j = 1; j &lt; n; j++){                if(HuFuNode[j].parent == 0 &amp;&amp; j != s1){            s2 = j;            break;        }    }    for(int j = 1; j &lt; n; j++){                 if(HuFuNode[j].parent == 0 &amp;&amp; HuFuNode[s2].weight &gt; HuFuNode[j].weight &amp;&amp; j != s1)            s2 = j;    }}void initHuFuNode(PHuFuNode &amp;H, int n){if(n &lt;= 1) return;int m = 2*n - 1;            //数组共2n - 1个元素H = new HuFuNode[m + 1];//0号单元未用，H[m]表示根节点    for(int i = 1; i &lt;= m; i++){        H[i].parent = 0;        H[i].LTree = 0;        H[i].RTree = 0;    }for(int i = 1; i &lt;= n; i++)        cin &gt;&gt; H[i].weight;    cout &lt;&lt; endl;    for(int i = n + 1; i &lt;= m; i++)             {        int s1, s2;        Select(H, i, s1, s2);        H[s1].parent = i;        H[s2].parent = i;           H[i].LTree = s1;        H[i].RTree = s2;        H[i].weight = H[s1].weight + H[s2].weight;    }    for(int i =1 ;i&lt;=m;i++){        cout&lt;&lt;H[i].weight&lt;&lt;" ";    }}int main(){    PHuFuNode HuFuNode;    int n = 0;    cin &gt;&gt; n;    initHuFuNode(HuFuNode, n);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;#define Elemtype int#define max 100using namespace std;//哈曼树定义typedef struct HuffCode{    Elemtype weight;//权重    int lchild;    int rchild;    int parent;//定义左右孩子，双亲节点}codeNode,Huffmancode[max];typedef char** cd;//第一个参数是传入数组，第二个值是数组遍历的终点值，用s1,s2返回两个最小值void select(Huffmancode HC,int n,int&amp; s1,int&amp; s2){    for(int i = 1;i&lt;n;i++){        if(HC[i].parent==0){            s1 = i;            break;        }    }    for(int i = 1;i&lt;n;i++){        if(HC[i].parent==0 &amp;&amp; HC[s1].weight&gt;HC[i].weight){            s1 = i;        }    }    for(int j = 1;j&lt;n;j++){        if(HC[j].parent==0 &amp;&amp; j!=s1){            s2 = j;            break;        }    }    for(int j = 1;j&lt;n;j++){        if(HC[j].parent==0 &amp;&amp; HC[s2].weight&gt;HC[j].weight &amp;&amp; j!=s1){            s2 = j;        }    }}//哈夫曼树的构建void Creat_Huff(Huffmancode&amp; HC,int n){//n为节点数量    int m = 2*n-1;//需要m大小的数组存数据    int i,s1,s2;//s1,s2用来返回最小的两个值    for(i=1;i&lt;=n;i++){//初始化        HC[i].parent = 0;        HC[i].lchild = 0;        HC[i].rchild = 0;        cin&gt;&gt;HC[i].weight;    }    //处理后面的节点    for(i=n+1;i&lt;=m;i++){        HC[i].parent = 0;        HC[i].lchild = 0;        HC[i].rchild = 0;        HC[i].weight = 0;    }    //选出数组中最小的两个树，构建哈夫曼树    for(i=n+1;i&lt;=m;i++){        select(HC,i,s1,s2);        HC[i].weight = HC[s1].weight+HC[s2].weight;        HC[i].lchild = s1;        HC[i].rchild = s2;        HC[s1].parent = i;        HC[s2].parent = i;    }    cout&lt;&lt;"n"&lt;&lt;"     "&lt;&lt;"w"&lt;&lt;"      "&lt;&lt;"p"&lt;&lt;"      "&lt;&lt;"l"&lt;&lt;"       "&lt;&lt;"r"&lt;&lt;endl;    for(int i = 1;i&lt;=m;i++){        cout&lt;&lt;i&lt;&lt;"     "&lt;&lt;HC[i].weight&lt;&lt;"      "&lt;&lt;HC[i].parent&lt;&lt;"     "&lt;&lt;HC[i].lchild&lt;&lt;"      "&lt;&lt;HC[i].rchild&lt;&lt;endl;        cout&lt;&lt;left;    }}//----------------------------------------------------以上是哈夫曼树的实现在上一节已经实现//哈夫曼编码实现void Creat_code(Huffmancode&amp; HC,cd&amp; code,int n){    code = new char*[n+1]; //分配n个字符编码的头指针矢量    char* a = new char[n];//分配临时变量用来存编码    a[n-1] = '\0';//编码结束符    for(int i =1;i&lt;=n;i++){//逐个字符求哈夫曼编码        int start = n-1;//开始存放的位置，因为n-1位放的是\0，起始设置在\0        int c = i;//要找的节点c        int f = HC[i].parent;//设置双亲节点的初始值        while(f!=0){//从叶子节点开始回溯，寻找双亲节点为0的位置，也就是根节点            --start;//初始strar指向\0            if(HC[f].lchild == c){                a[start]='0';//双亲节点的左孩子为c则设置为0            }else{                a[start]='1';            }            c = f;//将这个双亲节点变为孩子节点            f = HC[f].parent;//下一个要找的双亲节点位置        }        code[i] = new char [n-start];        strcpy(code[i],&amp;a[start]);    }    delete a;}int main(){    Huffmancode HC;//创建哈夫曼树    int n;    cin&gt;&gt;n;    cd code;    Creat_Huff(HC,n);    Creat_code(HC,code, n);    for(int i =1;i&lt;=n;i++){        cout&lt;&lt;code[i]&lt;&lt;" ";    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、图"><a href="#五、图" class="headerlink" title="五、图"></a>五、图</h2><h3 id="邻接矩阵存储"><a href="#邻接矩阵存储" class="headerlink" title="邻接矩阵存储"></a>邻接矩阵存储</h3><p>实现步骤</p><ol><li>输入节点数，和边数</li><li>输入节点信息，存入一个数组中</li><li>初始化邻接矩阵，如果是图初始化为0，如果是网，初始化无穷大</li><li>依次输入每条边依附的两个节点，如果有权值，还要输入权值</li></ol><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;bits/stdc++.h&gt;/* 1. 输入节点数，和边数2. 输入节点信息，存入一个数组中3. 初始化邻接矩阵，如果是图初始化为0，如果是网，初始化无穷大4. 依次输入每条边依附的两个节点，如果有权值，还要输入权值 *///两个数组一个用来存顶点表，一个用来存邻接矩阵using namespace std;#define min 0 //初始化值#define MAXNum 100typedef char vre;//顶点的数据类型typedef int arc;//边的权值typedef struct{    vre v[MAXNum];//创建顶点表    arc a[MAXNum][MAXNum];//创建邻接矩阵    int spot,side;//顶点数和边数}AMGraph;int LocateVex(AMGraph G,int v1){    for(int i =0;i&lt;G.spot;i++){        if(G.v[i] == v1){            return i;        }    }    return 0;}//创建无向网void Creat_UDN(AMGraph&amp; G){    char v1,v2;    int w;    cout&lt;&lt;"分别输入节点和边的数量"&lt;&lt;endl;    cin&gt;&gt;G.spot&gt;&gt;G.side;//输入边和点    cout&lt;&lt;"输入节点信息"&lt;&lt;endl;    for(int i =0;i&lt;G.spot;i++){        cin&gt;&gt;G.v[i];//输入点的信息    }    for(int i =0;i&lt;G.spot;i++){        for(int j =0;j&lt;G.spot;j++){            G.a[i][j] = min;//设置边的权值        }    }//初始化边    cout&lt;&lt;"输入每条边依附的节点以及权值"&lt;&lt;endl;    for(int k =0;k&lt;G.side;k++){            cin&gt;&gt;v1&gt;&gt;v2&gt;&gt;w;        int i = LocateVex(G,v1);        int j = LocateVex(G,v2);        G.a[i][j] = w;        //cout&lt;&lt;G.a[i][j]&lt;&lt;" ";        G.a[j][i] = G.a[i][j]  ;        //cout&lt;&lt;G.a[j][i]&lt;&lt;endl;    }    cout&lt;&lt;"图的邻接矩阵为:"&lt;&lt;endl;    for (int i = 0; i &lt; G.spot; i++)    {        for(int j=0;j&lt;G.spot;j++){            cout&lt;&lt;G.a[i][j]&lt;&lt;" ";        }        cout&lt;&lt;endl;    }    }int main(){    AMGraph G;    Creat_UDN(G);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="邻接表存储"><a href="#邻接表存储" class="headerlink" title="邻接表存储"></a>邻接表存储</h3>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无人机仿真搭建</title>
      <link href="/2022/05/09/ubuntu18-xia-wu-ren-ji-fang-zhen/"/>
      <url>/2022/05/09/ubuntu18-xia-wu-ren-ji-fang-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="基于ubuntu18无人机仿真环境搭建"><a href="#基于ubuntu18无人机仿真环境搭建" class="headerlink" title="基于ubuntu18无人机仿真环境搭建"></a>基于ubuntu18无人机仿真环境搭建</h1><h2 id="1-安装相关依赖"><a href="#1-安装相关依赖" class="headerlink" title="1.安装相关依赖"></a>1.安装相关依赖</h2><pre class="line-numbers language-none"><code class="language-none">sudo apt install ninja-build exiftool ninja-build protobuf-compiler libeigen3-dev genromfs xmlstarlet libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pip2 install pandas jinja2 pyserial cerberus pyulog==0.7.0 numpy toml pyquaternion empy pyyaml pip3 install packaging numpy empy toml pyyaml jinja2 pyargparse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装依赖过程比较缓慢，要先换国内的源</p><h2 id="2-ros的安装"><a href="#2-ros的安装" class="headerlink" title="2.ros的安装"></a>2.ros的安装</h2><pre class="line-numbers language-none"><code class="language-none">sudo apt updatesudo apt install ros-melodic-desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>18.04对应ros版本是melodic，每个版本不一样</p><p>设定环境</p><pre class="line-numbers language-none"><code class="language-none">echo "source /opt/ros/melodic/setup.bash" &gt;&gt; ~/.bashrcsource ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>软件包依赖</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essentialsudo apt install python-rosdepsudo rosdep init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装完成打开终端运行</p><pre class="line-numbers language-none"><code class="language-none">roscore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行成功如下</p><pre class="line-numbers language-none"><code class="language-none">... logging to /home/robin/.ros/log/a5118af0-5474-11ea-8b86-e454e828c524/rChecking log directory for disk usage. This may take awhile.Press Ctrl-C to interruptDone checking log file disk usage. Usage is &lt;1GB.started roslaunch server http://robin-G3-3590:34223/ros_comm version 1.12.14SUMMARY========PARAMETERS* /rosdistro: kinetic* /rosversion: 1.12.14NODESauto-starting new masterprocess[master]: started with pid [30244]ROS_MASTER_URI=http://robin-G3-3590:11311/setting /run_id to a5118af0-5474-11ea-8b86-e454e828c524process[rosout-1]: started with pid [30261]started core service [/rosout]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来可以打开下午试一试，再打开一个终端输入</p><pre class="line-numbers language-none"><code class="language-none">roscore rosrun turtlesim turtlesim_node <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后创建一个自己的工作空间</p><pre class="line-numbers language-none"><code class="language-none">mkdir -p ~/catkin_ws/srcmkdir -p ~/catkin_ws/scriptscd catkin_ws/src catkin_init_workspacecd .. catkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-gazebo的安装"><a href="#3-gazebo的安装" class="headerlink" title="3.gazebo的安装"></a>3.gazebo的安装</h2><p>这里先把ros自动下载的gazebo先卸载</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get remove gazebo* sudo apt-get remove libgazebo*sudo apt-get remove ros-melodic-gazebo* <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 1.设置计算机以接受来自package.osrfoundation.org的软件 </p><p>这里一定要设置不然后面px4安装会有问题</p><pre class="line-numbers language-none"><code class="language-none">sudo sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" &gt; /etc/apt/sources.list.d/gazebo-stable.list'cat /etc/apt/sources.list.d/gazebo-stable.list#如果出现deb http://packages.osrfoundation.org/gazebo/ubuntu-stable xenial main表示没问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>设置密钥</p><pre class="line-numbers language-none"><code class="language-none">wget https://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装9.1版本</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install gazebo9=9.1*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后运行gazebo如果成功打开则安装成功</p><p>安装ros的gazebo的插件</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install ros-melodic-gazebo9-*sudo apt install ros-melodic-gazebo-*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试先运行roscore然后再打开一个终端</p><pre class="line-numbers language-none"><code class="language-none">rosrun gazebo_ros gazebo <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-MAVROS安装"><a href="#4-MAVROS安装" class="headerlink" title="4.MAVROS安装"></a>4.MAVROS安装</h2><pre class="line-numbers language-none"><code class="language-none">sudo apt install ros-kinetic-mavros ros-kinetic-mavros-extras # for ros-kineticsudo apt install ros-melodic-mavros ros-melodic-mavros-extras # for ros-melodicwget https://gitee.com/robin_shaun/XTDrone/raw/master/sitl_config/mavros/install_geographiclib_datasets.shsudo chmod a+x ./install_geographiclib_datasets.shsudo ./install_geographiclib_datasets.sh  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一步可能会卡着不动，多等一会</p><h2 id="5-px4安装"><a href="#5-px4安装" class="headerlink" title="5.px4安装"></a>5.px4安装</h2><p>官方给的github在国内实在太慢了，而且容易漏下，我自己本人用github是没有成功过的，这里就用gitee的镜像</p><p>这个是github的地址，如果有条件建议最好还是GitHub下，比较方便</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/PX4/PX4-Autopilot.gitmv PX4-Autopilot PX4_Firmwarecd PX4_Firmwaregit checkout -b xtdrone/dev v1.11.0-beta1git submodule update --init --recursivemake px4_sitl_default gazebo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个是gitee的</p><pre class="line-numbers language-none"><code class="language-none">git clone https://gitee.com/robin_shaun/PX4_Firmwarecd PX4_Firmwaregit checkout -b xtdrone/dev v1.11.0-beta1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在工作空间下ctrl+h找到隐藏文件 .gitmodules 修改</p><pre class="line-numbers language-none"><code class="language-none">[submodule "mavlink/include/mavlink/v2.0"]path = mavlink/include/mavlink/v2.0url = https://gitee.com/robin_shaun/c_library_v2.gitbranch = master[submodule "src/drivers/uavcan/libuavcan"]path = src/drivers/uavcan/libuavcanurl = https://gitee.com/robin_shaun/uavcan.gitbranch = px4[submodule "Tools/jMAVSim"]path = Tools/jMAVSimurl = https://gitee.com/robin_shaun/jMAVSim.gitbranch = master[submodule "Tools/sitl_gazebo"]path = Tools/sitl_gazebourl = https://gitee.com/robin_shaun/sitl_gazebo.gitbranch = master[submodule "src/lib/matrix"]path = src/lib/matrixurl = https://gitee.com/robin_shaun/Matrix.gitbranch = master[submodule "src/lib/ecl"]path = src/lib/eclurl = https://gitee.com/robin_shaun/ecl.gitbranch = master[submodule "boards/atlflight/cmake_hexagon"]path = boards/atlflight/cmake_hexagonurl = https://gitee.com/robin_shaun/cmake_hexagon.gitbranch = px4[submodule "src/drivers/gps/devices"]path = src/drivers/gps/devicesurl = https://gitee.com/robin_shaun/GpsDrivers.gitbranch = master[submodule "src/modules/micrortps_bridge/micro-CDR"]path = src/modules/micrortps_bridge/micro-CDRurl = https://gitee.com/robin_shaun/micro-CDR.gitbranch = px4[submodule "platforms/nuttx/NuttX/nuttx"]path = platforms/nuttx/NuttX/nuttxurl = https://gitee.com/robin_shaun/NuttX.gitbranch = px4_firmware_nuttx-9.1.0+[submodule "platforms/nuttx/NuttX/apps"]path = platforms/nuttx/NuttX/appsurl = https://gitee.com/robin_shaun/NuttX-apps.gitbranch = px4_firmware_nuttx-9.1.0+[submodule "platforms/qurt/dspal"]path = platforms/qurt/dspalurl = https://gitee.com/robin_shaun/dspal.git[submodule "Tools/flightgear_bridge"]path = Tools/flightgear_bridgeurl = https://gitee.com/robin_shaun/PX4-FlightGear-Bridge.gitbranch = master [submodule "Tools/jsbsim_bridge"]path = Tools/jsbsim_bridgeurl = https://gitee.com/robin_shaun/px4-jsbsim-bridge.git[submodule "src/examples/gyro_fft/CMSIS_5"]path = src/examples/gyro_fft/CMSIS_5url = https://gitee.com/mirrors/CMSIS_5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 执行子模块更新指令 </p><pre class="line-numbers language-none"><code class="language-none">git submodule update --init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 更改子模块下的submodule： </p><ol><li></li></ol><pre class="line-numbers language-none"><code class="language-none">cd ~/PX4_Firmware/src/drivers/uavcan/libuavcan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 修改.gitmodules：（要先到PX4_Firmware/src/drivers/uavcan/libuavcan这个文件夹中找到.gitmodules这个文件，下面也是同样） </p><pre class="line-numbers language-none"><code class="language-none">[submodule "dsdl"]path = dsdlurl = https://gitee.com/robin_shaun/dsdlbranch = legacy-v0[submodule "libuavcan/dsdl_compiler/pyuavcan"]path = libuavcan/dsdl_compiler/pyuavcanurl = https://gitee.com/robin_shaun/pyuavcan[submodule "libuavcan_drivers/kinetis"]path = libuavcan_drivers/kinetisurl = https://gitee.com/robin_shaun/libuavcan_kinetis.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git submodule update --init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li></li></ol><pre class="line-numbers language-none"><code class="language-none">cd ~/PX4_Firmware/src/drivers/uavcan/libuavcan/libuavcan/dsdl_compiler/pyuavcan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 修改.gitmodules： </p><pre class="line-numbers language-none"><code class="language-none">[submodule "dsdl"]path = dsdlurl = https://gitee.com/robin_shaun/dsdl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li></li></ol><pre class="line-numbers language-none"><code class="language-none">cd ~/PX4_Firmware/Tools/jMAVSim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 修改.gitmodules： </p><pre class="line-numbers language-none"><code class="language-none">[submodule "jMAVlib"]path = jMAVliburl = https://gitee.com/robin_shaun/jMAVlibbranch = master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git submodule update --init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li></li></ol><pre class="line-numbers language-none"><code class="language-none">cd ~/PX4_Firmware/Tools/sitl_gazebo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 修改.gitmodules：</p><pre class="line-numbers language-none"><code class="language-none">[submodule "external/OpticalFlow"]path = external/OpticalFlowurl = https://gitee.com/robin_shaun/OpticalFlow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git submodule update --init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li></li></ol><pre class="line-numbers language-none"><code class="language-none">cd ~/PX4_Firmware/platforms/qurt/dspal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 修改.gitmodules： </p><pre class="line-numbers language-none"><code class="language-none">[submodule "cmake_hexagon"]path = cmake_hexagonurl = https://gitee.com/robin_shaun/cmake_hexagon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git submodule update --init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li></li></ol><pre class="line-numbers language-none"><code class="language-none">cd ~/PX4_Firmware/Tools/sitl_gazebo/external/OpticalFlow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 修改.gitmodules： </p><pre class="line-numbers language-none"><code class="language-none">[submodule "external/klt_feature_tracker"]path = external/klt_feature_trackerurl = https://gitee.com/robin_shaun/klt_feature_tracker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git submodule update --init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装python依赖</p><pre class="line-numbers language-none"><code class="language-none">cd ~/PX4_Firmwarebash ./Tools/setup/ubuntu.sh --no-nuttx --no-sim-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译</p><pre class="line-numbers language-none"><code class="language-none">make px4_sitl_default gazebo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置路径</p><pre class="line-numbers language-none"><code class="language-none">source ~/catkin_ws/devel/setup.bashsource ~/PX4_Firmware/Tools/setup_gazebo.bash ~/PX4_Firmware/ ~/PX4_Firmware/build/px4_sitl_defaultexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/PX4_Firmwareexport ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/PX4_Firmware/Tools/sitl_gazebo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">source ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行命令会打开gazebo</p><pre class="line-numbers language-none"><code class="language-none">cd ~/PX4_Firmwareroslaunch px4 mavros_posix_sitl.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在打开一个终端运行</p><pre class="line-numbers language-none"><code class="language-none">rostopic echo /mavros/state<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 若connected: True,则说明MAVROS与SITL通信成功。如果是false，一般是因为.bashrc里的路径写的不对，请仔细检查。 </p><h2 id="6-地面站安装"><a href="#6-地面站安装" class="headerlink" title="6.地面站安装"></a>6.地面站安装</h2><pre class="line-numbers language-none"><code class="language-none">sudo usermod -a -G dialout $USERsudo apt-get remove modemmanager -ysudo apt install gstreamer1.0-plugins-bad gstreamer1.0-libav gstreamer1.0-gl -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装成功后把文件移动到主文件下</p><pre class="line-numbers language-none"><code class="language-none">chmod +x ./QGroundControl.AppImage./QGroundControl.AppImage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="ros基础"><a href="#ros基础" class="headerlink" title="ros基础"></a>ros基础</h1><h2 id="创建ros功能包"><a href="#创建ros功能包" class="headerlink" title="创建ros功能包"></a>创建ros功能包</h2><h3 id="1-创建工作空间"><a href="#1-创建工作空间" class="headerlink" title="1.创建工作空间"></a>1.创建工作空间</h3><p>工作空间是存放相关开发文件的也就是工程目录 </p><p>src：代码空间  存放功能包及其配置文件以及launch文件 </p><p>build：编译空间  编译中所产生的中间文件，即二进制文件 </p><p>devel ：开发空间  编译生成的<a href="https://so.csdn.net/so/search?q=%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6&amp;spm=1001.2101.3001.7020">可执行文件</a>，库，脚 </p><p>install：安装空间  安装空间，使用安装指令时的默认文件存储位置 </p><p><img src="/2022/05/09/ubuntu18-xia-wu-ren-ji-fang-zhen/6fcbe324ed4ae766dc06db76660d3ff-1652691188915.png" alt="6fcbe324ed4ae766dc06db76660d3ff"></p><p>创建工作空间</p><p><img src="/2022/05/09/ubuntu18-xia-wu-ren-ji-fang-zhen/0a42a183c92e9b6f3bff29472454763.png" alt="0a42a183c92e9b6f3bff29472454763"></p><h3 id="2-创建一个catkin功能包"><a href="#2-创建一个catkin功能包" class="headerlink" title="2.创建一个catkin功能包"></a>2.创建一个catkin功能包</h3><p>首先回到工作空间的src目录下，创建catkin功能包</p><pre class="line-numbers language-none"><code class="language-none">catkin_create_pkg this std_msgs roscpp rospy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面接的三个东西是这个这个功能包的依赖</p><p>这会创建一个名为this的文件夹，这个文件夹包含一个package.xml文件和一个CMakeLists.txt文件</p><p>package.xml</p><p>文件提供有关功能包的元信息 如作者，依赖的其他功能包等 </p><p>CMakeLists.txt包</p><p> 这个文件直接规定了这个package要依赖哪些package，要编译生成哪些目标，如何编译等等</p><p><strong>同一个工作空间下不允许出现相同的名称的功能包</strong>  </p><ul><li><strong>主文件夹：自己用户名命名的目录下</strong></li><li><strong>catkin_ws可以不同，但后面的src一定要相同</strong></li><li><strong>要在工作空间的根目录上进行编译</strong></li></ul><p><img src="/2022/05/09/ubuntu18-xia-wu-ren-ji-fang-zhen/3133a0038d6893a58eaeae682ae36d9.png" alt="3133a0038d6893a58eaeae682ae36d9"></p><ul><li><strong>install,dev功能类似，install更多强调在开发后分享给客户使用的结果文件</strong></li><li><strong>源码要放在功能包中</strong></li><li><strong>include文件夹：包含头文件等</strong></li><li><strong>source的原因：运行前要设置环境变量</strong></li></ul><h2 id="发布者-amp-订阅者的实现"><a href="#发布者-amp-订阅者的实现" class="headerlink" title="发布者&amp;订阅者的实现"></a>发布者&amp;订阅者的实现</h2><p><img src="/2022/05/09/ubuntu18-xia-wu-ren-ji-fang-zhen/185ae8e07826f1c2fe24c70273e8e2d.png" alt="185ae8e07826f1c2fe24c70273e8e2d"></p><p>发布者向话题发布Twist类型的话题，订阅者订阅该话题</p><h3 id="1-简易发布者代码"><a href="#1-简易发布者代码" class="headerlink" title="1.简易发布者代码"></a>1.简易发布者代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ros/ros.h"</span> <span class="token comment">//该头文件必须包含</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"std_msgs/String.h"</span> <span class="token comment">//ros标准消息里面的字符串消息</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream&gt;</span></span><span class="token comment">/** * 在一个话题上发布一个简单的字符串消息 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/** * ros::init()初始化节点函数需要使用argc和argv，不能缺少这两个参数，与话题重映射等有关的 */</span>ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//节点名为study，随便取</span><span class="token comment">/** *NodeHandle是与ROS系统通信的主要访问点（句柄）,有了它节点就可以“说话了”（在话题上发布消息） * 构造的第一个NodeHandle将完全初始化该节点，最后一个被析构的NodeHandle将关闭该节点。 */</span>ros<span class="token operator">::</span>NodeHandle n<span class="token punctuation">;</span><span class="token comment">/** * advertise()函数是你告诉ROS你想在给定的话题名上发布特定类型的消息。 * 在这个advertise()调用之后，master节点将通知任何试图订阅这个话题名称的节点，然后他们将与这个节点建立一个对等网络（peer to peer/P2P）连接。 * advertise()括号里面的第一个参数是话题名字，第二个参数是用于发布消息的消息队列的大小。 * &lt;&gt;里面指定消息的类型 */</span>ros<span class="token operator">::</span>Publisher chatter_pub <span class="token operator">=</span> n<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>std_msgs<span class="token operator">::</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">"chatter"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 循环频率10Hz 发布一个消息类型为std_msgs/String，命名为chatter的话题。     定义消息队列大小为1000，即超过1000条消息之后，旧的消息就会丢弃。 */</span>ros<span class="token operator">::</span>Rate <span class="token function">loop_rate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>ros<span class="token operator">::</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/** * 先创建一个消息对象。然后用数据填充它，最后发布它。 * 要查看消息结构在命令行使用rosmsg show std_msgs/String，其它消息类似默认roscpp会植入一个SIGINT处理机制，当按下Ctrl-C，就会让ros::ok()返回false,那循环就会结束。         ros::ok() 返回false的几种情况：         SIGINT收到(Ctrl-C)信号         另一个同名节点启动，会先中止之前的同名节点         ros::shutdown()被调用         所有的ros::NodeHandles被销毁 */</span>std_msgs<span class="token operator">::</span>String msg<span class="token punctuation">;</span>std<span class="token operator">::</span>stringstream ss<span class="token punctuation">;</span>ss <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world "</span> <span class="token operator">&lt;&lt;</span> count<span class="token punctuation">;</span>msg<span class="token punctuation">.</span>data <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 在终端打印字符串的内容，消息在ROS里面封装成类，类公有函数这些请去wiki上看API文档 */</span><span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * publish()函数是发送消息的函数，参数是消息对象。 * 消息类型要与n.advertise&lt;&gt;里面声明的一致。 */</span>chatter_pub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>ros<span class="token operator">::</span><span class="token function">spinOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发回调函数的，不订阅消息的话可删</span>loop_rate<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以10Hz循环，循环跑太快就在这里睡一会儿</span><span class="token operator">++</span>count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-编写订阅节点"><a href="#2-编写订阅节点" class="headerlink" title="2.编写订阅节点"></a>2.编写订阅节点</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ros/ros.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"std_msgs/String.h"</span></span><span class="token keyword">void</span> <span class="token function">chatterCallback</span><span class="token punctuation">(</span><span class="token keyword">const</span> std_msgs<span class="token operator">::</span>String<span class="token operator">::</span>ConstPtr<span class="token operator">&amp;</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"I heard: [%s]"</span><span class="token punctuation">,</span> msg<span class="token operator">-&gt;</span>data<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*    定义回调函数chatterCallback，当收到chatter话题的消息就会调用这个函数。    消息通过boost shared_ptr（共享指针）来传递。    但收到消息，通过ROS_INFO函数显示到终端  */</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"listener"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle n<span class="token punctuation">;</span>  ros<span class="token operator">::</span>Subscriber sub <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"chatter"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> chatterCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/*    定义订阅节点，名称为chatter，指定回调函数chatterCallback    但收到消息，则调用函数chatterCallback来处理。    参数1000，定义队列大小，如果处理不够快，超过1000，则丢弃旧的消息。   */</span>  ros<span class="token operator">::</span><span class="token function">spin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用此函数才真正开始进入循环处理，直到 ros::ok()返回false才停止。</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-构建节点"><a href="#3-构建节点" class="headerlink" title="3.构建节点"></a>3.构建节点</h3><p>在之前使用catkin_create_pkg创建包learning_rosing，会得到 package.xml 和 CMakeLists.txt两个文件</p><p><img src="/2022/05/09/ubuntu18-xia-wu-ren-ji-fang-zhen/1652952598439.png" alt="1652952598439"></p><p>增加如下代码到CMakeLists.txt：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">include_directories</span><span class="token punctuation">(</span>include $<span class="token punctuation">{</span>catkin_INCLUDE_DIRS<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">add_executable</span><span class="token punctuation">(</span>talker src<span class="token operator">/</span>talker<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>talker $<span class="token punctuation">{</span>catkin_LIBRARIES<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">add_executable</span><span class="token punctuation">(</span>listener src<span class="token operator">/</span>listener<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>listener $<span class="token punctuation">{</span>catkin_LIBRARIES<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此位置添加</p><p><img src="/2022/05/09/ubuntu18-xia-wu-ren-ji-fang-zhen/1652952791303.png" alt="1652952791303"></p><h3 id="4-编译并运行"><a href="#4-编译并运行" class="headerlink" title="4.编译并运行"></a>4.编译并运行</h3><pre class="line-numbers language-none"><code class="language-none">cd ~/catkin_wscatkin_makesource devel/setuo.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再打开一个终端运行</p><pre class="line-numbers language-none"><code class="language-none">roscore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再再打开一个终端运行</p><pre class="line-numbers language-none"><code class="language-none">rosrun learning_rosing talker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再再再打开一个终端运行</p><pre class="line-numbers language-none"><code class="language-none">rosrun learning_rosing listener<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果</p><p><img src="/2022/05/09/ubuntu18-xia-wu-ren-ji-fang-zhen/1652953805026.png" alt="1652953805026"></p><h2 id="服务端-amp-客户端的实现"><a href="#服务端-amp-客户端的实现" class="headerlink" title="服务端&amp;客户端的实现"></a>服务端&amp;客户端的实现</h2><h3 id="1-服务端节点"><a href="#1-服务端节点" class="headerlink" title="1.服务端节点"></a>1.服务端节点</h3><p>打开工作空间中对应的功能包，在src目录下新建一个c++文件 add_two_ints_server.cpp</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include "ros/ros.h"#include "learning_rosing/AddTwoInts.h"//learning_rosing/AddTwoInts.h是由编译系统自动根据我们先前创建的srv文件生成的对应该srv文件的头文件。bool add(beginner_tutorials::AddTwoInts::Request  &amp;req,         beginner_tutorials::AddTwoInts::Response &amp;res)//这个函数提供两个int值求和的服务，int值从request里面获取，而返回数据装入response内，这些数据类型都定义在srv文件内部，函数返回一个boolean值。{  res.sum = req.a + req.b;  ROS_INFO("request: x=%ld, y=%ld", (long int)req.a, (long int)req.b);  ROS_INFO("sending back response: [%ld]", (long int)res.sum);  return true;}int main(int argc, char **argv){  ros::init(argc, argv, "add_two_ints_server");  ros::NodeHandle n;  ros::ServiceServer service = n.advertiseService("add_two_ints", add);  //这里，service已经建立起来，并在ROS内发布出来。  ROS_INFO("Ready to add two ints.");  ros::spin();  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-编写客户端节点"><a href="#2-编写客户端节点" class="headerlink" title="2.编写客户端节点"></a>2.编写客户端节点</h3><p>打开工作空间中对应的功能包，在src目录下新建一个c++文件 add_two_ints_client.cpp</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include "ros/ros.h"#include "beginner_tutorials/AddTwoInts.h"#include &lt;cstdlib&gt;//在C里就是stdlib.h，在c++里就是cstdlib，里面封装了许多函数，例如malloc,free这些int main(int argc, char **argv){  ros::init(argc, argv, "add_two_ints_client");  if (argc != 3)  {    ROS_INFO("usage: add_two_ints_client X Y");    return 1;  }  ros::NodeHandle n;  ros::ServiceClient client = n.serviceClient&lt;beginner_tutorials::AddTwoInts&gt;("add_two_ints");    //这段代码为add_two_ints service创建一个client。//ros::ServiceClient 对象待会用来调用service。  beginner_tutorials::AddTwoInts srv;  srv.request.a = atoll(argv[1]);  srv.request.b = atoll(argv[2]);    /*这里，我们实例化一个由ROS编译系统自动生成的service类，并给其request成员赋值。一个service类包含两个成员request和response。同时也包括两个类定义Request和Response。*/  if (client.call(srv))  /*这段代码是在调用service。由于service的调用是模态过程（调用的时候占用进程阻止其他代码的执行），一旦调用完成，将返回调用结果。如果service调用成功，call()函数将返回true，srv.response里面的值将是合法的值。如果调用失败，call()函数将返回false，srv.response里面的值将是非法的。*/  {    ROS_INFO("Sum: %ld", (long int)srv.response.sum);  }  else  {    ROS_ERROR("Failed to call service add_two_ints");    return 1;  }  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（参考b站up主赵虚左【【Autolabor初级教程】ROS机器人入门】 <a href="https://www.bilibili.com/video/BV1Ci4y1L7ZZ/?share_source=copy_web&amp;vd_source=46305e689a1990fcb387e3066edbcdc8%EF%BC%89">https://www.bilibili.com/video/BV1Ci4y1L7ZZ/?share_source=copy_web&amp;vd_source=46305e689a1990fcb387e3066edbcdc8）</a></p><h1 id="零碎点"><a href="#零碎点" class="headerlink" title="零碎点"></a>零碎点</h1><h1 id="1-int-main-int-argc，char-argv"><a href="#1-int-main-int-argc，char-argv" class="headerlink" title="1.int main(int argc，char* argv[ ])"></a>1.int main(int argc，char* argv[ ])</h1><p>（1）C 语言规定 main 函数的参数只能有两个，还规定 argc 必须是整型变量，argv 必须是指向字符串的指针数组。</p><p>（2）argc 是命令行总的参数个数。</p><p>（3）char *argv[ ] 是指针数组，数组中的每个元素都是 char * 类型，即数组中每个元素都会指向一个字符串。<br>————————————————<br>版权声明：本文为CSDN博主「devilzcl」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_37205350/article/details/106048645">https://blog.csdn.net/qq_37205350/article/details/106048645</a></p><h1 id="XTD安装"><a href="#XTD安装" class="headerlink" title="XTD安装"></a>XTD安装</h1><pre class="line-numbers language-none"><code class="language-none">git clone https://gitee.com/robin_shaun/XTDrone.gitcd XTDronegit submodule update --init --recursivecp sensing/gimbal/gazebo_gimbal_controller_plugin.cpp ~/PX4-Autopilot/Tools/sitl_gazebo/src/cp sitl_config/init.d-posix/rcS ~/PX4-Autopilot/ROMFS/px4fmu_common/init.d-posix/cp sitl_config/worlds/* ~/PX4-Autopilot/Tools/sitl_gazebo/worlds/cp -r sitl_config/models/* ~/PX4-Autopilot/Tools/sitl_gazebo/models/ cp -r sitl_config/launch/* ~/PX4-Autopilot/launch/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="避坑"><a href="#避坑" class="headerlink" title="避坑"></a>避坑</h1><p>大部分问题是网络问题，一定要换国内源</p><p>不要一直在一个终端运行上面的指令</p><p>中间会遇到很多问题基本都可以百度到但是还是要准备好百度一整天的准备，每次执行完命令执行下source，</p><p>有时候百度不到的问题可以看看报错，很多时候有可能是路径问题</p><p>多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！多看官方文档！</p><p>参考文献： <a href="http://www.autolabor.com.cn/book/ROSTutorials/">Introduction · Autolabor-ROS机器人入门课程《ROS理论与实践》零基础教程</a> </p><p> <a href="http://wiki.ros.org/">Documentation - ROS Wiki</a> </p><p> <a href="https://gitee.com/robin_shaun/XTDrone/">XTDrone: 基于PX4、ROS和Gazebo的无人机通用仿真平台 (gitee.com)</a> </p><p> <a href="https://blog.csdn.net/qq_19469271/article/details/119963938">(64条消息) ROS+Gazebo+PX4仿真步骤_chen果冻的博客-CSDN博客</a> </p><p> <a href="https://mbot1.blog.csdn.net/article/details/106041494">(64条消息) PX4从放弃到精通（二）：ubuntu18.04配置px4编译环境及mavros环境_超维空间科技的博客-CSDN博客_px4 ubuntu</a> </p>]]></content>
      
      
      <categories>
          
          <category> ros仿真 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ros </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习</title>
      <link href="/2021/12/03/c-yu-yan-de-xue-xi/"/>
      <url>/2021/12/03/c-yu-yan-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>在C语言中最好使用#define 或者 const 以付符号代表数字常量</p><p>scanf 的输入会自动跳过空格，在某些特定的输入在遇到上一次的输入中残留的空格或者是空格则要清空缓存区,可以用getchar();</p><p>字符串常量用双引号引起来的字符串表示</p><p>strlen可以获取一个字符串的长度  也可以用 sizeof(）</p><h1 id="4-8"><a href="#4-8" class="headerlink" title="4.8"></a>4.8</h1><h2 id="7题"><a href="#7题" class="headerlink" title="7题"></a>7题</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;float.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> a<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token number">3.0</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> b<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token number">3.0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.4lf %.12lf %.16lf\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.4f %.12f %.16f\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>b<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>FLT_DIG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>DBL_DIG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8题"><a href="#8题" class="headerlink" title="8题"></a>8题</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">a</span> <span class="token expression"><span class="token number">3.785</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">b</span> <span class="token expression"><span class="token number">1.609</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">float</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">float</span> q<span class="token punctuation">,</span>w<span class="token punctuation">;</span>    q<span class="token operator">=</span>m<span class="token operator">*</span>a<span class="token punctuation">;</span>    w<span class="token operator">=</span>n<span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入行驶的英里数和消耗汽油的加仑数:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f %f\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"消耗每加仑行驶的英里数是:%.1f\n"</span><span class="token punctuation">,</span>n<span class="token operator">/</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"每一百公里消耗:%.1f"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>w<span class="token operator">/</span>q<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-2基本运算符"><a href="#5-2基本运算符" class="headerlink" title="5.2基本运算符"></a>5.2基本运算符</h1><h2 id="5-2-1-“-x3D-”"><a href="#5-2-1-“-x3D-”" class="headerlink" title="5.2.1  “=”"></a>5.2.1  “=”</h2><p>​这个“=”并不意味着相等，而是赋值，把右值赋给左值</p><p>​但是如果定义了#define 或者 const 的变量只可以做右值</p><p>​golf.c</p><p>​</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> jane<span class="token punctuation">,</span> tarzan<span class="token punctuation">,</span> cheeta<span class="token punctuation">;</span>cheeta <span class="token operator">=</span> tarzan <span class="token operator">=</span> jane <span class="token operator">=</span> <span class="token number">68</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" cheeta tarzan jane\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"First round score %4d %8d %8d\n"</span><span class="token punctuation">,</span> cheeta<span class="token punctuation">,</span> tarzan<span class="token punctuation">,</span>jane<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-2-“-”"><a href="#5-2-2-“-”" class="headerlink" title="5.2.2  “+”"></a>5.2.2  “+”</h2><p>​加法运算，相加的可以是常量也可以是变量</p><h2 id="5-2-3-“-”"><a href="#5-2-3-“-”" class="headerlink" title="5.2.3  “-”"></a>5.2.3  “-”</h2><p>​减法运算，同上，两者都被称为二元运算符，也即需要两个运算对象才能完成操作</p><h2 id="5-2-4-“-和-”"><a href="#5-2-4-“-和-”" class="headerlink" title="5.2.4  “-和+”"></a>5.2.4  “-和+”</h2><p>​这个是符号运算符</p><h2 id="5-2-5-“-“"><a href="#5-2-5-“-“" class="headerlink" title="5.2.5  “*“"></a>5.2.5  “*“</h2><p>​乘法运算</p><h3 id="平方表"><a href="#平方表" class="headerlink" title="平方表"></a>平方表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d %6d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> num <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指数增长"><a href="#指数增长" class="headerlink" title="指数增长"></a>指数增长</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SQUARES</span> <span class="token expression"><span class="token number">64</span> </span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">double</span> CROP <span class="token operator">=</span> <span class="token number">2E16</span><span class="token punctuation">;</span><span class="token keyword">double</span> current<span class="token punctuation">,</span> total<span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"square grains total "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fraction of \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" added grains "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"world total\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>total <span class="token operator">=</span> current <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d %13.2e %12.2e %12.2e\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> current<span class="token punctuation">,</span>total<span class="token punctuation">,</span> total <span class="token operator">/</span> CROP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> SQUARES<span class="token punctuation">)</span><span class="token punctuation">{</span>count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>current <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token operator">*</span> current<span class="token punctuation">;</span> total <span class="token operator">=</span> total <span class="token operator">+</span> current<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d %13.2e %12.2e %12.2e\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> current<span class="token punctuation">,</span>total<span class="token punctuation">,</span> total <span class="token operator">/</span> CROP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"That's all.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-6-”-x2F-“"><a href="#5-2-6-”-x2F-“" class="headerlink" title="5.2.6  ”/“"></a>5.2.6  ”/“</h2><p>​除法运算</p><p>​左侧是被除数，右侧是除数</p><p>​整数的除法和浮点数的除法不一样，浮点数除法的结果是浮点数，整数的结果是整数，整数没有小数部分，会自动省率小数部分，这一过程被称为截断</p><p>​divide.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"integer division: 5/4 is %d \n"</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"integer division: 6/3 is %d \n"</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"integer division: 7/4 is %d \n"</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"floating division: 7./4. is %1.2f \n"</span><span class="token punctuation">,</span> <span class="token number">7.</span> <span class="token operator">/</span> <span class="token number">4.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mixed division: 7./4 is %1.2f \n"</span><span class="token punctuation">,</span> <span class="token number">7.</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-7-运算优先级"><a href="#5-2-7-运算优先级" class="headerlink" title="5.2.7  运算优先级"></a>5.2.7  运算优先级</h2><p>常用运算与数学相同</p><h2 id="5-2-8优先级和求值顺序"><a href="#5-2-8优先级和求值顺序" class="headerlink" title="5.2.8优先级和求值顺序"></a>5.2.8优先级和求值顺序</h2><p>​rules.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> top<span class="token punctuation">,</span> score<span class="token punctuation">;</span>top <span class="token operator">=</span> score <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"top = %d, score = %d\n"</span><span class="token punctuation">,</span> top<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-3其他运算符"><a href="#5-3其他运算符" class="headerlink" title="5.3其他运算符"></a>5.3其他运算符</h1><h2 id="5-3-1-sizeof-和-size-t"><a href="#5-3-1-sizeof-和-size-t" class="headerlink" title="5.3.1 sizeof 和 size_t"></a>5.3.1 sizeof 和 size_t</h2><p>sizeof运算符是以字节为单位返回运算对象的大小，对象可以是具体的数据对象（变量名）或类型，如果运算的是类型则要括起来(float)</p><p>sizeof.c程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> intsize<span class="token punctuation">;</span>intsize <span class="token operator">=</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span>"n <span class="token operator">=</span> <span class="token operator">%</span>d<span class="token punctuation">,</span> n has <span class="token operator">%</span>zd bytes<span class="token punctuation">;</span> all ints have <span class="token operator">%</span>zdbytes<span class="token punctuation">.</span>\n"<span class="token punctuation">,</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> n<span class="token punctuation">,</span> intsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sizeof返回的 size_t 这种无符号的整数类型</p><p>(C99新增 %zd 用于printf()显示size_t类型的值，如果不支持c99也可以用%u %lu %zd代替)</p><h2 id="5-3-2-求模运算符-”-“"><a href="#5-3-2-求模运算符-”-“" class="headerlink" title="5.3.2 求模运算符 ”%“"></a>5.3.2 求模运算符 ”%“</h2><p> 求模运算符用于整数运算。求模运算符给出其左侧 整数除以右侧整数的余数</p><p> 求模运算符常用于控制程序流。例如，假设你正在设计一个账单预 263 算程序，每 3 个月要加进一笔额外的费用。这种情况可以在程序中对月份求 模3（即，month % 3），并检查结果是否为0。 如果为0，便加进额外的费 用。  </p><p>min_scc.c程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEC_PER_MIN</span> <span class="token expression"><span class="token number">60</span> </span><span class="token comment">// 1分钟60秒</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> sec<span class="token punctuation">,</span> min<span class="token punctuation">,</span> left<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Convert seconds to minutes and seconds!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the number of seconds (&lt;=0 to quit):\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sec<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取秒数</span><span class="token keyword">while</span> <span class="token punctuation">(</span>sec <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>min <span class="token operator">=</span> sec <span class="token operator">/</span> SEC_PER_MIN<span class="token punctuation">;</span> <span class="token comment">// 截断分钟数</span>left <span class="token operator">=</span> sec <span class="token operator">%</span> SEC_PER_MIN<span class="token punctuation">;</span> <span class="token comment">// 剩下的秒数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d seconds is %d minutes, %d seconds.\n"</span><span class="token punctuation">,</span> sec<span class="token punctuation">,</span>min<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter next value (&lt;=0 to quit):\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Done!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="负数求模"><a href="#负数求模" class="headerlink" title="负数求模"></a>负数求模</h3><p> 如果第1个运算对象是负数，那么求模的结 果为负数；如果第1个运算对象是正数，那么求模的结果也是正数 </p><p> 11 / 5得2，11 % 5得1 11 / -5得-2，11 % -2得1 -11 / -5得2，-11 % -5得-1 -11 / 5得-2，-11 % 5得-1 （c99规定的趋零截断）</p><p> 标准规 定：无论何种情况，只要a和b都是整数值，便可通过a - (a/b)*b来计算a%b </p><h2 id="5-3-3-递增运算符-”-“"><a href="#5-3-3-递增运算符-”-“" class="headerlink" title="5.3.3 递增运算符 ”++“"></a>5.3.3 递增运算符 ”++“</h2><p>两种方式一种++在变量之前，一种在变量之后，两者运算时间不同</p><p>例如：add_one.c程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> ultra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> super <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>super <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>super<span class="token operator">++</span><span class="token punctuation">;</span><span class="token operator">++</span>ultra<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"super = %d, ultra = %d \n"</span><span class="token punctuation">,</span> super<span class="token punctuation">,</span> ultra<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前缀是先递增，再运算，后缀是先运算在递增</p><h2 id="5-3-4-递减运算符-”-“"><a href="#5-3-4-递减运算符-”-“" class="headerlink" title="5.3.4 递减运算符 ”-“"></a>5.3.4 递减运算符 ”-“</h2><p>同上</p><p>bottles.c程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> count <span class="token operator">=</span> MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d bottles of spring water on the wall, "</span><span class="token string">"%d bottles of spring water!\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Take one down and pass it around,\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d bottles of spring water!\n\n"</span><span class="token punctuation">,</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-5-优先级"><a href="#5-3-5-优先级" class="headerlink" title="5.3.5 优先级"></a>5.3.5 优先级</h2><p> 递增运算符和递减运算符都有很高的结合优先级，只有圆括号的优先级 比它们高 </p><p> x*<em>y++表示的是(x)</em>(y++)，而不是(x+y)++ </p><p> 如果n++是表达式的一部分，可将其视为“先使用n，再递增”；而++n则 表示“先递增n，再使用”。  </p><h2 id="5-3-6-不要自作聪明"><a href="#5-3-6-不要自作聪明" class="headerlink" title="5.3.6 不要自作聪明"></a>5.3.6 不要自作聪明</h2><p> 如果一个变量出现在一个函数的多个参数中，不要对该变量使用递增或 递减运算符； 如果一个变量多次出现在一个表达式中，不要对该变量使用递增或递减 运算符。 另一方面，对于何时执行递增，C 还是做了一些保证。我们在本章后面 的“副作用和序列点”中学到序列点时再来讨论这部分内容。 </p><h1 id="5-4-表达式和语句"><a href="#5-4-表达式和语句" class="headerlink" title="5.4 表达式和语句"></a>5.4 表达式和语句</h1><h2 id="5-4-1-表达式"><a href="#5-4-1-表达式" class="headerlink" title="5.4.1 表达式"></a>5.4.1 表达式</h2><p> 表达式（expression）由运算符和运算对象组成 </p><p> 简单的表达式是一个单独的运算对象，以此为 基础可以建立复杂的表达式 </p><p> 运算对象可以是常量、变量或二者的组合。一些表达式由子 表达式（subexpression）组成（子表达式即较小的表达式）。例如，c/d是上 面例子中a*(b + c/d)/20的子表达式。  </p><p>***每个表达式都有一个值 ***</p><p> C 表达式的一个最重要的特性是，每个表达式都有一个值。要获得这个 值，必须根据运算符优先级规定的顺序来执行操作。 </p><h2 id="5-4-2-语句"><a href="#5-4-2-语句" class="headerlink" title="5.4.2 语句"></a>5.4.2 语句</h2><p> 一条语句相当于一条完整的 计算机指令 。大部分的语句都是以分号作为结尾的，比如 legd=4  这就是一个表达式，如果加上分号就是一个语句</p><p> 赋值表达式语句在程序中很常用：它为变量分配一个值。赋值表达式语 句的结构是，一个变量名，后面是一个赋值运算符，再跟着一个表达式，最 后以分号结尾。 </p><p> 函数表达式语句会引起函数调用。 </p><p> C语言的术语副作用（side effect）。副作用是对数据对 象或文件的修改。 </p><p> states = 50; 它的副作用是将变量的值设置为50。 </p><p> 序列点（sequence point）是程序执行的点，在该点上，所有的副作用都 在进入下一步之前发生。 </p><p> ***在 C语言中，语句中的分号标记了一个序列点。 ***</p><p> y = (4 + x++) + (6 + x++); 表达式4 + x++不是一个完整的表达式，所以C无法保证x在子表达式4 + x++求值后立即递增x。这里，完整表达式是整个赋值表达式语句，分号标记 了序列点。所以，C 保证程序在执行下一条语句之前递增x两次。C并未指明 是在对子表达式求值以后递增x，还是对所有表达式求值后再递增x。因此， 要尽量避免编写类似的语句。 </p><h2 id="5-4-3-复合语句-块"><a href="#5-4-3-复合语句-块" class="headerlink" title="5.4.3 复合语句 (块)"></a>5.4.3 复合语句 (块)</h2><p> 复合语句（compound statement）是用花括号括起来的一条或多条语句， 复合语句也称为块（block） </p><h1 id="5-5-类型转换"><a href="#5-5-类型转换" class="headerlink" title="5.5 类型转换"></a>5.5 类型转换</h1><p> 在语句和表达式中应使用类型相同的变量和常量。但是，如果使 用混合类型，C 不会像 Pascal那样停在那里死掉，而是采用一套规则进行自 动类型转换。 </p><h2 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>当类型转换出现在表达式时，无论是unsigned还是signed的char和short 都会被自动转换成int，如有必要会被转换成unsigned int（如果short与int的大 小相同，unsigned short就比int大。这种情况下，unsigned short会被转换成 unsigned int）。在K&amp;R那时的C中，float会被自动转换成double（目前的C不 是这样）。由于都是从较小类型转换为较大类型，所以这些转换被称为升级 （promotion）。 </p><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>涉及两种类型的运算，两个值会被分别转换成两种类型的更高级别。  </p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p> 3.类型的级别从高至低依次是long double、double、float、unsignedlong long、long long、unsigned long、long、unsigned int、int。例外的情况是，当 long 和 int 的大小相同时，unsigned int比long的级别高。之所以short和char类 型没有列出，是因为它们已经被升级到int或unsigned int。 </p><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><p> 在赋值表达式语句中，计算的最终结果会被转换成被赋值变量的类 型。这个过程可能导致类型升级或降级（demotion）。所谓降级，是指把一 种类型转换成更低级别的类型。 </p><h3 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h3><p> 当作为函数参数传递时，char和short被转换成int，float被转换成 double。 </p><p> 类型升级通常都不会有什么问题，但是类型降级会导致真正的麻烦。原 因很简单：较低类型可能放不下整个数字。 </p><p> 如果待转换的值与目标类型不匹配怎么办？这取决于转换涉及的类型。 待赋值的值与目标类型不匹配时，规则如下。 </p><p> 1.目标类型是无符号整型，且待赋的值是整数时，额外的位将被忽略。 例如，如果目标类型是 8 位unsigned char，待赋的值是原始值求模256。 2.如果目标类型是一个有符号整型，且待赋的值是整数，结果因实现而 异。 3.如果目标类型是一个整型，且待赋的值是浮点数，该行为是未定义 的。 </p><p> 如果把一个浮点值转换成整数类型会怎样？当浮点类型被降级为整数类 型时，原来的浮点值会被<em><strong>截断</strong></em>。 </p><h2 id="5-5-1-强制类型转换运算符"><a href="#5-5-1-强制类型转换运算符" class="headerlink" title="5.5.1 强制类型转换运算符"></a>5.5.1 强制类型转换运算符</h2><p> 通常，应该避免自动类型转换，尤其是类型降级。但是如果能小心使 用，类型转换也很方便。我们前面讨论的类型转换都是自动完成的。然而， 有时需要进行精确的类型转换，或者在程序中表明类型转换的意图。这种情 况下要用到强制类型转换（cast），即在某个量的前面放置用圆括号括起来 的类型名，该类型名即是希望转换成的目标类型。圆括号和它括起来的类型 名构成了强制类型转换运算符（cast operator），其通用形式是： (type) 用实际需要的类型（如，long）替换type即可。 </p><p> 赋值运算符： = 将其右侧的值赋给左侧的变量 算术运算符： + 将其左侧的值与右侧的值相加 - 将其左侧的值减去右侧的值 - 作为一元运算符，改变其右侧值的符号 * 将其左侧的值乘以右侧的值 / 将其左侧的值除以右侧的值，如果两数都是整数，计算结果 将被截断 % 当其左侧的值除以右侧的值时，取其余数（只能应用于整 数） 291 ++ 对其右侧的值加1（前缀模式），或对其左侧的值加1（后缀 模式） – 对其右侧的值减1（前缀模式），或对其左侧的值减1（后缀模 式） 其他运算符： sizeof 获得其右侧运算对象的大小（以字节为单位），运算对象 可以是一个被圆括号括起来的类型说明符，如sizeof(float)，或者是一个具体 的变量名、数组名等，如sizeof foo (类型名) 强制类型转换运算符将其右侧的值转换成圆括号中指定 的类型，如(float)9把整数9转换成浮点数9.0 </p><h1 id="控制语句：循环"><a href="#控制语句：循环" class="headerlink" title="控制语句：循环"></a>控制语句：循环</h1><h2 id="6-1while-循环"><a href="#6-1while-循环" class="headerlink" title="6.1while 循环"></a>6.1while 循环</h2><p>summing.c程序</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main(void){long num;long sum = 0l; /* 把sum初始化为0 */int status;printf("Please enter an integer to be summed ");printf("(q to quit): ");status = scanf("%ld", &amp;num);while (status == 1) /* == 的意思是“等于” */{sum = sum + num;printf("Please enter next integer (q to quit): ");status = scanf("%ld", &amp;num);}printf("Those integers sum to %ld.\n", sum);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 该程序使用long类型以储存更大的整数。尽管C编译器会把0自动转换为 合适的类型，但是为了保持程序的一致性，我们把sum初始化为 ***0L（long类 型的0），而不是0（int类型的0）。 ***</p><h2 id="6-1-1-程序注释"><a href="#6-1-1-程序注释" class="headerlink" title="6.1.1 程序注释"></a>6.1.1 程序注释</h2><p> 因为while循环是入口条件循环，程序在进入循环体之前必须获 取输入的数据并检查status的值，所以在 while 前面要有一个 scanf()。要让循 环继续执行，在循环内需要一个读取数据的语句，这样程序才能获取下一个 status的值，所以在while循环末尾还要有一个scanf()，它为下一次迭代做好 了准备。可以把下面的伪代码作为while循环的标准格式： 获得第1个用于测试的值 当测试为真时 处理值 获取下一个值 </p><h2 id="6-1-2-C风格读取循环"><a href="#6-1-2-C风格读取循环" class="headerlink" title="6.1.2 C风格读取循环"></a>6.1.2 C风格读取循环</h2><p> status = scanf(“%ld”, &amp;num);</p><p> while (status == 1) {</p><p>status = scanf(“%ld”, &amp;num); </p><p>} </p><p><em>可以用这些代码替换：</em>** while (scanf(“%ld”, &amp;num) == 1) **{ /<em>循环行为</em>/ } 第二种形式同时使用scanf()的两种不同的特性。</p><p>首先，如果函数调用成 功，scanf()会把一个值存入num。然后，利用scanf()的返回值（0或1，不是 num的值）控制while循环。因为每次迭代都会判断循环的条件，所以每次迭 代都要调用scanf()读取新的num值来做判断。换句话说，C的语法特性让你可 以用下面的精简版本替换标准版本： 当获取值和判断值都成功 处理该值 </p><h2 id="6-2-while-语句"><a href="#6-2-while-语句" class="headerlink" title="6.2 while 语句"></a>6.2 while 语句</h2><p> while循环的通用形式如下： </p><p>while（条件）</p><p>语句</p><p> statement部分可以是以分号结尾的简单语句，也可以是用花括号括起来 的复合语句。 </p><h2 id="6-2-1-终止while循环"><a href="#6-2-1-终止while循环" class="headerlink" title="6.2.1 终止while循环"></a>6.2.1 终止while循环</h2><p> while循环有一点非常重要：在构建while循环时，必须让测试表达式的 值有变化，表达式最终要为假。否则，循环就不会终止不过可以使用 break和if语句来终止循环</p><h2 id="6-2-2-何时终止循环"><a href="#6-2-2-何时终止循环" class="headerlink" title="6.2.2 何时终止循环"></a>6.2.2 何时终止循环</h2><p> 只有在对测试条件求值时，才决定是终止还是继续循环。 </p><p>when.c程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n = %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now n = %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The loop has finished.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-3-while-入口条件循环"><a href="#6-2-3-while-入口条件循环" class="headerlink" title="6.2.3 while: 入口条件循环"></a>6.2.3 while: 入口条件循环</h2><p> while循环是使用入口条件的有条件循环。所谓“有条件”指的是语句部 分的执行取决于测试表达式描述的条件，如(index &lt; 5)。该表达式是一个入 口条件（entry condition），因为必须满足条件才能进入循环体。在下面的情 况中，就不会进入循环体，因为条件一开始就为假： </p><h2 id="6-2-4-语法要点"><a href="#6-2-4-语法要点" class="headerlink" title="6.2.4 语法要点"></a>6.2.4 语法要点</h2><p> 使用while时，要牢记一点：只有在测试条件后面的单独语句（简单语 句或复合语句）才是循环部分。 </p><p>while.c程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//空循环</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n is %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 第8行 */</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"That's all this program does.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-3-用关系运算符和表达式比较大小"><a href="#6-3-用关系运算符和表达式比较大小" class="headerlink" title="6.3 用关系运算符和表达式比较大小"></a>6.3 用关系运算符和表达式比较大小</h1><p> while循环经常依赖测试表达式作比较，这样的表达式被称为关系表达 式（relational expression），出现在关系表达式中间的运算符叫做关系运算 符（relational operator）。 </p><p> 使用fabs()函数（声明在math.h头文件中） 可以方便地比较浮点数，该函数返回一个浮点值的绝对值（即，没有代数符 号的值）。 </p><p>fabs实例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">double</span> ANSWER <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span><span class="token keyword">double</span> response<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What is the value of pi?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>response <span class="token operator">-</span> ANSWER<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Try again!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Close enough!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-3-1-什么是真"><a href="#6-3-1-什么是真" class="headerlink" title="6.3.1 什么是真"></a>6.3.1 什么是真</h2><p> 对C而言，表达式为真的值是1，表达式为假的值是0。 </p><h2 id="6-3-2-其他真值"><a href="#6-3-2-其他真值" class="headerlink" title="6.3.2 其他真值"></a>6.3.2 其他真值</h2><p> 只要测试条件的值为非零，就会执行 while 循环。这是从数 值方面而不是从真/假方面来看测试条件。要牢记：关系表达式为真，求值 得1；关系表达式为假，求值得0。因此，这些表达式实际上相当于数值。 许多C程序员都会很好地利用测试条件的这一特性。例如，用while (goats)替换while (goats !=0)，因为表达式goats != 0和goats都只有在goats的值 为0时才为0或假。第1种形式（while (goats != 0)）对初学者而言可能比较清 楚，但是第2种形式（while (goats)）才是C程序员最常用的。</p><h2 id="6-3-3-真值的问题"><a href="#6-3-3-真值的问题" class="headerlink" title="6.3.3 真值的问题"></a>6.3.3 真值的问题</h2><p> 不要在本应使用==的地方使用=。一些计算机语言（如，BASIC）用相 同的符号表示赋值运算符和关系相等运算符，但是这两个运算符完全不同 。赋值运算符把一个值赋给它左侧的变量；而关系相等运算符 检查它左侧和右侧的值是否相等，不会改变左侧变量的值（如果左侧是一个 变量）。 </p><h2 id="6-3-4-新的-Bool类型"><a href="#6-3-4-新的-Bool类型" class="headerlink" title="6.3.4 新的_Bool类型"></a>6.3.4 新的_Bool类型</h2><p> 在编程中，表示真或假的变 量被称为布尔变量（Boolean variable），所以_Bool是C语言中布尔变量的类 型名。_Bool类型的变量只能储存1（真）或0（假）。如果把其他非零数值 赋给_Bool类型的变量，该变量会被设置为1。这反映了C把所有的非零值都 视为真。 </p><p> C99提供了stdbool.h头文件，该头文件让bool成为_Bool的别名，而且还 把true和false分别定义为1和0的符号常量。包含该头文件后，写出的代码可 以与C++兼容，因为C++把bool、true和false定义为关键字 </p><h2 id="6-3-5-优先级和关系运算符"><a href="#6-3-5-优先级和关系运算符" class="headerlink" title="6.3.5 优先级和关系运算符"></a>6.3.5 优先级和关系运算符</h2><p> 关系运算符的优先级比算术运算符（包括+和-）低，比赋值运算符高。 这意味着x &gt; y + 2和x &gt; (y+ 2)相同，x = y &gt; 2和x = (y &gt; 2)相同。换言之，如 果y大于2，则给x赋值1，否则赋值0。y的值不会赋给x。 </p><p> 关系运算符比赋值运算符的优先级高，因此，x_bigger = x &gt; y;相当于 x_bigger = (x &gt; y);。  </p><p> 关系运算符之间有两种不同的优先级。 </p><p> 高优先级组： &lt;&lt;= &gt;&gt;= </p><p> 低优先级组： == != </p><p> 与其他大多数运算符一样，关系运算符的结合律也是从左往右。 </p><h1 id="6-4-不确定循环和计数循环"><a href="#6-4-不确定循环和计数循环" class="headerlink" title="6.4 不确定循环和计数循环"></a>6.4 不确定循环和计数循环</h1><p> 一些while循环是不确定循环（indefinite loop）。所谓不确定循环，指 在测试表达式为假之前，预先不知道要执行多少次循环。 </p><p> 在创建一个重复执行固定次数的循环中涉及了3个行为： </p><p> 1.必须初始化计数器； </p><p> 2.计数器与有限的值作比较； </p><p> 3.每次循环时递增计数器。 </p><p> while循环的测试条件执行比较，递增运算符执行递增。  ，递增发生在循环的末尾，这可以防止不小心漏掉递增 </p><h1 id="6-5-for-循环"><a href="#6-5-for-循环" class="headerlink" title="6.5 for 循环"></a>6.5 for 循环</h1><p> 关键字for后面的圆括号中有3个表达式，分别用两个分号隔开。第1个 表达式是初始化，只会在for循环开始时执行一次。第 2 个表达式是测试条 件，在执行循环之前对表达式求值。如果表达式为假（本例中，count大于 NUMBER时），循环结束。第3个表达式执行更新，在每次循环结束时求 值。程序清单6.10用这个表达式递增count 的值，更新计数。完整的for语句 还包括后面的简单语句或复合语句。for圆括号中的表达式也叫做控制表达 式，它们都是完整表达式，所以每个表达式的副作用（如，递增变量）都发 生在对下一个表达式求值之前。 </p><h2 id="6-5-1-利用for的灵活性"><a href="#6-5-1-利用for的灵活性" class="headerlink" title="6.5.1 利用for的灵活性"></a>6.5.1 利用for的灵活性</h2><p> 第1个表 达式给计数器赋初值，第2个表达式表示计数器的范围，第3个表达式递增计 数器。 </p><p>用法</p><ol><li>可以使用递减运算符来递减计数器 </li><li>可以让计数器递增2、10等 </li><li>可以用字符代替数字计数 </li><li>可以让递增的量几何增长，而不是算术增长。也就是说，每次都乘上而 不是加上一个固定的量 </li><li>可以省略一个或多个表达式（但是不能省略分号），只要在循环中包含 能结束循环的语句即可。 </li><li>第1个表达式不一定是给变量赋初值，也可以使用printf()。在执 行循环的其他部分之前，只对第1个表达式求值一次或执行一次。</li></ol><p> for语句使用3个表达式控制循环过程，分别用分号隔开。initialize表达 式在执行for语句之前只执行一次；然后对test表达式求值，如果表达式为真 （或非零），执行循环一次；接着对update表达式求值，并再次检查test表达 式。for语句是一种入口条件循环，即在执行循环之前就决定了是否执行循 环。因此，for循环可能一次都不执行。statement部分可以是一条简单语句或 复合语句。 </p><p> 形式：  </p><p> for ( initialize; test; update ) </p><p>statement</p><p> 在test为假或0之前，重复执行statement部分。 </p><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><p> 6.编写一个程序打印一个表格，每一行打印一个整数、该数的平方、该 数的立方。要求用户输入表格的上下限。使用一个for循环。 </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入上下限:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>a<span class="token punctuation">;</span>a<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-5d %-5d %-5d \n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token operator">*</span>a<span class="token punctuation">,</span>a<span class="token operator">*</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-6-其他赋值运算符-x3D-x3D-x3D-x2F-x3D-x3D"><a href="#6-6-其他赋值运算符-x3D-x3D-x3D-x2F-x3D-x3D" class="headerlink" title="6.6 其他赋值运算符 +=,-=,*=,/=,%="></a>6.6 其他赋值运算符 +=,-=,*=,/=,%=</h2><p> C有许多赋值运算符。最基本、最常用的是=，它把右侧表达式的值赋 给左侧的变量。其他赋值运算符都用于更新变量，其用法都是左侧是一个变 量名，右侧是一个表达式。赋给变量的新值是根据右侧表达式的值调整后的 值。确切的调整方案取决于具体的运算符 </p><p> x *= 3 * y + 12 与 x = x * (3 * y + 12) 相同 </p><h2 id="6-7-逗号运算符"><a href="#6-7-逗号运算符" class="headerlink" title="6.7 逗号运算符"></a>6.7 逗号运算符</h2><p> 逗号运算符扩展了for循环的灵活性，以便在循环头中包含更多的表达 式。 </p><p> 逗号运算符并不局限于在for循环中使用，但是这是它最常用的地方。 逗号运算符有两个其他性质。首先，它保证了被它分隔的表达式从左往右求 值（换言之，逗号是一个序列点，所以逗号左侧项的所有副作用都在程序执 行逗号右侧项之前发生）。 </p><p> 逗号运算符把两个表达式连接成一个表达式，并保证最左边的表达式最 先求值。逗号运算符通常在for循环头的表达式中用于包含更多的信息。整 个逗号表达式的值是逗号右侧表达式的值。 </p><h2 id="6-8-出口条件循环-do-while"><a href="#6-8-出口条件循环-do-while" class="headerlink" title="6.8 出口条件循环 :do while"></a>6.8 出口条件循环 :do while</h2><p> while循环和for循环都是入口条件循环，即在循环的每次迭代之前检查 测试条件，所以有可能根本不执行循环体中的内容。C语言还有出口条件循 环（exit-condition loop），即在循环的每次迭代之后检查测试条件，这保证 了至少执行循环体中的内容一次。这种循环被称为 do while循环。 </p><p> do while循环的通用形式： </p><p> do</p><p> statement </p><p>while ( expression ); </p><p>statement可以是一条简单语句或复合语句。注意，do while循环以分号 结尾 </p><p> do while 语句创建一个循环，在 expression 为假或 0 之前重复执行循环 体中的内容。do while语句是一种出口条件循环，即在执行完循环体后才根 据测试条件决定是否再次执行循环。因此，该循环至少必须执行一次。 statement部分可是一条简单语句或复合语句。  </p><h2 id="6-10-嵌套循环"><a href="#6-10-嵌套循环" class="headerlink" title="6.10 嵌套循环"></a>6.10 嵌套循环</h2><p> 嵌套循环（nested loop）指在一个循环内包含另一个循环。嵌套循环常 用于按行和列显示数据，也就是说，一个循环处理一行中的所有列，另一个 循环处理所有的行。 </p><h2 id="作业：9-9乘法表"><a href="#作业：9-9乘法表" class="headerlink" title="作业：9*9乘法表"></a>作业：9*9乘法表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">&lt;=</span>a<span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%-3d"</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-1-if-语句"><a href="#7-1-if-语句" class="headerlink" title="7.1 if 语句"></a>7.1 if 语句</h1><p>实列程序分析</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> FREEZING <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">float</span> temperature<span class="token punctuation">;</span><span class="token keyword">int</span> cold_days <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> all_days <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the list of daily low temperatures.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Use Celsius, and enter q to quit.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temperature<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>all_days<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>temperature <span class="token operator">&lt;</span> FREEZING<span class="token punctuation">)</span>cold_days<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>all_days <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d days total: %.1f%% were below freezing.\n"</span><span class="token punctuation">,</span>all_days<span class="token punctuation">,</span> <span class="token number">100.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> cold_days <span class="token operator">/</span> all_days<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>all_days <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No data entered!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> while循环的测试条件利用scanf()的返回值来结束循环，因为scanf()在读 到非数字字符时会返回0。temperature的类型是float而不是int，这样程序既可 以接受-2.5这样的值，也可以接受8这样的值。 </p><p> if 语句指示计算机，如果刚读取的值（remperature）小于 0，就把 cold_days 递增 1；如果temperature不小于0，就跳过cold_days++;语句，while 循环继续读取下一个温度值。 </p><p> 接着，该程序又使用了两次if语句控制程序的输出。如果有数据，就打 印结果；如果没有数据，就打印一条消息（稍后将介绍一种更好的方法来处 理这种情况）。 </p><p> 为避免整数除法，该程序示例把计算后的百分比强制转换为 float类 型。其实，也不必使用强制类型转换，因为在表达式100.0 * cold_days / all_days中，将首先对表达式100.0 * cold_days求值，由于C的自动转换类型 规则，乘积会被强制转换成浮点数。但是，使用强制类型转换可以明确表达 转换类型的意图，保护程序免受不同版本编译器的影响。if语句被称为分支 语句（branching statement）或选择语句（selection statement），因为它相当 于一个交叉点，程序要在两条分支中选择一条执行。 </p><p> if语句的通用形式如 下： </p><p> if ( expression ) </p><p>statement </p><p> 如果对expression求值为真（非0），则执行statement；否则，跳过 statement。与while循环一样，statement可以是一条简单语句或复合语句。if 语句的结构和while语句很相似，它们的主要区别是：如果满足条件可执行 的话，if语句只能测试和执行一次，而while语句可以测试和执行多次。  </p><p> 通常，expression 是关系表达式，即比较两个量的大小（如，表达式 x &gt; y 或 c == 6）。如果expression为真（即x大于y，或c == 6），则执行 statement。否则，忽略statement。概括地说，可以使用任意表达式，表达式 的值为0则为假。 </p><h1 id="7-2-if-else语句"><a href="#7-2-if-else语句" class="headerlink" title="7.2 if else语句"></a>7.2 if else语句</h1><h2 id="7-2-1-介绍getchar-putchar"><a href="#7-2-1-介绍getchar-putchar" class="headerlink" title="7.2.1 介绍getchar() putchar()"></a>7.2.1 介绍getchar() putchar()</h2><p> getchar()函数不带任何参数，它从输入队列中返回下一个字符。例如， 下面的语句读取下一个字符输入，并把该字符的值赋给变量ch： </p><p> ch = getchar(); </p><p> 该语句与下面的语句效果相同：  </p><p> scanf(“%c”, &amp;ch);  </p><p> putchar()函数打印它的参数。</p><p>例如，下面的语句把之前赋给ch的值作为 字符打印出来：</p><p> putchar(ch); 该语句与下面的语句效果相同： </p><p>printf(“%c”, ch); </p><p> 由于这些函数只处理字符，所以它们比更通用的scanf()和printf()函数更 快、更简洁。而且，注意 getchar()和 putchar()不需要转换说明，因为它们只 处理字符。这两个函数通常定义在 stdio.h头文件中 </p><h2 id="7-2-2-ctyoe-h系列的字符函数"><a href="#7-2-2-ctyoe-h系列的字符函数" class="headerlink" title="7.2.2 ctyoe.h系列的字符函数"></a>7.2.2 ctyoe.h系列的字符函数</h2><p> 。C 有一系列专门处理字符的函数，ctype.h头文件包含了这些 函数的原型。这些函数接受一个字符作为参数，如果该字符属于某特殊的类 别，就返回一个非零值（真）；否则，返回0（假）。例如，如果isalpha() 函数的参数是一个字母，则返回一个非零值。 </p><p>实例 </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h&gt;</span> <span class="token comment">// 包含isalpha()的函数原型</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 如果是一个字符，</span><span class="token function">putchar</span><span class="token punctuation">(</span>ch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示该字符的下一个字符</span><span class="token keyword">else</span> <span class="token comment">// 否则，</span><span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 原样显示</span><span class="token punctuation">}</span><span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示换行符</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/12/03/c-yu-yan-de-xue-xi/QQ%E5%9B%BE%E7%89%8720220117145423.png" alt="QQ图片20220117145423"></p><p> 。有些函数涉及本地 化，指的是为适应特定区域的使用习惯修改或扩展 C 基本用法的工具（例 如，许多国家在书写小数点时，用逗号代替点号，于是特殊的本地化可以指 定C编译器使用逗号以相同的方式输出浮点数，这样123.45可以显示为 123,45）。注意，字符映射函数不会修改原始的参数，这些函数只会返回已 修改的值。也就是说，下面的语句不改变ch的值： </p><p> tolower(ch); // 不影响ch的值 </p><p> 这样做才会改变ch的值： </p><p>ch = tolower(ch); // 把ch转换成小写字母 </p><h2 id="7-2-3-多重选择-else-if"><a href="#7-2-3-多重选择-else-if" class="headerlink" title="7.2.3 多重选择 else if"></a>7.2.3 多重选择 else if</h2><p> 在程序中也可以用else if扩展if else结 构模拟这种情况。 </p><p> 实际上，else if 是已学过的 if else 语句的变式。例如，该程序的核心部 分只不过是下面代码的另一种写法： </p><p> 也就是说，该程序由一个ifelse语句组成，else部分包含另一个if else语 句，该if else语句的else部分又包含另一个if else语句。第2个if else语句嵌套 在第 1个if else语句中，第3个if else语句嵌套在第2个if else语句中。回忆一 下，整个if else语句被视为一条语句，因此不必把嵌套的if else语句用花括号 括起来。当然，花括号可以更清楚地表明这种特殊格式的含义。 </p><p> 这两种形式完全等价。唯一不同的是使用空格和换行的位置不同，不过 编译器会忽略这些。 </p><h2 id="7-2-4-else-与if-的配对"><a href="#7-2-4-else-与if-的配对" class="headerlink" title="7.2.4 else 与if 的配对"></a>7.2.4 else 与if 的配对</h2><p> 规则是，如果没有花括号，else与离它最近的if匹配，除非最近的if被花 括号括起来</p><h1 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业<img src="/2021/12/03/c-yu-yan-de-xue-xi/QQ%E5%9B%BE%E7%89%8720220117150043.png" alt="QQ图片20220117150043"></h1><p> .编写一个程序，提示用户输入一周工作的小时数，然后打印工资总 额、税金和净收入。做如下假设： a.基本工资 = 1000美元/小时 b.加班（超过40小时） = 1.5倍的时间 c.税率： 前300美元为15% 续150美元为20%  余下的为25% 用#define定义符号常量。 </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">wage</span> <span class="token expression"><span class="token number">10</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">xianzhi</span> <span class="token expression"><span class="token number">40</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">chaoguo</span> <span class="token expression"><span class="token number">1.5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">a</span> <span class="token expression"><span class="token number">300</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">b</span> <span class="token expression"><span class="token number">150</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">rate1</span> <span class="token expression"><span class="token number">0.15</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">rate2</span> <span class="token expression"><span class="token number">0.20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">rate3</span> <span class="token expression"><span class="token number">0.25</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> hour<span class="token punctuation">;</span> <span class="token keyword">double</span> money<span class="token punctuation">,</span>tax<span class="token punctuation">,</span>qian<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一周工作时间:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hour<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hour <span class="token operator">&lt;=</span> xianzhi<span class="token punctuation">)</span> money <span class="token operator">=</span> hour <span class="token operator">*</span> wage<span class="token punctuation">;</span> <span class="token keyword">else</span> money <span class="token operator">=</span> xianzhi <span class="token operator">*</span> wage <span class="token operator">+</span> <span class="token punctuation">(</span>hour <span class="token operator">-</span> xianzhi<span class="token punctuation">)</span> <span class="token operator">*</span> wage<span class="token operator">*</span> chaoguo<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">&lt;=</span> a<span class="token punctuation">)</span> tax <span class="token operator">=</span> money<span class="token operator">*</span> rate1<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">&lt;=</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>tax <span class="token operator">=</span> a <span class="token operator">*</span> rate1 <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> rate2<span class="token punctuation">;</span><span class="token keyword">else</span> tax <span class="token operator">=</span> a <span class="token operator">*</span> rate1 <span class="token operator">+</span> rate2 <span class="token operator">*</span> rate2 <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">-</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> rate3<span class="token punctuation">;</span> qian <span class="token operator">=</span> money <span class="token operator">-</span> tax<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"money: %.2f tax: %.2f qian: %.2f\n"</span><span class="token punctuation">,</span> money<span class="token punctuation">,</span> tax<span class="token punctuation">,</span> qian<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-2-5-多层嵌套的if语句"><a href="#7-2-5-多层嵌套的if语句" class="headerlink" title="7.2.5 多层嵌套的if语句"></a>7.2.5 多层嵌套的if语句</h1><p> 在编写程序的代码之前要先规划好。首先，要总体设计一下程序。为方 便起见，程序应该使用一个循环让用户能连续输入待测试的数。这样，测试 一个新的数字时不必每次都要重新运行程序。 </p><p> 从技术角度看，if else语句作为一条单独的语句，不必使用花括号。外 层if也是一条单独的语句，也不必使用花括号。但是，当语句太长时，使用 花括号能提高代码的可读性，而且还可防止今后在if循环中添加其他语句时 忘记加花括号。 </p><p> 一直以来，C都习惯用int作为标记的类型，其实新增的_Bool类型更合 适。 </p><p> 用if语句进行选择 </p><h2 id="形式1："><a href="#形式1：" class="headerlink" title="形式1："></a>形式1：</h2><p> if (expression) </p><p> statement </p><p> 如果expression为真，则执行statement部分。 </p><h2 id="形式2："><a href="#形式2：" class="headerlink" title="形式2："></a>形式2：</h2><p> if (expression)  </p><p> statemen</p><p> else   </p><p> statement2  </p><h2 id="形式3："><a href="#形式3：" class="headerlink" title="形式3："></a>形式3：</h2><p> if (expression1) </p><p> statement1 </p><p> else if (expression2)  </p><p> statement2 </p><p> else </p><p> statement3 </p><p> 如果expression1为真，执行statement1部分；如果expression2为真，执行 statement2部分；否则，执行statement3部分。 </p><h1 id="7-3-逻辑运算符"><a href="#7-3-逻辑运算符" class="headerlink" title="7.3 逻辑运算符"></a>7.3 逻辑运算符</h1><p> if 语句和 while 语句通常使用关系表达式作为测试 条件。有时，把多个关系表达式组合起来会很有用 </p><p> 逻辑运算符两侧的条件必须都为真，整个表达式才为真。<em><strong>逻辑运算符的 优先级比关系运算符低</strong></em>*，所以不必在子表达式两侧加圆括号。 </p><p>&amp;&amp; 与</p><p>|| 或</p><p>！非</p><h2 id="7-3-1-iso646-h头文件"><a href="#7-3-1-iso646-h头文件" class="headerlink" title="7.3.1 iso646.h头文件"></a>7.3.1 iso646.h头文件</h2><p> C 是在美国用标准美式键盘开发的语言。但是在世界各地，并非所有的 键盘都有和美式键盘一样的符号。因此，C99标准新增了可代替逻辑运算符 的拼写，它们被定义在ios646.h头文件中。如果在程序中包含该头文件，便 可用and代替&amp;&amp;、or代替||、not代替! </p><h2 id="7-3-2-优先级"><a href="#7-3-2-优先级" class="headerlink" title="7.3.2 优先级"></a>7.3.2 优先级</h2><p> !运算符的优先级很高，比乘法运算符还高，与递增运算符的优先级相 同，只比圆括号的优先级低。&amp;&amp;运算符的优先级比||运算符高，但是两者的 优先级都比关系运算符低，比赋值运算符高。因此，表达式a &gt;b &amp;&amp; b &gt; c || b &gt; d相当于((a &gt; b) &amp;&amp; (b &gt; c)) || (b &gt; d)。 </p><h2 id="7-3-3-求值顺序"><a href="#7-3-3-求值顺序" class="headerlink" title="7.3.3 求值顺序"></a>7.3.3 求值顺序</h2><p> 除了两个运算符共享一个运算对象的情况外，C 通常不保证先对复杂表 达式中哪部分求值。 </p><p> 逻辑表达式的求值顺序是从左往右。一旦发现有使整个表达式为假的因 素，立即停止求值。 </p><h2 id="7-3-4范围"><a href="#7-3-4范围" class="headerlink" title="7.3.4范围"></a>7.3.4范围</h2><p> &amp;&amp;运算符可用于测试范围。 </p><p> if (90 &lt;= range &lt;= 100) // 千万不要这样写！ </p><p> 这样写的问题是代码有语义错误，而不是语法错误，所以编译器不会捕 获这样的问题（虽然可能会给出警告）。由于&lt;=运算符的求值顺序是从左 往右，所以编译器把测试表达式解释为： </p><h2 id="7-4-一个统计单词的程序"><a href="#7-4-一个统计单词的程序" class="headerlink" title="7.4 一个统计单词的程序"></a>7.4 一个统计单词的程序</h2><p> 首先，该程序要逐个字符读取输入，知道何时停止读取。然后，该程序 能识别并计算这些内容：字符、行数和单词。据此我们编写的伪代码如下： </p><p> 读取一个字符 </p><p> 当有多输入时 </p><p> 递增字符计数 </p><p> 如果读完一行，递增行数计数 </p><p> 如果读完一个单词，递增单词计数 </p><p> 读取下一个字符 </p><p> 前面有一个输入循环的模型 </p><p> while ((ch = getchar()) != STOP) </p><p>{</p><p>​……..</p><p>}</p><p> 这里，STOP表示能标识输入末尾的某个值。以前我们用过换行符和句 点标记输入的末尾，但是对于一个通用的统计单词程序，它们都不合适。我 们暂时选用一个文本中不常用的字符（如，|）作为输入的末尾标记。 </p><p> 现在，我们考虑循环体。因为该程序使用getchar()进行输入，所以每次 迭代都要通过递增计数器来计数。为了统计行数，程序要能检查换行字符。 如果输入的字符是一个换行符，该程序应该递增行数计数器。这里要注意 STOP 字符位于一行的中间的情况。是否递增行数计数？我们可以作为特殊 行计数，即没有换行符的一行字符。可以通过记录之前读取的字符识别这种 情况，即如果读取时发现 STOP 字符的上一个字符不是换行符，那么这行就 是特殊行。  </p><p> 最棘手的部分是识别单词。首先，必须定义什么是该程序识别的单词。 我们用一个相对简单的方法，把一个单词定义为一个不含空白（即，没有空 格、制表符或换行符）的字符序列。因此，“glymxck”和“r2d2”都算是一个单 词。 </p><p> 判断非空白字符最直接的测试表达式是： </p><p> c != ‘ ‘ &amp;&amp; c != ‘\n’ &amp;&amp; c != ‘\t’ /* 如果c不是空白字符，该表达式为真* /</p><p> 检测空白字符最直接的测试表达式是： </p><p> c == ‘ ‘ || c == ‘\n’ || c == ‘\t’ /<em>如果c是空白字符，该表达式为真</em>/ </p><p> 然而，使用ctype.h头文件中的函数isspace()更简单，如果该函数的参数 是空白字符，则返回真。所以，如果c是空白字符，isspace(c)为真；如果c不 是空白字符，!isspace(c)为真。 </p><p>程序清单.wordcnt.c程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h&gt;</span> <span class="token comment">// 为isspace()函数提供原型</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span> <span class="token comment">// 为bool、true、false提供定义</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STOP</span> <span class="token char">'|'</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> c<span class="token punctuation">;</span> <span class="token comment">// 读入字符</span><span class="token keyword">char</span> prev<span class="token punctuation">;</span> <span class="token comment">// 读入的前一个字符</span><span class="token keyword">long</span> n_chars <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span><span class="token comment">// 字符数</span><span class="token keyword">int</span> n_lines <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 行数</span><span class="token keyword">int</span> n_words <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 单词数</span><span class="token keyword">int</span> p_lines <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 不完整的行数</span>bool inword <span class="token operator">=</span> false<span class="token punctuation">;</span> <span class="token comment">// 如果c在单词中，inword 等于 true</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter text to be analyzed (| to terminate):\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prev <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// 用于识别完整的行</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> STOP<span class="token punctuation">)</span><span class="token punctuation">{</span>n_chars<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 统计字符</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>n_lines<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 统计行</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inword<span class="token punctuation">)</span><span class="token punctuation">{</span>inword <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment">// 开始一个新的单词</span>n_words<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 统计单词</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> inword<span class="token punctuation">)</span>inword <span class="token operator">=</span> false<span class="token punctuation">;</span> <span class="token comment">// 打到单词的末尾</span>prev <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment">// 保存字符的值</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>p_lines <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"characters = %ld, words = %d, lines = %d, "</span><span class="token punctuation">,</span>n_chars<span class="token punctuation">,</span> n_words<span class="token punctuation">,</span> n_lines<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"partial lines = %d\n"</span><span class="token punctuation">,</span> p_lines<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="作业-2"><a href="#作业-2" class="headerlink" title="作业"></a>作业</h1><p>判断输入年份是否为闰年</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> year<span class="token punctuation">,</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输人年份:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>            a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这是闰年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这不是闰年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-5-条件运算符"><a href="#7-5-条件运算符" class="headerlink" title="7.5 条件运算符: ?:"></a>7.5 条件运算符: ?:</h1><p> C提供条件表达式（conditional expression）作为表达if else语句的一种 便捷方式，该表达式使用?:条件运算符。 </p><p> 该运算符分为两部分，需要 3 个运 算对象。 </p><p> 带一个运算对象的运算符称为一元运算符，带两个运算 对象的运算符称为二元运算符。 </p><p> 带 3 个运算对象的运算符称为三 元运算符。条件运算符是C语言中唯一的三元运算符。下 </p><p> x = (y &lt; 0) ? -y : y;      <em><strong>绝对值运算</strong></em></p><p> 在=和;之间的内容就是条件表达式，该语句的意思是“如果y小于0，那 么x = -y;否则，x = y”。</p><p>用if else可以这样表达：  </p><p> if (y &lt; 0)</p><p> x = -y; </p><p>else x = y; </p><p>条件表达式的通用形式如下： expression1 ? expression2 : expression3 </p><p> 如果 expression1 为真（非 0），那么整个条件表达式的值与 expression2 的值相同；如果expression1为假（0），那么整个条件表达式的值与 expression3的值相同。 </p><h1 id="7-6-辅助循环-continue-和-break"><a href="#7-6-辅助循环-continue-和-break" class="headerlink" title="7.6 辅助循环 continue 和 break"></a>7.6 辅助循环 continue 和 break</h1><p> continue 和break语句可以根据循环体中的测试结果来忽略一部 分循环内容，甚至结束循环。 </p><h2 id="7-6-1-continue-语句"><a href="#7-6-1-continue-语句" class="headerlink" title="7.6.1 continue 语句"></a>7.6.1 continue 语句</h2><p> 执行到该语句时，会跳过本次迭代的 剩余部分，并开始下一轮迭代。如果continue语句在嵌套循环内，则只会影 响包含该语句的内层循环。 </p><p> 使用continue的好处是减少主语句组中的一级缩进。当语 句很长或嵌套较多时，紧凑简洁的格式提高了代码的可读性。  </p><p> 了continue语句让程序跳过循环体的余下部分。那么，从何处 开始继续循环？对于while和 do while 循环，执行 continue 语句后的下一个 行为是对循环的测试表达式求值。 </p><h2 id="7-6-2-break-语句"><a href="#7-6-2-break-语句" class="headerlink" title="7.6.2 break 语句"></a>7.6.2 break 语句</h2><p> 程序执行到循环中的break语句时，会终止包含它的循环，并继续执行 下一阶段。 </p><p> break还可用于因其他原因退出循环的情况。 </p><p> 在for循环中的break和continue的情况不同，执行完break语句后会直接执 行循环后面的第1条语句，连更新部分也跳过。嵌套循环内层的break只会让程序跳出包含它的当前循环，要跳出外层循环还需要一个break： </p><h1 id="7-7-多重选择：-switch-和-break"><a href="#7-7-多重选择：-switch-和-break" class="headerlink" title="7.7 多重选择： switch 和 break"></a>7.7 多重选择： switch 和 break</h1><p> 使用条件运算符和 if else 语句很容易编写二选一的程序。然而，有时程 序需要在多个选项中进行选择。可以用if else if…else来完成。但是，大多数 情况下使用switch语句更方便 </p><h2 id="7-7-1-switch-语句"><a href="#7-7-1-switch-语句" class="headerlink" title="7.7.1 switch 语句"></a>7.7.1 switch 语句</h2><p> 要对紧跟在关键字 switch 后圆括号中的表达式求值。然后程序扫描标签，到发现一个匹配的值为止。然后程序跳转至那一行。 如果没有匹配的标签怎么办？如果有default :标签行，就跳转至该行；否 则，程序继续执行在switch后面的语句。 </p><p> break语句在其中起什么作用？它让程序离开switch语句，跳至switch语 句后面的下一条语句。如果没有break语句，就会从匹配标签开 始执行到switch末尾。例 </p><p> break语句可用于循环和switch语句中，但是continue只能用 于循环中。尽管如此，如果switch语句在一个循环中，continue便可作为 switch语句的一部分。这种情况下，就像在其他循环中一样，continue让程序 跳出循环的剩余部分，包括switch语句的其他部分。 </p><p> switch在圆括号中的测试表达式的值应该是一个整数值（包括char类 型）。case标签必须是整数类型（包括char类型）的常量或整型常量表达式 （即，表达式中只包含整型常量）。不能用变量作为case标签。</p><p>switch的构造如下</p><p> switch ( 整型表达式)</p><p> { case 常量1: </p><p>语句 &lt;–可选 </p><p>case 常量2: </p><p>语句 &lt;–可选 </p><p>default : &lt;–可选</p><p> 语句 &lt;–可选 </p><p>} </p><h2 id="7-7-2-只读每行的首字符"><a href="#7-7-2-只读每行的首字符" class="headerlink" title="7.7.2 只读每行的首字符"></a>7.7.2 只读每行的首字符</h2><p> 丢弃 一行中其他字符的行为，经常出现在响应单字符的交互程序中。可以用下面 的代码实现这样的行为： </p><p> while (getchar() != ‘\n’) </p><p> continue; /* 跳过输入行的其余部分 */ </p><p> 循环从输入中读取字符，包括按下Enter键产生的换行符。注意，函数 的返回值并没有赋给ch，以上代码所做的只是读取并丢弃字符。由于最后丢 弃的字符是换行符，所以下一个被读取的字符是下一行的首字母。在外层的 while循环中，getchar()读取首字母并赋给ch。 </p><p> 假设用户一开始就按下Enter键，那么程序读到的首个字符就是换行 符。下面的代码处理这种情况： </p><p> if (ch == ‘\n’) </p><p> continue; </p><h2 id="7-7-3-多重标签"><a href="#7-7-3-多重标签" class="headerlink" title="7.7.3 多重标签"></a>7.7.3 多重标签</h2><p> 可以在switch语句中使用多重case标签。 </p><p>实例 </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">int</span> a_ct<span class="token punctuation">,</span> e_ct<span class="token punctuation">,</span> i_ct<span class="token punctuation">,</span> o_ct<span class="token punctuation">,</span> u_ct<span class="token punctuation">;</span>a_ct <span class="token operator">=</span> e_ct <span class="token operator">=</span> i_ct <span class="token operator">=</span> o_ct <span class="token operator">=</span> u_ct <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter some text; enter # to quit.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'#'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'A'</span><span class="token operator">:</span> a_ct<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'e'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'E'</span><span class="token operator">:</span> e_ct<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'i'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'I'</span><span class="token operator">:</span> i_ct<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'o'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'O'</span><span class="token operator">:</span> o_ct<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'u'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token char">'U'</span><span class="token operator">:</span> u_ct<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// switch结束</span><span class="token punctuation">}</span> <span class="token comment">// while循环结束</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"number of vowels: A E I O U\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %4d %4d %4d %4d %4d\n"</span><span class="token punctuation">,</span>a_ct<span class="token punctuation">,</span> e_ct<span class="token punctuation">,</span> i_ct<span class="token punctuation">,</span> o_ct<span class="token punctuation">,</span> u_ct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 假设如果ch是字母i，switch语句会定位到标签为case ‘i’ :的位置。由于 该标签没有关联break语句，所以程序流直接执行下一条语句，即i_ct++;。 如果 ch是字母I，程序流会直接定位到case ‘I’ :。本质上，两个标签都指的是 相同的语句。 </p><p> 严格地说，case ‘U’的 break 语句并不需要。因为即使删除这条 break 语 句，程序流会接着执行switch中的下一条语句，即default : break;。所以，可 以把case ‘U’的break语句去掉以缩短代码。但是从另一方面看，保留这条 break语句可以防止以后在添加新的case（例如，把y作为元音）时遗漏break 语句。 </p><p> 在该例中，如果使用ctype.h系列的toupper()函数（参见表7.2）可以避免 使用多重标签，在进行测试之前就把字母转换成大写字母： </p><p> ch = toupper(ch); </p><p> 或者，也可以先不转换ch，把toupper(ch)放进switch的测试条件中： switch(toupper(ch))。 </p><h2 id="7-7-4-switch-和if-else"><a href="#7-7-4-switch-和if-else" class="headerlink" title="7.7.4 switch 和if else"></a>7.7.4 switch 和if else</h2><p> 何时使用switch？何时使用if else？你经常会别无选择。如果是根据浮 点类型的变量或表达式来选择，就无法使用 switch。如果根据变量在某范围 内决定程序流的去向，使用 switch 就很麻烦，这种情况用if就很方便： </p><p> 使用switch要涵盖以上范围，需要为每个整数（3～999）设置case标 签。但是，如果使用switch，程序通常运行快一些，生成的代码少一些。 </p><h1 id="作业-3"><a href="#作业-3" class="headerlink" title="作业"></a>作业</h1><p> ABC 邮购杂货店出售的洋蓟售价为 2.05 美元/磅，甜菜售价为 1.15 美元/磅，胡萝卜售价为 1.09美元/磅。在添加运费之前，100美元的订单有 5%的打折优惠。少于或等于5磅的订单收取6.5美元的运费和包装费，5磅～ 20磅的订单收取14美元的运费和包装费，超过20磅的订单在14美元的基础上 每续重1磅增加0.5美元。编写一个程序，在循环中用switch语句实现用户输 入不同的字母时有不同的响应，即输入a的响应是让用户输入洋蓟的磅数，b 是甜菜的磅数，c是胡萝卜的磅数，q 是退出订购。程序要记录累计的重 量。即，如果用户输入 4 磅的甜菜，然后输入 5磅的甜菜，程序应报告9磅 的甜菜。然后，该程序要计算货物总价、折扣（如果有的话）、运费和包装 费。随后，程序应显示所有的购买信息：物品售价、订购的重量（单位： 磅）、订购的蔬菜费用、订单的总费用、折扣（如果有的话）、运费和包装 费，以及所有的费用总额。 </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">y</span> <span class="token expression"><span class="token number">2.05</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">t</span> <span class="token expression"><span class="token number">1.15</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">h</span> <span class="token expression"><span class="token number">1.09</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">float</span> yang<span class="token punctuation">,</span>tian<span class="token punctuation">,</span>hu<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>yunfei<span class="token punctuation">,</span>money<span class="token punctuation">,</span>p<span class="token punctuation">;</span>    <span class="token keyword">float</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"按下 a 输入洋蓟的磅数\n按下 b 输入甜菜的磅数\n按下 c 输入胡萝卜的磅数\n按下q退出订购\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span><span class="token comment">//要多加一个小括号，后面的优先级比较高</span>    <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入洋蓟的磅数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>yang<span class="token punctuation">)</span><span class="token punctuation">;</span>        yang<span class="token operator">+=</span>a<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已购入%.2f磅洋蓟\n"</span><span class="token punctuation">,</span>yang<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'b'</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入甜菜的磅数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>tian<span class="token punctuation">)</span><span class="token punctuation">;</span>        tian<span class="token operator">+=</span>i<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已购入%.2f磅甜菜\n"</span><span class="token punctuation">,</span>tian<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'c'</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入胡萝卜的磅数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>hu<span class="token punctuation">)</span><span class="token punctuation">;</span>        hu<span class="token operator">+=</span>u<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已购入%.2f磅胡萝卜\n"</span><span class="token punctuation">,</span>hu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token operator">=</span>yang<span class="token punctuation">;</span>        i<span class="token operator">=</span>tian<span class="token punctuation">;</span>        u<span class="token operator">=</span>hu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    money<span class="token operator">=</span>yang<span class="token operator">*</span>y<span class="token operator">+</span>tian<span class="token operator">*</span>t<span class="token operator">+</span>hu<span class="token operator">*</span>h<span class="token punctuation">;</span>    p<span class="token operator">=</span>money<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>money<span class="token operator">&gt;</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        money<span class="token operator">=</span>money<span class="token operator">*</span><span class="token number">0.95</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     sum<span class="token operator">=</span>yang<span class="token operator">+</span>tian<span class="token operator">+</span>hu<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        yunfei<span class="token operator">=</span><span class="token number">6.5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token operator">&gt;</span><span class="token number">5</span> <span class="token operator">&amp;&amp;</span> sum<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        yunfei<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token operator">&gt;</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        yunfei<span class="token operator">=</span><span class="token number">14</span><span class="token operator">+</span><span class="token punctuation">(</span>sum<span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"洋蓟售价为 2.05 美元/磅\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"甜菜售价为 1.15美元/磅\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"胡萝卜售价为 1.09美元/磅\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"总订购重量为%.2f\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"订购蔬菜费用为%.2f\n"</span><span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"包装费用为%.2f\n"</span><span class="token punctuation">,</span>yunfei<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>money<span class="token operator">&gt;</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已为您折扣%.2f\n"</span><span class="token punctuation">,</span>p<span class="token operator">*</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您暂无优惠\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"订单总费用为%.2f\n"</span><span class="token punctuation">,</span>money<span class="token operator">+</span>yunfei<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h1><h2 id="1-1"><a href="#1-1" class="headerlink" title="1."></a>1.</h2><p> 修改练习7的假设a，让程序可以给出一个供选择的工资等级菜单。使 用switch完成工资等级选择。运行程序后，显示的菜单应该类似这样： ***************************************************************** Enter the number corresponding to the desired pay rate or action: 1) $8.75/hr 2) $9.33/hr 3) $10.00/hr 4) $11.20/hr 5) quit ***************************************************************** 如果选择 1～4 其中的一个数字，程序应该询问用户工作的小时数。程 序要通过循环运行，除非用户输入 5。如果输入 1～5 以外的数字，程序应 提醒用户输入正确的选项，然后再重复显示菜单提示用户输入。使用#define 创建符号常量表示各工资等级和税率。  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">xianzhi</span> <span class="token expression"><span class="token number">40</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">chaoguo</span> <span class="token expression"><span class="token number">1.5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">a</span> <span class="token expression"><span class="token number">300</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">b</span> <span class="token expression"><span class="token number">150</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">rate1</span> <span class="token expression"><span class="token number">0.15</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">rate2</span> <span class="token expression"><span class="token number">0.20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">rate3</span> <span class="token expression"><span class="token number">0.25</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">one</span> <span class="token expression"><span class="token number">8.75</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">two</span> <span class="token expression"><span class="token number">9.33</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">three</span> <span class="token expression"><span class="token number">10.00</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">four</span> <span class="token expression"><span class="token number">11.20</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*****************************************************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the number corresponding to the desired pay rate or action:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1) $8.75/hr                                     2) $9.33/hr\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3) $10.00/hr                                    4) $11.20/hr\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"5) quit\n*****************************************************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> hour<span class="token punctuation">;</span>    <span class="token keyword">char</span> this<span class="token punctuation">;</span>    <span class="token keyword">double</span> wage<span class="token punctuation">;</span>    <span class="token keyword">double</span> money<span class="token punctuation">,</span>tax<span class="token punctuation">,</span>qian<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>this<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token char">'5'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>this<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token char">'1'</span> <span class="token operator">:</span>            wage<span class="token operator">=</span>one<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'2'</span> <span class="token operator">:</span>            wage<span class="token operator">=</span>two<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'3'</span> <span class="token operator">:</span>            wage<span class="token operator">=</span>three<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'4'</span> <span class="token operator">:</span>            wage<span class="token operator">=</span>four<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'5'</span> <span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入时长:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hour<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hour <span class="token operator">&lt;=</span> xianzhi<span class="token punctuation">)</span> money <span class="token operator">=</span> hour <span class="token operator">*</span> wage<span class="token punctuation">;</span> <span class="token keyword">else</span> money <span class="token operator">=</span> xianzhi <span class="token operator">*</span> wage <span class="token operator">+</span> <span class="token punctuation">(</span>hour <span class="token operator">-</span> xianzhi<span class="token punctuation">)</span> <span class="token operator">*</span> wage<span class="token operator">*</span> chaoguo<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">&lt;=</span> a<span class="token punctuation">)</span> tax <span class="token operator">=</span> money<span class="token operator">*</span> rate1<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">&lt;=</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>tax <span class="token operator">=</span> a <span class="token operator">*</span> rate1 <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> rate2<span class="token punctuation">;</span><span class="token keyword">else</span> tax <span class="token operator">=</span> a <span class="token operator">*</span> rate1 <span class="token operator">+</span> rate2 <span class="token operator">*</span> rate2 <span class="token operator">+</span> <span class="token punctuation">(</span>money <span class="token operator">-</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> rate3<span class="token punctuation">;</span> qian <span class="token operator">=</span> money <span class="token operator">-</span> tax<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"money: %.2f tax: %.2f qian: %.2f\n"</span><span class="token punctuation">,</span> money<span class="token punctuation">,</span> tax<span class="token punctuation">,</span> qian<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">dan</span> <span class="token expression"><span class="token number">17850</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">hu</span> <span class="token expression"><span class="token number">23900</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">gong</span> <span class="token expression"><span class="token number">29750</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">li</span> <span class="token expression"><span class="token number">14875</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请选择您的身份:\na:单身 b:户主\nc:已婚共有 d:已婚离异\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">int</span> tax<span class="token punctuation">;</span>    <span class="token keyword">float</span> wage<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token char">'#'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span>            tax<span class="token operator">=</span>dan<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'b'</span><span class="token operator">:</span>            tax<span class="token operator">=</span>hu<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'c'</span><span class="token operator">:</span>            tax<span class="token operator">=</span>gong<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'d'</span><span class="token operator">:</span>            tax<span class="token operator">=</span>li<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入您的工资:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>wage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您应缴税%.2f\n"</span><span class="token punctuation">,</span><span class="token number">0.15</span><span class="token operator">*</span>tax<span class="token operator">+</span><span class="token number">0.28</span><span class="token operator">*</span><span class="token punctuation">(</span>wage<span class="token operator">-</span>tax<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您仍可以继续计算，输入#以结束输入,如仍需计算"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h1><h2 id="8-1-getchar-和-putchar"><a href="#8-1-getchar-和-putchar" class="headerlink" title="8.1 getchar() 和 putchar()"></a>8.1 getchar() 和 putchar()</h2><p> getchar()和 putchar()每次只处理一个字符。你可能认 为这种方法实在太笨拙了，毕竟与我们的阅读方式相差甚远。但是，这种方 法很适合计算机。而且，这是绝大多数文本（即，普通文字）处理程序所用 的核心方法。 </p><h2 id="8-2-缓冲区"><a href="#8-2-缓冲区" class="headerlink" title="8.2 缓冲区"></a>8.2 缓冲区</h2><p> 为什么要有缓冲区？首先，把若干字符作为一个块进行传输比逐个发送 这些字符节约时间。其次，如果用户打错字符，可以直接通过键盘修正错误。当最后按下Enter键时，传输的是正确的输入。 </p><p> 虽然缓冲输入好处很多，但是某些交互式程序也需要无缓冲输入。例 如，在游戏中，你希望按下一个键就执行相应的指令。因此，缓冲输入和无 缓冲输入都有用武之地。  </p><p> 缓冲分为两类：完全缓冲I/O和行缓冲I/O。完全缓冲输入指的是当缓冲 区被填满时才刷新缓冲区（内容被发送至目的地），通常出现在文件输入 中。缓冲区的大小取决于系统，常见的大小是 512 字节和 4096字节。行缓 冲I/O指的是在出现换行符时刷新缓冲区。<em><strong>键盘输入通常是行缓冲输入，所 以在按下Enter键后才刷新缓冲区。</strong></em>  </p><p> C决定把缓冲输入作为标准的原因是：一些计算机不允许无缓冲 输入。如果你的计算机允许无缓冲输入，那么你所用的C编译器很可能会提 供一个无缓冲输入的选项。例如，<em><strong>许多IBM PC兼容机的编译器都为支持无 缓冲输入提供一系列特殊的函数，其原型都在conio.h头文件中。这些函数包 括用于回显无缓冲输入的getche()函数和用于无回显无缓冲输入的getch()函数 （回显输入意味着用户输入的字符直接显示在屏幕上，无回显输入意味着击 键后对应的字符不显示）</strong></em>。UNIX系统使用另一种不同的方式控制缓冲。在 UNIX系统中，可以使用ioctl()函数（该函数属于UNIX库，但是不属于C标 准）指定待输入的类型，然后用getchar()执行相应的操作。在ANSI C中，用 setbuf()和setvbuf()函数（详见第13章）控制缓冲，但是受限于一些系统的内 部设置，这些函数可能不起作用。总之，ANSI没有提供调用无缓冲输入的 标准方式，这意味着是否能进行无缓冲输入取决于计算机系统。 </p><h2 id="8-3-结束键盘输入"><a href="#8-3-结束键盘输入" class="headerlink" title="8.3 结束键盘输入"></a>8.3 结束键盘输入</h2><p> #也是一个普通的字符，有时不可避免要用 到。应该用一个在文本中用不到的字符来标记输入完成，这样的字符不会无 意间出现在输入中，在你不希望结束程序的时候终止程序。 </p><h3 id="8-3-1-文件，流和键盘输入"><a href="#8-3-1-文件，流和键盘输入" class="headerlink" title="8.3.1 文件，流和键盘输入"></a>8.3.1 文件，流和键盘输入</h3><p> 文件（file）是存储器中储存信息的区域。通常，文件都保存在某种永 久存储器中（如，硬盘、U盘或DVD等）。毫无疑问，文件对于计算机系统 相当重要。例如，你编写的C程序就保存在文件中，用来编译C程序的程序 也保存在文件中。后者说明，某些程序需要访问指定的文件。当编译储存在 名为 echo.c 文件中的程序时，编译器打开echo.c文件并读取其中的内容。当 编译器处理完后，会关闭该文件。其他程序，例如文字处理器，不仅要打 开、读取和关闭文件，还要把数据写入文件。 </p><p> C可以使用主机操作系统的基本文件工具直接处 理文件，这些直接调用操作系统的函数被称为底层 I/O  </p><p> 从概念上看，C程序处理的是流而不是直接处理文件。流（stream）是 一个实际输入或输出映射的理想化数据流。这意味着不同属性和不同种类的 输入，由属性更统一的流来表示。于是，打开文件的过程就是把流与文件相 关联，而且读写都通过流来完成。 </p><h3 id="8-3-2-文件结尾"><a href="#8-3-2-文件结尾" class="headerlink" title="8.3.2 文件结尾"></a>8.3.2 文件结尾</h3><p> 计算机操作系统要以某种方式判断文件的开始和结束。检测文件结尾的 一种方法是，在文件末尾放一个特殊的字符标记文件结尾。 </p><p> 在C语言中，用 getchar()读取文件检测到文件结尾时将返回一个特殊的值，即EOF（end of file的缩写）。scanf()函数检测到文件结尾时也返回EOF。通常， EOF定义 在stdio.h文件中：</p><p> #define EOF (-1) </p><p> 为什么是-1？因为getchar()函数的返回值通常都介于0～127，这些值对 应标准字符集。但是，如果系统能识别扩展字符集，该函数的返回值可能在 0～255之间。无论哪种情况，-1都不对应任何字符，所以，该值可用于标记 文件结尾。 </p><ul><li>**while ((ch = getchar()) != EOF) *** 文件输入结束标志</li></ul><p> 变量ch的类型从char变为int，因为char类型的变量只能表示0～255的无 符号整数，但是EOF的值是-1。还好，getchar()函数实际返回值的类型是 int，所以它可以读取EOF字符。如果实现使用有符号的char类型，也可以把 ch声明为char类型，但最好还是用更通用的形式 </p><p> 每次按下Enter键，系统便会处理缓冲区中储存的字符，并在下一行打 印该输入行的副本。这个过程一直持续到以UNIX风格模拟文件结尾（按下Ctrl+D）。在PC中，要按下Ctrl+Z。 </p><h2 id="8-4-重定向和文件"><a href="#8-4-重定向和文件" class="headerlink" title="8.4 重定向和文件"></a>8.4 重定向和文件</h2><p> C程序使用标准I/O包查找标准输入作为输入源。这就是 前面介绍过的stdin流，它是把数据读入计算机的常用方式。它可以是一个过 时的设备，如磁带、穿孔卡或电传打印机，或者（假设）是键盘，甚至是一 些先进技术，如语音输入。 </p><h2 id="8-5-创建更友好的用户界面"><a href="#8-5-创建更友好的用户界面" class="headerlink" title="8.5 创建更友好的用户界面"></a>8.5 创建更友好的用户界面</h2><h3 id="8-5-1-使用缓冲输入"><a href="#8-5-1-使用缓冲输入" class="headerlink" title="8.5.1 使用缓冲输入"></a>8.5.1 使用缓冲输入</h3><p> 缓冲输入用起来比较方便，因为在把输入发送给程序之前，用户可以编 辑输入。但是，在使用输入的字符时，它也会给程序员带来麻烦。前面示例 中看到的问题是，缓冲输入要求用户按下Enter键发送输入。这一动作也传 送了换行符，程序必须妥善处理这个麻烦的换行符。 </p><p>使用getchar()或者 fflush(stdin)； </p><h3 id="8-5-2-混合数值和字符输入"><a href="#8-5-2-混合数值和字符输入" class="headerlink" title="8.5.2 混合数值和字符输入"></a>8.5.2 混合数值和字符输入</h3><p> 假设程序要求用 getchar()处理字符输入，用 scanf()处理数值输入，这两 个函数都能很好地完成任务，但是不能把它们混用。因为 getchar()读取每个 字符，包括空格、制表符和换行符；而 scanf()在读取数字时则会跳过空格、 制表符和换行符。 </p><h1 id="8-6-输入验证"><a href="#8-6-输入验证" class="headerlink" title="8.6 输入验证"></a>8.6 输入验证</h1><p> scanf(“%ld”, &amp;n) == 1 </p><p>这个验证的是scanf的返回值真否为真，应用判断输入为非负数，且只有在输入整数的时候为真</p><p> while (scanf(“%ld”, &amp;n) == 1 &amp;&amp; n &gt;= 0)   while循环条件可以描述为“当输入是一个整数且该整数为正时”。 </p><p>示例程序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span><span class="token comment">// 验证输入是一个整数</span><span class="token keyword">long</span> <span class="token function">get_long</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 验证范围的上下限是否有效</span>bool <span class="token function">bad_limits</span><span class="token punctuation">(</span><span class="token keyword">long</span> begin<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">,</span><span class="token keyword">long</span> low<span class="token punctuation">,</span> <span class="token keyword">long</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 计算a～b之间的整数平方和</span><span class="token keyword">double</span> <span class="token function">sum_squares</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">long</span> MIN <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10000000L</span><span class="token punctuation">;</span> <span class="token comment">// 范围的下限</span><span class="token keyword">const</span> <span class="token keyword">long</span> MAX <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">10000000L</span><span class="token punctuation">;</span> <span class="token comment">// 范围的上限</span><span class="token keyword">long</span> start<span class="token punctuation">;</span> <span class="token comment">// 用户指定的范围最小值</span><span class="token keyword">long</span> stop<span class="token punctuation">;</span> <span class="token comment">// 用户指定的范围最大值</span><span class="token keyword">double</span> answer<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This program computes the sum of the squares of "</span><span class="token string">"integers in a range.\nThe lower bound should not "</span><span class="token string">"be less than -10000000 and\nthe upper bound "</span>    <span class="token string">"should not be more than +10000000.\nEnter the "</span><span class="token string">"limits (enter 0 for both limits to quit):\n"</span><span class="token string">"lower limit: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>start <span class="token operator">=</span> <span class="token function">get_long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"upper limit: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stop <span class="token operator">=</span> <span class="token function">get_long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> stop <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bad_limits</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> stop<span class="token punctuation">,</span> MIN<span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please try again.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span>answer <span class="token operator">=</span> <span class="token function">sum_squares</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> stop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The sum of the squares of the integers "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"from %ld to %ld is %g\n"</span><span class="token punctuation">,</span>start<span class="token punctuation">,</span> stop<span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the limits (enter 0 for both "</span><span class="token string">"limits to quit):\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"lower limit: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>start <span class="token operator">=</span> <span class="token function">get_long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"upper limit: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stop <span class="token operator">=</span> <span class="token function">get_long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Done.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token function">get_long</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> input<span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理错误输入</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" is not an integer.\nPlease enter an "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"integer value, such as 25, -178, or 3: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> input<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">sum_squares</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>total <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> i <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span><span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">bad_limits</span><span class="token punctuation">(</span><span class="token keyword">long</span> begin<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">,</span><span class="token keyword">long</span> low<span class="token punctuation">,</span> <span class="token keyword">long</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>bool not_good <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">&gt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld isn't smaller than %ld.\n"</span><span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>not_good <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">&lt;</span> low <span class="token operator">||</span> end <span class="token operator">&lt;</span> low<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Values must be %ld or greater.\n"</span><span class="token punctuation">,</span> low<span class="token punctuation">)</span><span class="token punctuation">;</span>not_good <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">&gt;</span> high <span class="token operator">||</span> end <span class="token operator">&gt;</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Values must be %ld or less.\n"</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>not_good <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> not_good<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-6-1-分析程序"><a href="#8-6-1-分析程序" class="headerlink" title="8.6.1 分析程序"></a>8.6.1 分析程序</h2><p> 程序遵循模块化的编程思想，使用独立函数（模块）来验证输入和管理 显示。程序越大，使用模块化编程就越重要。 </p><p> main()函数管理程序流，为其他函数委派任务。它使用 get_long()获取 值、while 循环处理值、badlimits()函数检查值是否有效、sum_squres()函数 处理实际的计算： </p><h2 id="8-6-2-输入流和数字"><a href="#8-6-2-输入流和数字" class="headerlink" title="8.6.2 输入流和数字"></a>8.6.2 输入流和数字</h2><p> 在编写处理错误输入的代码时（如程序清单8.7），应该很清楚C是如何 处理输入的。考虑下面的输入：  ***is 28 12.4 ***</p><p> 在我们眼中，这就像是一个由字符、整数和浮点数组成的字符串。但是 对 C程序而言，这是一个字节流。第1个字节是字母i的字符编码，第2个字 节是字母s的字符编码，第3个字节是空格字符的字符编码，第4个字节是数 字2的字符编码，等等。所以，如果get_long()函数处理这一行输入，第1个 字符是非数字，那么整行输入都会被丢弃，包括其中的数字，因为这些数字 只是该输入行中的其他字符： </p><p> 虽然输入流由字符组成，但是也可以设置scanf()函数把它们转换成数 值。例如，考虑下面的输入：42</p><p> 如果在scanf()函数中使用%c转换说明，它只会读取字符4并将其储存在 char类型的变量中。如果使用%s转换说明，它会读取字符4和字符2这两个字 符，并将其储存在字符数组中。如果使用%d转换说明，scanf()同样会读取 两个字符，但是随后会计算出它们对应的整数值：4×10+2，即42，然后将 表示该整数的二进制数储存在 int 类型的变量中。如果使用%f 转换说明，scanf()也会读取两个字符，计算出它们对应的数值42.0，用内部的浮点表示 法表示该值，并将结果储存在float类型的变量中。 </p><p>简而言之，输入由字符组成，但是scanf()可以把输入转换成整数值或浮 点数值。使用转换说明（如%d或%f）限制了可接受输入的字符类型，而 getchar()和使用%c的scanf()接受所有的字符。  </p><h1 id="8-7-菜单游览"><a href="#8-7-菜单游览" class="headerlink" title="8.7 菜单游览"></a>8.7 菜单游览</h1><h2 id="8-7-1-任务"><a href="#8-7-1-任务" class="headerlink" title="8.7.1 任务"></a>8.7.1 任务</h2><p>菜单程序需要执行的任务:</p><ol><li>获取用户的 响应，根据响应选择要执行的动作。 </li><li>程序应该提供返回菜单的选项。 C 的 switch 语句是根据选项决定行为的好工具，用户的每个选择都可以对应 一个特定的case标签 </li><li>使用while语句可以实现重复访问菜单的功能。</li></ol><p>伪代码;</p><p>获取代码</p><p>当选项不是‘q’时</p><p>转至相应的选项并执行</p><p>获取下一个选项</p><h2 id="8-7-2-使执行更顺利"><a href="#8-7-2-使执行更顺利" class="headerlink" title="8.7.2 使执行更顺利"></a>8.7.2 使执行更顺利</h2><p> 缓冲输入依旧带来些麻烦，程序把用户每次按下 Return 键产生的换行符视为错误响应。为了让程序的界面更流畅，该函数应该跳过这些换行符。 </p><p> 一种是用名为get_first()的新函数替换 getchar()函数，读取一行的第1个字符并丢弃剩余的字符。这种方法的优点 是，把类似act这样的输入视为简单的a</p><h2 id="8-7-3-混合字符和数值输入"><a href="#8-7-3-混合字符和数值输入" class="headerlink" title="8.7.3 混合字符和数值输入"></a>8.7.3 混合字符和数值输入</h2><p> 混合字符和数值输入会产生一些问题 </p><p>示例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">char</span> <span class="token function">get_choice</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token function">get_first</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">get_int</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>choice <span class="token operator">=</span> <span class="token function">get_choice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Buy low, sell high.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'b'</span><span class="token operator">:</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* ANSI */</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'c'</span><span class="token operator">:</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Program error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bye.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Count how far? Enter an integer:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token function">get_int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token function">get_choice</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> ch<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the letter of your choice:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a. advice b. bell\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c. count q. quit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ch <span class="token operator">=</span> <span class="token function">get_first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token char">'a'</span> <span class="token operator">||</span> ch <span class="token operator">&gt;</span> <span class="token char">'c'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please respond with a, b, c, or q.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ch <span class="token operator">=</span> <span class="token function">get_first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> ch<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token function">get_first</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> ch<span class="token punctuation">;</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">return</span> ch<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">get_int</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> input<span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理错误输出</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" is not an integer.\nPlease enter an "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"integer value, such as 25, -178, or 3: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> input<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="作业-4"><a href="#作业-4" class="headerlink" title="作业"></a>作业</h1><p> 编写一个程序，显示一个提供加法、减法、乘法、除法的菜单。获得 用户选择的选项后，程序提示用户输入两个数字，然后执行用户刚才选择的 操作。该程序只接受菜单提供的选项。程序使用float类型的变量储存用户输 入的数字，如果用户输入失败，则允许再次输入。进行除法运算时，如果用 户输入0作为第2个数（除数），程序应提示用户重新输入一个新值。 </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> chen<span class="token punctuation">;</span>    <span class="token keyword">float</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>jie<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入您的选择:\n"</span>    <span class="token string">"a.加法     b.减法\n"</span>    <span class="token string">"c.乘法     d.除法\n"</span>    <span class="token string">"q.退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>chen<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token char">'q'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chen<span class="token operator">!=</span><span class="token char">'a'</span> <span class="token operator">&amp;&amp;</span> chen<span class="token operator">!=</span><span class="token char">'b'</span> <span class="token operator">&amp;&amp;</span> chen<span class="token operator">!=</span><span class="token char">'c'</span> <span class="token operator">&amp;&amp;</span> chen<span class="token operator">!=</span><span class="token char">'d'</span> <span class="token operator">&amp;&amp;</span> chen<span class="token operator">!=</span><span class="token char">'\r'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请重新输入!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>chen<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入两个数字:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f %f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jie<span class="token operator">=</span>n<span class="token operator">+</span>m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"m+n=%.2f"</span><span class="token punctuation">,</span>jie<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'b'</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入两个数字:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f %f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jie<span class="token operator">=</span>n<span class="token operator">-</span>m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n-m=%.2f"</span><span class="token punctuation">,</span>jie<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'c'</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入两个数字:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f %f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jie<span class="token operator">=</span>n<span class="token operator">*</span>m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n*m=%.2f"</span><span class="token punctuation">,</span>jie<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'d'</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入两个数字:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f %f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请重新输入m的值:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jie<span class="token operator">=</span>n<span class="token operator">/</span>m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n/m=%.2f"</span><span class="token punctuation">,</span>jie<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作业过程中输出得到了inf这样的值，查找到的原因如下:</p><p> nf一般是因为得到的数值，超出浮点数的表示范围（溢出，即阶码部分超过其能表示的最大值）；而nan一般是因为对浮点数进行了未定义的操作，如对-1开方。 </p><p> 2、nan==nan<br>结果是0或false，即不能和nan进行比较，和nan进行比较得到的结果总是false或0。所以可以用函数： int<br>isNumber(double d){return (d==d);}来判断d是否为nan，若d是nan则返回0，否则返回非零值。</p><p>　　3、1.0/0.0等于inf，-1.0/0.0等于-inf，0.0+inf=inf；</p><p>　　4、对负数开方sqrt(-1.0)、对负数求对数(log(-1.0))、0.0/0.0、0.0*inf、inf/inf、inf-inf这些操作都会得到nan。(0/0会产生操作异常；0.0/0.0不会产生操作异常，而是会得到nan)</p><p>　　5、得到inf时就查看是否有溢出或者除以0，得到nan时就查看是否有非法操作。</p><p>　　6、C语言的头文件&lt;float.h&gt;中，有定义的常量DBL_MAX，这个常量表示“能表示出来的最大的双精度浮点型数值”。&lt;float.h&gt;中还有常量DBL_MIN,DBL_MIN表示可以用规格化表示的最小的正浮点数，但DBL_MIN并不是最小的正浮点数，因为可以用可以用非规格化浮点数表示的更小。可以用函数：int<br>isFiniteNumber(double d){return<br>(d&lt;=DBL_MAX&amp;&amp;d&gt;=-DBL_MAX);}来判断d是否为一个finite数（既不是inf，又不是nan（加入d为nan，则d参加比较就会得到false（0）值））。</p><p>　　7、1.0/inf等于0.0。</p><p>　　8、inf是可以与其他浮点数进行比较的，即可以参与&lt;=、&gt;+、==、!=等运算。</p><p>　　</p><p>　　下面这几个宏（用宏实现的，使用时跟函数的形式基本相同）是判断一个表达式的结果是否为inf、nan或其他：</p><p>　　头文件：include&lt;math.h&gt;</p><p>　　宏的用法（类似于函数原型）：int fpclassify(x);</p><p>　　int<br>isfinite(x);</p><p>　　int<br>isnormal(x);</p><p>　　int isnan(x);</p><p>　　int isinf(x);</p><p>　　具体用法：</p><p>　　1、int<br>fpclassify(x)<br>用来查看浮点数x的情况，fpclassify可以用任何浮点数表达式作为参数，fpclassify的返回值有以下几种情况。</p><p>　　FP_NAN：x是一个“not a number”。</p><p>　　FP_INFINITE: x是正、负无穷。</p><p>　　FP_ZERO: x是0。</p><p>　　FP_SUBNORMAL: x太小，以至于不能用浮点数的规格化形式表示。</p><p>　　FP_NORMAL: x是一个正常的浮点数（不是以上结果中的任何一种）。</p><p>　　2、int<br>isfinite(x)<br>当（fpclassify(x)!=FP_NAN&amp;&amp;fpclassify(x)!=FP_INFINITE）时，此宏得到一个非零值。</p><p>　　3、int<br>isnormal(x) 当（fpclassify(x)==FP_NORMAL）时，此宏得到一个非零值。</p><p>　　4、int<br>isnan(x) 当（fpclassify(x)==FP_NAN）时，此宏返回一个非零值。</p><p>　　5、int<br>isinf(x) 当x是正无穷是返回1，当x是负无穷时返回-1。（有些较早的编译器版本中，无论是正无穷还是负无穷，都返回非零值，不区分正负无穷）。 </p><p>*** INF表示“无穷大”，是infinite的缩写。***<br>***NAN表示“无效数字”，是Not a number的缩写。 ***</p><h1 id="9-1-复习函数"><a href="#9-1-复习函数" class="headerlink" title="9.1 复习函数"></a>9.1 复习函数</h1><p> 函数（function）是完成特定任务的独立程序代码 单元。 </p><p> 使用函数可以省去编写重复代码的苦差。如 果程序要多次完成某项任务，那么只需编写一个合适的函数，就可以在需要 时使用这个函数，或者在不同的程序中使用该函数，就像许多程序中使用 putchar()一样。其次，即使程序只完成某项任务一次，也值得使用函数。因 为函数让程序更加模块化，从而提高了程序代码的可读性，更方便后期修 改、完善。 </p><h2 id="9-1-1-创建并使用简单的函数"><a href="#9-1-1-创建并使用简单的函数" class="headerlink" title="9.1.1 创建并使用简单的函数"></a>9.1.1 创建并使用简单的函数</h2><p>示例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NAME</span> <span class="token string">"GIGATHINK, INC."</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADDRESS</span> <span class="token string">"101 Megabuck Plaza"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PLACE</span> <span class="token string">"Megapolis, CA 94904"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIDTH</span> <span class="token expression"><span class="token number">40</span></span></span><span class="token keyword">void</span> <span class="token function">starbar</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 函数原型 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">starbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> NAME<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> PLACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">starbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 使用函数 */</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">starbar</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment">/* 定义函数 */</span><span class="token punctuation">{</span><span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> count <span class="token operator">&lt;=</span> WIDTH<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-1-2-分析程序"><a href="#9-1-2-分析程序" class="headerlink" title="9.1.2 分析程序"></a>9.1.2 分析程序</h2><p> 函数原型（function prototype）告诉编 译器函数starbar()的类型；函数调用（function call）表明在此处执行函数； 函数定义（function definition）明确地指定了函数要做什么。  </p><p> 函数和变量一样，有多种类型。任何程序在使用函数之前都要声明该函 数的类型。 </p><p>例如： void starbar(void); </p><p> 圆括号表明starbar是一个函数名。第1个void是函数类型，void类型表明 函数没有返回值。第2个void（在圆括号中）表明该函数不带参数。分号表 明这是在声明函数，不是定义函数。也就是说，这行声明了程序将使用一个 名为starbar()、没有返回值、没有参数的函数，并告诉编译器在别处查找该 函数的定义。 </p><p> 一般而言，<em><strong>函数原型指明了函数的返回值类型和函数接受的参数类型。 这些信息称为该函数的签名（signature）</strong></em>。对于starbar()函数而言，其签名是 该函数没有返回值，没有参数。 </p><p> 程序中strarbar()和main()的定义形式相同。首先函数头包括函数类型、 函数名和圆括号，接着是左花括号、变量声明、函数表达式语句，最后以右 花括号结束（见图9.2）。注意，函数头中的starbar()后面没有分号，告诉编 译器这是定义starbar()，而不是调用函数或声明函数原型。 </p><p> 程序把 starbar()和 main()放在一个文件中。当然，也可以把它们分别放 在两个文件中。把函数都放在一个文件中的单文件形式比较容易编译，而使 用多个文件方便在不同的程序中使用同一个函数。如果把函数放在一个单独 的文件中，要把#define 和#include 指令也放入该文件。现在，先把所有的函数都放在一个文件中。main()的右花 括号告诉编译器该函数结束的位置，后面的starbar()函数头告诉编译器 starbar()是一个函数。  </p><p> starbar()函数中的变量count是局部变量（local variable），意思是该变 量只属于starbar()函数。***可以在程序中的其他地方（包括main()中）使用 count，这不会引起名称冲突，它们是同名的不同变量。 ***</p><p> 如果把starbar()看作是一个黑盒，那么它的行为是打印一行星号。不用 给该函数提供任何输入，因为调用它不需要其他信息。而且，它没有返回 值，所以也不给 main()提供（或返回）任何信息。简而言之，starbar()不需 要与主调函数通信。  </p><h2 id="9-1-3-函数参数-需要通信的函数"><a href="#9-1-3-函数参数-需要通信的函数" class="headerlink" title="9.1.3 函数参数    需要通信的函数"></a>9.1.3 函数参数    需要通信的函数</h2><p>示例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span> <span class="token comment">/* 为strlen()提供原型 */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NAME</span> <span class="token string">"GIGATHINK, INC."</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADDRESS</span> <span class="token string">"101 Megabuck Plaza"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PLACE</span> <span class="token string">"Megapolis, CA 94904"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WIDTH</span> <span class="token expression"><span class="token number">40</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SPACE</span> <span class="token char">' '</span></span><span class="token keyword">void</span> <span class="token function">show_n_char</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> spaces<span class="token punctuation">;</span><span class="token function">show_n_char</span><span class="token punctuation">(</span><span class="token char">'*'</span><span class="token punctuation">,</span> WIDTH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 用符号常量作为参数 */</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show_n_char</span><span class="token punctuation">(</span>SPACE<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 用符号常量作为参数 */</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>spaces <span class="token operator">=</span> <span class="token punctuation">(</span>WIDTH <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span>ADDRESS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">/* 计算要跳过多少个空格*/</span><span class="token function">show_n_char</span><span class="token punctuation">(</span>SPACE<span class="token punctuation">,</span> spaces<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 用一个变量作为参数*/</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show_n_char</span><span class="token punctuation">(</span>SPACE<span class="token punctuation">,</span> <span class="token punctuation">(</span>WIDTH <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span>PLACE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> PLACE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 用一个表达式作为参数*/</span><span class="token function">show_n_char</span><span class="token punctuation">(</span><span class="token char">'*'</span><span class="token punctuation">,</span> WIDTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* show_n_char()函数的定义 */</span><span class="token keyword">void</span> <span class="token function">show_n_char</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> count <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-1-4-定义带形式参数的函数"><a href="#9-1-4-定义带形式参数的函数" class="headerlink" title="9.1.4 定义带形式参数的函数"></a>9.1.4 定义带形式参数的函数</h2><p> 该行告知编译器show_n_char()使用两个参数ch和num，ch是char类型， num是int类型。这两个变量被称为形式参数（formal argument，但是最近的标 准推荐使用formal parameter），简称形参。和定义在函数中变量一样，形式参数也是局部变量，属该函数私有。这意味着在其他函数中使用同名变量不 会引起名称冲突。每次调用函数，就会给这些变量赋值。  </p><p> 注意，ANSI C要求在每个变量前都声明其类型。也就是说，不能像普 通变量声明那样使用同一类型的变量列表： </p><p> ***void dibs(int x, y, z) *** 无效的函数头</p><p> ***void dubs(int x, int y, int z)  ***这是对的</p><p> 这里，圆括号中只有参数名列表，而参数的类型在后面声明。注意，普 通的局部变量在左花括号之后声明，而上面的变量在函数左花括号之前声 明。如果变量是同一类型，这种形式可以用逗号分隔变量名列表，如下所 示： </p><p> void dibs(x, y, z)                 int x, y, z;  </p><h2 id="9-1-5-声明带形式参数函数的原型"><a href="#9-1-5-声明带形式参数函数的原型" class="headerlink" title="9.1.5 声明带形式参数函数的原型"></a>9.1.5 声明带形式参数函数的原型</h2><p> 在使用函数之前，要用ANSI C形式声明函数原型： </p><p> void show_n_char(char ch, int num);  </p><p> 当函数接受参数时，函数原型用逗号分隔的列表指明参数的数量和类 型。根据个人喜好，你也可以省略变量名： </p><p> void show_n_char(char, int); </p><p> 在原型中使用变量名并没有实际创建变量，char仅代表了一个char类型 的变量，以此类推。再次提醒读者注意，ANSI C也接受过去的声明函数形 式，即圆括号内没有参数列表：  </p><h2 id="9-1-6-调用带实际参数的函数"><a href="#9-1-6-调用带实际参数的函数" class="headerlink" title="9.1.6 调用带实际参数的函数"></a>9.1.6 调用带实际参数的函数</h2><p> 实际参数是出现在函数调用圆括号中的表达式。形式参数是函数定义的 函数头中声明的变量。调用函数时，创建了声明为形式参数的变量并初始化 为实际参数的求值结果。 </p><h2 id="9-1-7-黑盒的视角"><a href="#9-1-7-黑盒的视角" class="headerlink" title="9.1.7 黑盒的视角"></a>9.1.7 黑盒的视角</h2><p> 黑盒方法的核心部分是：ch、num和count都是show_n_char()私有的局部 变量。如果在main()中使用同名变量，那么它们相互独立，互不影响。也就 是说，如果main()有一个count变量，那么改变它的值不会改变show_n_char() 中的count，反之亦然。黑盒里发生了什么对主调函数是不可见的。  </p><h2 id="9-1-8-使用return从函数中返回值"><a href="#9-1-8-使用return从函数中返回值" class="headerlink" title="9.1.8 使用return从函数中返回值"></a>9.1.8 使用return从函数中返回值</h2><p> 测试函数的程序有时被称为驱动程序（driver）， 该驱动程序调用一个函数。 </p><p> 设计函数的返回值可以把信息从被调函数传回主调函数。 </p><p>示例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">imin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> evil1<span class="token punctuation">,</span> evil2<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter a pair of integers (q to quit):\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>evil1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>evil2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//这里scanf的返回值就是2</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The lesser of %d and %d is %d.\n"</span><span class="token punctuation">,</span>evil1<span class="token punctuation">,</span> evil2<span class="token punctuation">,</span> <span class="token function">imin</span><span class="token punctuation">(</span>evil1<span class="token punctuation">,</span> evil2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter a pair of integers (q to quit):\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bye.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">imin</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> min<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> m<span class="token punctuation">)</span>min <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token keyword">else</span>min <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键字return后面的表达式的值就是函数的返回值。在该例中，该函数 返回的值就是变量min的值。因为min是int类型的变量，所以imin()函数的类 型也是int。 </p><p> 变量min属于imin()函数私有，但是return语句把min的值传回了主调函 数。下面这条语句的作用是把min的值赋给lesser: </p><p>***lesser = imin(n,m); ***</p><p>但是不可以这样写：</p><p> imin(n,m); </p><p>lesser = min; </p><p>因为主调函数甚至不知道min的存在。记住，imin()中的变量是 imin()的局部变量。函数调用imin(evil1, evil2)只是把两个变量的值拷贝了一 份。 返回值不仅可以赋给变量，也可以被用作表达式的一部分。</p><p> answer = 2 * imin(z, zstar) + 25; </p><p>printf(“%d\n”, imin(-32 + answer, LIMIT)); </p><p> 返回值不一定是变量的值，也可以是任意表达式的值。 </p><p>如果直接使用return;</p><p>则会终止函数，并把控制返回给主函数</p><p> 因为 return 后面 没有任何表达式，所以没有返回值，<em><strong>只有在void函数中才会用到这种形式。</strong></em>  </p><h2 id="9-1-9-函数类型"><a href="#9-1-9-函数类型" class="headerlink" title="9.1.9 函数类型"></a>9.1.9 函数类型</h2><p> 声明函数时必须声明函数的类型。带返回值的函数类型应该与其返回值 类型相同，而没有返回值的函数应声明为void类型。如果没有声明函数的类 型，旧版本的C编译器会假定函数的类型是int。</p><p>（但是现在C99已经不允许了）</p><p>  类型声明是函数定义的一部分。要记住，函数类型指的是返回值的类 型，不是函数参数的类型。例如，下面的函数头定义了一个带两个int类型参 数的函数，但是其返回值是double类型。  </p><p> double klink(int a, int b)  </p><h1 id="作业-5"><a href="#作业-5" class="headerlink" title="作业"></a>作业</h1><ol><li></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">double</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">double</span> m<span class="token punctuation">,</span><span class="token keyword">double</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这两个数的调和平均数是%lf"</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">double</span> m<span class="token punctuation">,</span><span class="token keyword">double</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> q<span class="token punctuation">;</span>    m<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span>m<span class="token punctuation">;</span>    n<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span>n<span class="token punctuation">;</span>    q<span class="token operator">=</span><span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    q<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span>q<span class="token punctuation">;</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">double</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">double</span> m<span class="token punctuation">,</span><span class="token keyword">double</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf %lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这两个数小的是%lf"</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">double</span> m<span class="token punctuation">,</span><span class="token keyword">double</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">&gt;</span>n<span class="token punctuation">)</span>        q<span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token keyword">else</span>        q<span class="token operator">=</span>m<span class="token punctuation">;</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-2-ANSI-C函数原型"><a href="#9-2-ANSI-C函数原型" class="headerlink" title="9.2 ANSI C函数原型"></a>9.2 ANSI C函数原型</h1><p> 下面是ANSI之前的函数声明，告知编译器imin()返回int类型的值： </p><p> int imin();  </p><p> 然而，以上函数声明并未给出imin()函数的参数个数和类型。因此，如 果调用imin()时使用的参数个数不对或类型不匹配，编译器根本不会察觉出 来。 </p><h2 id="9-2-1-问题所在"><a href="#9-2-1-问题所在" class="headerlink" title="9.2.1 问题所在"></a>9.2.1 问题所在</h2><p>示例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">imax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 旧式函数声明 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The maximum of %d and %d is %d.\n"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token function">imax</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The maximum of %d and %d is %d.\n"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">585</span><span class="token function">imax</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">imax</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> m <span class="token operator">?</span> n <span class="token operator">:</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 第1次调用printf()时省略了imax()的一个参数，第2次调用printf()时用两 个浮点参数而不是整数参数。尽管有些问题，但程序可以编译和运行。 </p><p> 由于不同系统的内部机制不同，所以出现问题的 具体情况也不同。下面介绍的是使用P C和VA X的情况。主调函数把它的参 数储存在被称为栈（stack）的临时存储区，被调函数从栈中读取这些参数。 对于该例，这两个过程并未相互协调。主调函数根据函数调用中的实际参数 决定传递的类型，而被调函数根据它的形式参数读取值。因此，函数调用 imax(3)把一个整数放在栈中。当imax()函数开始执行时，它从栈中读取两个整数。而实际上栈中只存放了一个待读取的整数，所以读取的第 2 个值是当 时恰好在栈中的其他值。 </p><p> 第2次使用imax()函数时，它传递的是float类型的值。这次把两个double 类型的值放在栈中（回忆一下，当float类型被作为参数传递时会被升级为 double类型）。在我们的系统中，两个double类型的值就是两个64位的值， 所以128位的数据被放在栈中。当imax()从栈中读取两个int类型的值时，它 从栈中读取前64位。在我们的系统中，每个int类型的变量占用32位。这些数 据对应两个整数，其中较大的是3886。 ****</p><h2 id="9-2-2-ANSI的解决方案"><a href="#9-2-2-ANSI的解决方案" class="headerlink" title="9.2.2 ANSI的解决方案"></a>9.2.2 ANSI的解决方案</h2><p> ANSI C标准要求在函数声明时还要声明变量 的类型，即使用函数原型（function prototype）来声明函数的返回类型、参 数的数量和每个参数的类型。未标明 imax()函数有两个 int 类型的参数，可 以使用下面两种函数原型来声明 </p><p> int imax(int, int);</p><p> int imax(int a, int b); </p><p> 第1种形式使用以逗号分隔的类型列表，第2种形式在类型后面添加了变 量名。***这里的变量名是假名，不必与函数定义的形式参数名一致。  ***</p><h2 id="9-2-3-无参数和未指定参数"><a href="#9-2-3-无参数和未指定参数" class="headerlink" title="9.2.3　无参数和未指定参数"></a>9.2.3　无参数和未指定参数</h2><p> void print_name(); </p><p>一个支持ANSI C的编译器会假定用户没有用函数原型来声明函数，它 将不会检查参数。</p><p>为了表明函数确实没有参数，应该在圆括号中使用void关 键字：</p><p> void print_name(void);</p><p> 支持ANSI C的编译器解释为print_name()不接受任何参数。</p><p>然后在调用 该函数时，编译器会检查以确保没有使用参数。</p><p> 一些函数接受（如，printf()和scanf()）许多参数。例如对于printf()，第1个参数是字符串，但是其余参数的类型和数量都不固定。</p><p>对于这种情况， ANSI C允许使用部分原型。例如，对于printf()可以使用下面的原型：</p><p> int printf(const char *, …); </p><p>这种原型表明，第1个参数是一个字符串；可 能还有其他未指定的参数。 </p><p>***C库通过stdarg.h头文件提供了一个定义这类（形参数量不固定的）函数 的标准方法。 ***</p><h2 id="9-2-4-函数原型的优点"><a href="#9-2-4-函数原型的优点" class="headerlink" title="9.2.4　函数原型的优点"></a>9.2.4　函数原型的优点</h2><p> 函数原型是C语言的一个强有力的工具，它让编译器捕获在使用函数时 可能出现的许多错误或疏漏。 </p><h1 id="9-3递归"><a href="#9-3递归" class="headerlink" title="9.3递归"></a>9.3递归</h1><p> C允许函数调用它自己，这种调用过程称为递归（recursion）。递归有 时难以捉摸，有时却很方便实用。结束递归是使用递归的难点，因为如果递 归代码中没有终止递归的条件测试部分，一个调用自己的函数会无限递归。 </p><p> 可以使用循环的地方通常都可以使用递归。有时用循环解决问题比较 好，但有时用递归更好。递归方案更简洁，但效率却没有循环高。 </p><h2 id="9-3-1示例"><a href="#9-3-1示例" class="headerlink" title="9.3.1示例"></a>9.3.1示例</h2><pre class="line-numbers language-ｃ" data-language="ｃ"><code class="language-ｃ">#include &lt;stdio.h&gt;void up_and_down(int);int main(void){up_and_down(1);return 0;}void up_and_down(int n){printf("Level %d: n location %p\n", n, &amp;n); // #1if (n &lt; 4)up_and_down(n + 1);printf("LEVEL %d: n location %p\n", n, &amp;n); // #2}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><p>Level 1: n location 0x0012ff48 </p><p>Level 2: n location 0x0012ff3c</p><p>Level 3: n location 0x0012ff30 </p><p>Level 4: n location 0x0012ff24 </p><p>LEVEL 4: n location 0x0012ff24 </p><p>LEVEL 3: n location 0x0012ff30 </p><p>LEVEL 2: n location 0x0012ff3c </p><p>LEVEL 1: n location 0x0012ff48 </p><p> 每级递归的变量 n 都属于本级递归私有。</p><p> 首先，main()调用了带参 数1的up_and_down()函数，执行结果是up_and_down()中的形式参数n的值是 1，所以打印语句#1打印Level 1。然后，由于n小于4，up_and_down()（第1级）调用实际参数为n + 1（或2）的up_and_down()（第2级）。于是第2级调 用中的n的值是2，打印语句#1打印Level 2。与此类似，下面两次调用打印的 分别是Level 3和Level 4。 当执行到第4级时，n的值是4，所以if测试条件为假。up_and_down()函 数不再调用自己。第4级调用接着执行打印语句#2，即打印LEVEL 4，因为n 的值是4。此时，第4级调用结束，控制被传回它的主调函数（即第3级调 用）。在第3级调用中，执行的最后一条语句是调用if语句中的第4级调用。 被调函数（第4级调用）把控制返回在这个位置，因此，第3级调用继续执行 后面的代码，打印语句#2打印LEVEL 3。然后第3级调用结束，控制被传回 第2级调用，接着打印LEVEL2，以此类推。 </p><p> 好比有一条函数调用链——fun1()调用 fun2()、fun2()调用 fun3()、fun3()调用fun4()。当 fun4()结束时，控制传回 fun3()；当fun3()结束时，控制传回 fun2()；当fun2()结束时，控制传回 fun1()。递归的情况与此类似，只不过fun1()、fun2()、fun3()和fun4()都是相同 的函数。 </p><h2 id="9-3-2-递归的原理"><a href="#9-3-2-递归的原理" class="headerlink" title="9.3.2　递归的原理"></a>9.3.2　递归的原理</h2><p> 第1，每级函数调用都有自己的变量。也就是说，第1级的n和第2级的n 不同，所以程序创建了4个单独的变量，每个变量名都是n，但是它们的值各 不相同。当程序最终返回 up_and_down()的第1 级调用时，最初的n仍然是它 的初值1 。</p><p> 第2，每次函数调用都会返回一次。当函数执行完毕后，控制权将被传 回上一级递归。程序必须按顺序逐级返回递归，从某级up_and_down()返回 上一级的up_and_down()，不能跳级回到main()中的第1级调用。 </p><p> 第3，递归函数中位于递归调用之前的语句，均按被调函数的顺序执 行。例如，程序清单9.6中的打印语句#1位于递归调用之前，它按照递归的 顺序：第1级、第2级、第3级和第4级，被执行了4次。 </p><p> 第4，递归函数中位于递归调用之后的语句，均按被调函数相反的顺序 执行。例如，打印语句#2位于递归调用之后，其执行的顺序是第4级、第3 级、第2级、第1级。递归调用的这种特性在解决涉及相反顺序的编程问题时 很有用。 </p><p> 第5，虽然每级递归都有自己的变量，但是并没有拷贝函数的代码。程 序按顺序执行函数中的代码，而递归调用就相当于又从头开始执行函数的代 码。除了为每次递归调用创建变量外，递归调用非常类似于一个循环语句。 实际上，递归有时可用循环来代替，循环有时也能用递归来代替。 </p><p> 最后，递归函数必须包含能让递归调用停止的语句。通常，递归函数都 使用if或其他等价的测试条件在函数形参等于某特定值时终止递归。为此， 每次递归调用的形参都要使用不同的值。 </p><h2 id="9-3-3-尾递归"><a href="#9-3-3-尾递归" class="headerlink" title="9.3.3　尾递归"></a>9.3.3　尾递归</h2><p>最简单的递归形式是把递归调用置于函数的末尾，即正好在 return 语句 之前。这种形式的递归被称为尾递归（tail recursion），因为递归调用在函 数的末尾。尾递归是最简单的递归形式，因为它相当于循环。  </p><p>用递归和循环来计算都没问题，那么到底应该使用哪一个？一般而 言，选择循环比较好。首先，每次递归都会创建一组变量，所以递归使用的 内存更多，而且每次递归调用都会把创建的一组新变量放在栈中。递归调用 的数量受限于内存空间。其次，由于每次函数调用要花费一定的时间，所以 递归的执行速度较慢。那么，演示这个程序示例的目的是什么？因为尾递归 是递归中最简单的形式，比较容易理解。在某些情况下，不能用简单的循环 代替递归，因此读者还是要好好理解递归。  </p><h2 id="9-3-4-递归和倒序计算"><a href="#9-3-4-递归和倒序计算" class="headerlink" title="9.3.4　递归和倒序计算"></a>9.3.4　递归和倒序计算</h2><p> 递归在处理倒序时非常方便（在解决这类问题中，递归比循环简单）。 </p><p>以二进制打印整数</p><pre class="line-numbers language-ｃ" data-language="ｃ"><code class="language-ｃ">#include &lt;stdio.h&gt;void to_binary(unsigned long n);int main(void){unsigned long number;printf("Enter an integer (q to quit):\n");while (scanf("%lu", &amp;number) == 1){printf("Binary equivalent: ");to_binary(number);putchar('\n');printf("Enter an integer (q to quit):\n");}printf("Done.\n");return 0;}void to_binary(unsigned long n) /* 递归函数 */{int r;r = n % 2;if (n &gt;= 2)to_binary(n / 2);putchar(r == 0 ? '0' : '1');return;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-3-5-递归的优缺点"><a href="#9-3-5-递归的优缺点" class="headerlink" title="9.3.5　递归的优缺点"></a>9.3.5　递归的优缺点</h2><p>递归既有优点也有缺点。优点是递归为某些编程问题提供了最简单的解 决方案。缺点是一些递归算法会快速消耗计算机的内存资源。另外，递归不 方便阅读和维护。 </p><p> 假设调用 Fibonacci(40)。这是第1 级递归调用，将 创建一个变量 n。然后在该函数中要调用Fibonacci()两次，在第2级递归中要 分别创建两个变量n。这两次调用中的每次调用又会进行两次调用，因而在 第3级递归中要创建4个名为n的变量。此时总共创建了7个变量。由于每级递 归创建的变量都是上一级递归的两倍，所以变量的数量呈指数增长！在第 5 章中介绍过一个计算小麦粒数的例子，按指数增长很快就会产生非常大的 值。在本例中，指数增长的变量数量很快就消耗掉计算机的大量内存，很可 能导致程序崩溃。 虽然这是个极端的例子，但是该例说明：在程序中使用递归要特别注 意，尤其是效率优先的程序。 </p><p> main()函数是否与其他函数不同？是的，main()的确有点特殊。当 main()与程序中的其他函数放在一起时，最开始执行的是main()函数中的第1 条语句，但是这也是局限之处。main()也可以被自己或其他函数递归调用 ——尽管很少这样做。 </p><h1 id="作业-6"><a href="#作业-6" class="headerlink" title="作业"></a>作业</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">double</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ANSI函数原型</span><span class="token keyword">double</span> <span class="token function">powers</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token punctuation">,</span> xpow<span class="token punctuation">,</span>xpows<span class="token punctuation">;</span>    <span class="token keyword">int</span> exp<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>exp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        xpow <span class="token operator">=</span> <span class="token function">power</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数调用</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"循环输出的:%.3g to the power %d is %.5g\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> xpow<span class="token punctuation">)</span><span class="token punctuation">;</span>        xpows<span class="token operator">=</span><span class="token function">powers</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"递归输出的:%.3g to the power %d is %.5g\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> xpows<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter next pair of numbers or q to quit.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hope you enjoyed this power trip -- bye!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token comment">// 函数定义</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> pow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        pow <span class="token operator">*=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token operator">-</span>p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        pow <span class="token operator">*=</span> <span class="token number">1</span><span class="token operator">/</span>n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pow<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0的0次幂未定义,已为您处理为1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       pow<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pow<span class="token punctuation">;</span> <span class="token comment">// 返回pow的值</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">powers</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">powers</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-4-编译多源代码文件的程序"><a href="#9-4-编译多源代码文件的程序" class="headerlink" title="9.4 编译多源代码文件的程序"></a>9.4 编译多源代码文件的程序</h1><p> 使用多个函数最简单的方法是把它们都放在同一个文件中，然后像编译 只有一个函数的文件那样编译该文件即可。其他方法因操作系统而异。</p><h2 id="9-4-1-UNIX"><a href="#9-4-1-UNIX" class="headerlink" title="9.4.1 UNIX"></a>9.4.1 UNIX</h2><p> 假定在UNIX系统中安装了UNIX C编译器cc（最初的cc已经停用，但是 许多UNIX系统都给cc命令起了一个别名用作其他编译器命令，典型的是gcc 或clang）。 </p><p> 假设file1.c和file2.c是两个内含C函数的文件，下面的命令将编译 两个文件并生成一个名为a.out的可执行文件： </p><p>cc file1.c file2.c </p><p> 另外，还生成两个名为file1.o和file2.o的目标文件。如果后来改动了 file1.c，而file2.c不变，可以使用以下命令编译第1个文件，并与第2个文件 的目标代码合并： </p><p> cc file1.c file2.o </p><h2 id="9-4-2-Linux"><a href="#9-4-2-Linux" class="headerlink" title="9.4.2 Linux"></a>9.4.2 Linux</h2><p> 假定Linux系统安装了GNU C编译器GCC。假设file1.c和file2.c是两个内 含C函数的文件，下面的命令将编译两个文件并生成名为a.out的可执行文 件： </p><p> gcc file1.c file2.c </p><p> 另外，还生成两个名为file1.o和file2.o的目标文件。如果后来改动了 file1.c，而file2.c不变，可以使用以下命令编译第1个文件，并与第2个文件 的目标代码合并：  </p><p> gcc file1.c file2.o </p><h2 id="9-4-3-DOS命令行编译器"><a href="#9-4-3-DOS命令行编译器" class="headerlink" title="9.4.3 DOS命令行编译器"></a>9.4.3 DOS命令行编译器</h2><p> 绝大多数DOS命令行编译器的工作原理和UNIX的cc命令类似，只不过 使用不同的名称而已。其中一个区别是，对象文件的扩展名是.obj，而不 是.o。一些编译器生成的不是目标代码文件，而是汇编语言或其他特殊代码 的中间文件。 </p><h2 id="9-4-4-windows和苹果的IDE编译器"><a href="#9-4-4-windows和苹果的IDE编译器" class="headerlink" title="9.4.4 windows和苹果的IDE编译器"></a>9.4.4 windows和苹果的IDE编译器</h2><p> Windows和Macintosh系统使用的集成开发环境中的编译器是面向项目 的。项目（project）描述的是特定程序使用的资源。资源包括源代码文件。 这种IDE中的编译器要创建项目来运行单文件程序。对于多文件程序，要使 用相应的菜单命令，把源代码文件加入一个项目中。要确保所有的源代码文 件都在项目列表中列出。许多IDE都不用在项目列表中列出头文件（即扩展 名为.h的文件），因为项目只管理使用的源代码文件，源代码文件中的 #include指令管理该文件中使用的头文件。但是，Xcode要在项目中添加头文 件。 </p><h2 id="9-4-5-使用头文件"><a href="#9-4-5-使用头文件" class="headerlink" title="9.4.5 使用头文件"></a>9.4.5 使用头文件</h2><p> 如果把main()放在第1个文件中，把函数定义放在第2个文件中，那么第 1个文件仍然要使用函数原型。把函数原型放在头文件中，就不用在每次使 用函数文件时都写出函数的原型。C 标准库就是这样做的，例如，把I/O函 数原型放在stdio.h中，把数学函数原型放在math.h中。你也可以这样用自定 义的函数文件。 </p><p> 另外，程序中经常用C预处理器定义符号常量。这种定义只储存了那些  包含#define指令的文件。如果把程序的一个函数放进一个独立的文件中，你 也可以使用#define指令访问每个文件。最直接的方法是在每个文件中再次输 入指令，但是这个方法既耗时又容易出错。另外，还会有维护的问题：如果 修改了#define 定义的值，就必须在每个文件中修改。更好的做法是，把 #define 指令放进头文件，然后在每个源文件中使用#include指令包含该文件 即可。 </p><p> 把函数原型和已定义的字符常量放在头文件中是一个良好的编程习惯。 </p><h1 id="9-5-查找地址：-amp-运算符"><a href="#9-5-查找地址：-amp-运算符" class="headerlink" title="9.5 查找地址：&amp;运算符"></a>9.5 查找地址：&amp;运算符</h1><p> 指针（pointer）是 C 语言最重要的（有时也是最复杂的）概念之一，用 于储存变量的地址。前面使用的scanf()函数中就使用地址作为参数。如果主调函数不使用return返回的值，则必须通过地址才能修改主调函 数中的值。</p><p> 一元&amp;运算符给出变量的存储地址。如果pooh是变量名，那么&amp;pooh是 变量的地址。可以把地址看作是变量在内存中的位置。 </p><p> 在 FORTRAN中，子例程会影响主调例程的原始变量。子例程的变量名可能与 原始变量不同，但是它们的地址相同。但是，在 C语言中不是这样。每个C 函数都有自己的变量。这样做更可取，因为这样做可以防止原始变量被被调 函数中的副作用意外修改。 </p><h1 id="9-6-更改主调函数中的变量"><a href="#9-6-更改主调函数中的变量" class="headerlink" title="9.6 更改主调函数中的变量"></a>9.6 更改主调函数中的变量</h1><p>有时需要在一个函数中更改其他函数的变量。 </p><p>但是传统的方法并不可取，示例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 声明函数 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Originally x = %d and y = %d.\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">interchange</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now x = %d and y = %d.\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token comment">/* 定义函数 */</span><span class="token punctuation">{</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span>temp <span class="token operator">=</span> u<span class="token punctuation">;</span>u <span class="token operator">=</span> v<span class="token punctuation">;</span>v <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><p> Originally x = 5 and y = 10.</p><p> Now x = 5 and y = 10. </p><p>两个值并没有交换</p><p> 问题出在把结果 传回 main()时。interchange()使用的变量并不是main()中的变量。因此，交换 u和v的值对x和y的值没有影响！ </p><p>但是如果加上return，虽然但是return也只能返回一个变量的值，这里交换的涉及了两个变量，这里就要使用指针了</p><h1 id="程序清单"><a href="#程序清单" class="headerlink" title="程序清单"></a>程序清单</h1><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"hotel.h"</span> <span class="token comment">/* 定义符号常量，声明函数 */</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> nights<span class="token punctuation">;</span><span class="token keyword">double</span> hotel_rate<span class="token punctuation">;</span><span class="token keyword">int</span> code<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> QUIT<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> hotel_rate <span class="token operator">=</span> HOTEL1<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> hotel_rate <span class="token operator">=</span> HOTEL2<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> hotel_rate <span class="token operator">=</span> HOTEL3<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> hotel_rate <span class="token operator">=</span> HOTEL4<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span> hotel_rate <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Oops!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>nights <span class="token operator">=</span> <span class="token function">getnights</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">showprice</span><span class="token punctuation">(</span>hotel_rate<span class="token punctuation">,</span> nights<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thank you and goodbye.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数支持模块"><a href="#函数支持模块" class="headerlink" title="函数支持模块"></a>函数支持模块</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"hotel.h"</span></span><span class="token keyword">int</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> status<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%s%s\n"</span><span class="token punctuation">,</span> STARS<span class="token punctuation">,</span> STARS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter the number of the desired hotel:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1) Fairfield Arms 2) Hotel Olympic\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3) Chertworthy Plaza 4) The Stockton\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"5) quit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%s\n"</span><span class="token punctuation">,</span> STARS<span class="token punctuation">,</span> STARS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>status <span class="token operator">=</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span><span class="token punctuation">(</span>code <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> code <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%*s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理非整数输入</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter an integer from 1 to 5, please.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> code<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getnights</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> nights<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"How many nights are needed? "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nights<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%*s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理非整数输入</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter an integer, such as 2.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> nights<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">showprice</span><span class="token punctuation">(</span><span class="token keyword">double</span> rate<span class="token punctuation">,</span> <span class="token keyword">int</span> nights<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">double</span> factor <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> nights<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">,</span> factor <span class="token operator">*=</span> DISCOUNT<span class="token punctuation">)</span>total <span class="token operator">+=</span> rate <span class="token operator">*</span> factor<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The total cost will be $%0.2f.\n"</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QUIT</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HOTEL1</span> <span class="token expression"><span class="token number">180.00</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HOTEL2</span> <span class="token expression"><span class="token number">225.00</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HOTEL3</span> <span class="token expression"><span class="token number">255.00</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HOTEL4</span> <span class="token expression"><span class="token number">355.00</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISCOUNT</span> <span class="token expression"><span class="token number">0.95</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STARS</span> <span class="token string">"**********************************"</span></span><span class="token comment">// 显示选择列表</span><span class="token keyword">int</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回预订天数</span><span class="token keyword">int</span> <span class="token function">getnights</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据费率、入住天数计算费用</span><span class="token comment">// 并显示结果</span><span class="token keyword">void</span> <span class="token function">showprice</span><span class="token punctuation">(</span><span class="token keyword">double</span> rate<span class="token punctuation">,</span> <span class="token keyword">int</span> nights<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第十章-数组和指针"><a href="#第十章-数组和指针" class="headerlink" title="第十章 数组和指针"></a>第十章 数组和指针</h1><h2 id="10-1-数组"><a href="#10-1-数组" class="headerlink" title="10.1 数组"></a>10.1 数组</h2><p>数组由数据类型相同的一系列元素组成。需要使用数组 时，通过声明数组告诉编译器数组中内含多少元素和这些元素的类型。编译 器根据这些信息正确地创建数组。普通变量可以使用的类型，数组元素都可 以用。 </p><p>要访问数组中的元素，通过使用数组下标数（也称为索引）表示数组中 的各元素。数组元素的编号从0开始，所以candy[0]表示candy数组的第1个元 素，candy[364]表示第365个元素，也就是最后一个元素。 </p><h3 id="10-1-1-初始化数组"><a href="#10-1-1-初始化数组" class="headerlink" title="10.1.1 初始化数组"></a>10.1.1 初始化数组</h3><p> 数组通常被用来储存程序需要的数据。 </p><p> int powers[8] = {1,2,4,6,8,16,32,64}; /* 从ANSI C开始支持这种初始化 */ </p><p>用以逗号分隔的值列表（用花括号括起来）来初始化数组， 各值之间用逗号分隔。在逗号和值之间可以使用空格。根据上面的初始化， 把 1 赋给数组的首元素（powers[0]） </p><p> 注意 使用const声明数组 </p><p>有时需要把数组设置为只读。这样，程序只能从数组中检索值，不能把 新值写入数组。要创建只读数组，应该用const声明和初始化数组。</p><p> 程序在运行过程中就不能修改该数组中的内容。和普通变 量一样，应该使用声明来初始化 const 数据，因为一旦声明为 const，便不能 再给它赋值。 </p><p> 当初始化列表中的值少于数组元素个数 时，编译器会把剩余的元素都初始化为0。也就是说，<em><strong>如果不初始化数组， 数组元素和未初始化的普通变量一样，其中储存的都是垃圾值；但是，如果 部分初始化数组，剩余的元素就会被初始化为0。</strong></em></p><p> 如果初始化列表的项数多于数组元素个数，编译器可没那么仁慈，它会 毫不留情地将其视为错误。 </p><p> 如果初始化数组时省略方括号中的数字，编译器会根据初始化列表中的 项数来确定数组的大小。 </p><h3 id="10-1-2-指定初始化器-C99"><a href="#10-1-2-指定初始化器-C99" class="headerlink" title="10.1.2 指定初始化器(C99)"></a>10.1.2 指定初始化器(C99)</h3><p> C99 增加了一个新特性：指定初始化器（designated initializer）。利用 该特性可以初始化指定的数组元素。例如，只初始化数组中的最后一个元 素。对于传统的C初始化语法，必须初始化最后一个元素之前的所有元素， 才能初始化它： </p><p> int arr[6] = {0,0,0,0,0,212}; // 传统的语法 </p><p> 而C99规定，可以在初始化列表中使用带方括号的下标指明待初始化的 元素： </p><p> int arr[6] = {[5] = 212}; // 把arr[5]初始化为212 </p><p> 指定初始化器的两个重要特性。第一，如果指定初始化 器后面有更多的值，如该例中的初始化列表中的片段：[4] = 31,30,31，那么 后面这些值将被用于初始化指定元素后面的元素。也就是说，在days[4]被初 始化为31后，days[5]和days[6]将分别被初始化为30和31。第二，如果再次初 始化指定的元素，那么最后的初始化将会取代之前的初始化。例如，程序清 单10.5中，初始化列表开始时把days[1]初始化为28，但是days[1]又被后面的 指定初始化[1] = 29初始化为29。 </p><h3 id="10-1-3-给数组赋值"><a href="#10-1-3-给数组赋值" class="headerlink" title="10.1.3 给数组赋值"></a>10.1.3 给数组赋值</h3><p> 声明数组后，可以借助数组下标（或索引）给数组元素赋值。例如，下 面的程序段给数组的所有元素赋值：  </p><p>用循环赋值，示例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> counter<span class="token punctuation">,</span> evens<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> counter <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> counter<span class="token operator">++</span><span class="token punctuation">)</span>evens<span class="token punctuation">[</span>counter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> counter<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不允许的操作呢</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> oxen<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">/* 初始化没问题 */</span><span class="token keyword">int</span> yaks<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>yaks <span class="token operator">=</span> oxen<span class="token punctuation">;</span> <span class="token comment">/* 不允许 */</span>yaks<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> oxen<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* 数组下标越界 */</span>yaks<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">/* 不起作用 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> oxen数组的最后一个元素是oxen[SIZE-1]，所以oxen[SIZE]和yaks[SIZE] 都超出了两个数组的末尾。 </p><h3 id="10-1-4-数组边界"><a href="#10-1-4-数组边界" class="headerlink" title="10.1.4 数组边界"></a>10.1.4 数组边界</h3><p> 在使用数组时，要防止数组下标超出边界。也就是说，必须确保下标是 有效的值。 </p><p> int doofi[20]; </p><p> 那么在使用该数组时，要确保程序中使用的数组下标在0～19的范围 内，因为编译器不会检查出这种错误（但是，一些编译器发出警告，然后继 续编译程序）。 </p><p> 在C标准中，使用越界下标的 结果是未定义的。这意味着程序看上去可以运行，但是运行结果很奇怪，或 异常中止。 </p><p>不检查边界，C 程序可以运行更快。编译器没必要捕获所有的下标错 误，因为在程序运行之前，数组的下标值可能尚未确定。因此，为安全起 见，编译器必须在运行时添加额外代码检查数组的每个下标值，这会降低程 序的运行速度。C 相信程序员能编写正确的代码，这样的程序运行速度更 快。 </p><h3 id="10-1-5-指定数组的大小"><a href="#10-1-5-指定数组的大小" class="headerlink" title="10.1.5 指定数组的大小"></a>10.1.5 指定数组的大小</h3><p> int m = 8; float a1[5]; // 可以 float a2[5*2 + 1]; //可以 float a3[sizeof(int) + 1]; //可以 float a4[-4]; // 不可以，数组大小必须大于0 float a5[0]; // 不可以，数组大小必须大于0 float a6[2.5]; // 不可以，数组大小必须是整数 float a7[(int)2.5]; // 可以，已被强制转换为整型常量 float a8[n]; // C99之前不允许 float a9[m]; // C99之前不允许  </p><p> 上面的注释表明，以前支持C90标准的编译器不允许后两种声明方式。 而C99标准允许这样声明，这创建了一种新型数组，称为变长数组 （variable-length array）或简称 VLA（C11 放弃了这一创新的举措，把VLA 设定为可选，而不是语言必备的特性）。 </p><h2 id="10-2-多维数组"><a href="#10-2-多维数组" class="headerlink" title="10.2 多维数组"></a>10.2 多维数组</h2><p> float rain[5][12; // 内含5个数组元素的数组，每个数组元素内含12个 float类型的元素 </p><p> float rain{5][12]; // rain是一个内含5个元素的数组 </p><p> floatrain[5][12 ; // 一个内含12个float类型元素的数组 </p><p> 这说明每个元素的类型是float[12]，也就是说，rain的每个元素本身都 是一个内含12个float类型值的数组。 </p><p> 根据以上分析可知，rain的首元素rain[0]是一个内含12个float类型值的 数组。所以，rain[1]、rain[2]等也是如此。如果 rain[0]是一个数组，那么它 的首元素就是 rain[0][0]，第 2 个元素是rain[0][1]，以此类推。简而言之， 数组rain有5个元素，每个元素都是内含12个float类型元素的数组，rain[0]是  内含12个float值的数组，rain[0][0]是一个float类型的值。假设要访问位于2 行3列的值，则使用rain[2][3]（记住，数组元素的编号从0开始，所以2行指 的是第3行）。 </p><h3 id="10-2-1-初始化二维数组"><a href="#10-2-1-初始化二维数组" class="headerlink" title="10.2.1 初始化二维数组"></a>10.2.1 初始化二维数组</h3><p> 初始化二维数组是建立在初始化一维数组的基础上。首先，初始化一维 数组如下： </p><p> sometype ar1[5] = {val1, val2, val3, val4, val5}; </p><p> const float rain[YEARS][MONTHS] = { {4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6}, {8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3}, {9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4}, {7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2}, {7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2} }; </p><p> 这个初始化使用了5个数值列表，每个数值列表都用花括号括起来。第1 个列表的数据用于初始化数组的第1行，第2个列表的数据用于初始化数组的 第2行，以此类推。前面讨论的数据个数和数组大小不匹配的问题同样适用 于这里的每一行。也就是说，如果第1个列表中只有10个数，则只会初始化 数组第1行的前10个元素，而最后两个元素将被默认初始化为0。如果某列表 中的数值个数超出了数组每行的元素个数，则会出错，但是这并不会影响其 他行的初始化。 </p><p>也可以使用两个循环初始化二维数组</p><h3 id="10-2-2-其他多维数组"><a href="#10-2-2-其他多维数组" class="headerlink" title="10.2.2 其他多维数组"></a>10.2.2 其他多维数组</h3><p> int box[10][20][30];  三维数组</p><p> 可以把一维数组想象成一行数据，把二维数组想象成数据表，把三维数 组想象成一叠数据表。例如，把上面声明的三维数组box想象成由10个二维 数组（每个二维数组都是20行30列）堆叠起来。 </p><p> 通常，处理三维数组要使用3重嵌套循环，处理四维数组要使用4重嵌套 循环。对于其他多维数组，以此类推。 </p><h1 id="作业-7"><a href="#作业-7" class="headerlink" title="作业"></a>作业</h1><p> 4.编写一个函数，返回储存在double类型数组中最大值的下标，并在一 个简单的程序中测试该函数。  </p><p> 5.编写一个函数，返回储存在double类型数组中最大值和最小值的差 值，并在一个简单的程序中测试该函数。 </p><p>（两道题写在一个程序用一个代码）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">chazhi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> t<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>q<span class="token punctuation">;</span>    <span class="token keyword">double</span> b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token operator">=</span> <span class="token function">chazhi</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大值的下标是%d 最大值与最小值的差值是%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">double</span> max <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> min <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            max <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    m<span class="token operator">=</span>max<span class="token operator">-</span>min<span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">chazhi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">double</span> max <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> min <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            max <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    m<span class="token operator">=</span>max<span class="token operator">-</span>min<span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="作业-8"><a href="#作业-8" class="headerlink" title="作业"></a>作业</h1><p>7.编写一个程序，初始化一个double类型的二维数组，使用编程练习2中</p><p>的一个拷贝函数把该数组中的数据拷贝至另一个二维数组中（因为二维数组</p><p>是数组的数组，所以可以使用处理一维数组的拷贝函数来处理数组中的每个</p><p>子数组）。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//printf("数组a是:\n");</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">strcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//printf("数组b复制a是:\n");</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果处理的是char类型可以用strcpy函数。</p><p>正文</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">double</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//这里要是不给里面加数字报错  表达式必须是指向完整对象类型的指针</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">double</span> b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>编写一个函数，把double类型数组中的数据倒序排列，并在一个简单 的程序中测试该函数。</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">double</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-7-指针简介"><a href="#9-7-指针简介" class="headerlink" title="9.7 指针简介"></a>9.7 指针简介</h1><p> 指针（pointer）是一个值为内存地址 的变量（或数据对象）。正如char类型变量的值是字符，int类型变量的值是 整数，指针变量的值是地址。 </p><p> ptr = &amp;pooh; // 把pooh的地址赋给ptr </p><p> ptr“指向”pooh。ptr和&amp;pooh的区别是ptr是变量， 而&amp;pooh是常量。或者，ptr是可修改的左值，而&amp;pooh是右值。 </p><h2 id="9-7-1-间接运算符"><a href="#9-7-1-间接运算符" class="headerlink" title="9.7.1 间接运算符: *"></a>9.7.1 间接运算符: *</h2><p> 假设已知ptr指向bah，如下所示： </p><p>prt=&amp;bah;</p><p> 然后使用间接运算符<em>（indirection operator）找出储存在bah中的值，该 运算符有时也称为解引用运算符（dereferencing operator）。不要把间接运算 符和二元乘法运算符（</em>）混淆，虽然它们使用的符号相同，但语法功能不 同。 </p><p> val = *ptr; // 找出ptr指向的值 </p><p> 语句ptr = &amp;bah;和val = *ptr;放在一起相当于下面的语句：</p><p> val = bah; </p><h2 id="9-7-2-声明指针"><a href="#9-7-2-声明指针" class="headerlink" title="9.7.2 声明指针"></a>9.7.2 声明指针</h2><p> 声明指针变量时必须指定指针所指向变量的 类型，因为不同的变量类型占用不同的存储空间，一些指针操作要求知道操 作对象的大小。另外，程序必须知道储存在指定地址上的数据类型。long和 float可能占用相同的存储空间，但是它们储存数字却大相径庭。 </p><p> int * pi; // pi是指向int类型变量的指针</p><p> char * pc; // pc是指向char类型变量的指针</p><p> float * pf, * pg; // pf、pg都是指向float类型变量的指针 </p><p> 类型说明符表明了指针所指向对象的类型，星号（<em>）表明声明的变量 是一个指针。int * pi;声明的意思是pi是一个指针，</em>pi是int类型 </p><p> pc指向的值（*pc）是char类型。pc本身是什么类型？我们描述它的类型 是“指向char类型的指针”。pc 的值是一个地址，在大部分系统内部，该地址 由一个无符号整数表示。但是，不要把指针认为是整数类型。一些处理整数 的操作不能用来处理指针，反之亦然。例如，可以把两个整数相乘，但是不 能把两个指针相乘。所以，指针实际上是一个新类型，不是整数类型。因 此，如前所述，ANSI C专门为指针提供了%p格式的转换说明。 </p><h2 id="9-7-3使用指针在函数间通信"><a href="#9-7-3使用指针在函数间通信" class="headerlink" title="9.7.3使用指针在函数间通信"></a>9.7.3使用指针在函数间通信</h2><p>示例，利用指针在另一个函数进行数值交换，平常的函数之间的变量互不影响，但是利用指针传的是变量地址，因此可以交换</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Originally x = %d and y = %d.\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把地址发送给函数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now x = %d and y = %d.\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">interchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token operator">*</span>u<span class="token punctuation">;</span> <span class="token comment">// temp获得 u 所指向对象的值</span>    <span class="token operator">*</span>u <span class="token operator">=</span> <span class="token operator">*</span>v<span class="token punctuation">;</span>    <span class="token operator">*</span>v <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 该函数传递的不是x和y的值，而是它们的地址。这意味着出现在 interchange()原型和定义中的形式参数u和v将把地址作为它们的值。因此， 应把它们声明为指针。由于x和y是整数，所以u和v是指向整数的指针 </p><p> 一般而言，可以把变量相关的两类信息传递给函数。如果这种形式的函 数调用，那么传递的是x的值： </p><p> function1(x);  </p><p> 如果下面形式的函数调用，那么传递的是x的地址： </p><p> function2(&amp;x); </p><p> 第1种形式要求函数定义中的形式参数必须是一个与x的类型相同的变 量： int function1(int num) </p><p> 第2种形式要求函数定义中的形式参数必须是一个指向正确类型的指 针： </p><p> 针： int function2(int * ptr) </p><p> 如果要计算或处理值，那么使用第 1 种形式的函数调用；如果要在被调 函数中改变主调函数的变量，则使用第2种形式的函数调用。我们用过的 scanf()函数就是这样。当程序要把一个值读入变量时（如本例中的num）， 调用的是scanf(“%d”, &amp;num)。scanf()读取一个值，然后把该值储存到指定的 地址上。 </p><p> 普通变量把值作为基本量，把地址作为通过&amp;运算符获得的 派生量，而指针变量把地址作为基本量，把值作为通过*运算符获得的派生 量。 </p><h1 id="10-3数组和指针"><a href="#10-3数组和指针" class="headerlink" title="10.3数组和指针"></a>10.3数组和指针</h1><h2 id="详细示例"><a href="#详细示例" class="headerlink" title="详细示例"></a>详细示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">quezhi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>min<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">try</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> min<span class="token punctuation">,</span>max<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里面的sizeofa[]里面可以填范围之内的，因为这东西就是一个代表字节为长度的，同一个数组一个数占的位一样的</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mian sizeof(a)=%lu\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mian%p %p %p %p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quezhi</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>min<span class="token punctuation">,</span><span class="token operator">&amp;</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>m<span class="token operator">=</span><span class="token operator">&amp;</span>min<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*m=%d m[0]=%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>m<span class="token punctuation">,</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*p==p[0]</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*a=%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为什么*a就等于1000了，不是a[0]==1000?因为数组a的值是数组首地址</span>    <span class="token function">try</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">quezhi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>min<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>max<span class="token punctuation">)</span>         <span class="token comment">//这个还是指针的基本用法，找出最大的值和最小的值</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"quezhi sizeof(a)=%lu\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"quezhi%p %p %p %p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"quezhi%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>min<span class="token operator">=</span><span class="token operator">*</span>max<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>num<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">*</span>min<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>min<span class="token operator">=</span>a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">/* code */</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token operator">*</span>max<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>max<span class="token operator">=</span>a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//因为这里是循环所以会挑出最大的值</span>            <span class="token comment">/* code */</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">try</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>i<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>//由此看以看出数组和指针存在某种联系，函数参数表中数组实际上就是指针，（一定是函数参数表）</p><p>//就比如sizeof(a)==sizeof(int*) ,但是它可以用数组运算符去运算</p><p>//数组变量是特殊的指针</p><p>// 1.数组变量本身表达地址，所以之前做的不需要取址符，比如之前学的</p><p>//    int a[10];  scanf(“%c”,a);这里的a其实代表的就是地址，一般的要用&amp;，所以可不可以理解为我就是用数组定义了一串地址然后把字符放进之前定义好的地址里面</p><p>//    上面的列子也是int a[10];int *a;根本不需要&amp;   但是数组包含的单元是需要取值符号，(a==&amp;a[0])</p><p>// 2.[]运算符可以对数组用，也可以对指针用</p><p>//    比如p[0]==<em>p  这里表示的是</em>p指向的那个值作为一个数组也就是p[0]</p><p>//3.*运算符可以对指针用，也可以对数组用</p><p>//4.数组变量是const的指针，所以不能被赋值</p><p>//    比如(int b[];  b=a)这件事不可以，数组变量不可以互相赋值，但是(int *q=a;)这件事是可以的</p><p>//    总而言之就是 int b[]–&gt;int *const b;  const 修饰b，使得b的值变成只读变量</p><p>//那么指针与const  指针本身可以是const 它所指向的值也可以是一个const   </p><p>//第一种：指针是const  也就是指向了一个变量的地址就不可以再指向别的变量地址 写做int *const p=&amp;i;这种</p><p>//第二种：所指的是const  写做const int <em>p=&amp;i   或者int const</em>p=&amp;i(指针不许动);  这里就是不可以改变*p的值，但是i值可变并且p也可以指向别的，总之就是它指向谁之后获取的值不可以改变 下面试一试</p><p>//判断哪个被const了的标志是const在<em>的前面还是后面  const在</em>前面，就是它所指向的东西被const不可以改变；在后面就是指针不可以被修改，地址被const了</p><p>//const数组  const int a[]={1,2,3,4,5};数组变量已经是const的指针了，这里的const表明数组的每个单元都是const int,所以要通过初始化进行赋值</p><p>//保护数组值，因为数组传入函数时传递的时地址，可以被改变，所以在传入函数时可以加上const加以保护，  int sum(const int a[],int lenth);</p><p> 我们举一个变相使用指针的例子：数组名是数组首元素的地址。也就是 说，如果flizny是一个数组，下面的语句成立： </p><p> flizny == &amp;flizny[0]; // 数组名是该数组首元素的地址  </p><h2 id="程序清单10-8"><a href="#程序清单10-8" class="headerlink" title="程序清单10.8"></a>程序清单10.8</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">4</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">short</span> dates<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">short</span> <span class="token operator">*</span> pti<span class="token punctuation">;</span>    <span class="token keyword">short</span> index<span class="token punctuation">;</span>    <span class="token keyword">double</span> bills<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token operator">*</span> ptf<span class="token punctuation">;</span>    pti <span class="token operator">=</span> dates<span class="token punctuation">;</span> <span class="token comment">// 把数组地址赋给指针</span>    ptf <span class="token operator">=</span> bills<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%23s %15s\n"</span><span class="token punctuation">,</span> <span class="token string">"short"</span><span class="token punctuation">,</span> <span class="token string">"double"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pointers + %d: %10p %10p\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> pti <span class="token operator">+</span> index<span class="token punctuation">,</span>               ptf <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出示例</p><p> short double </p><p> pointers + 0: 0x7fff5fbff8dc 0x7fff5fbff8a0</p><p> pointers + 1: 0x7fff5fbff8de 0x7fff5fbff8a8</p><p> pointers + 2: 0x7fff5fbff8e0 0x7fff5fbff8b0</p><p> pointers + 3: 0x7fff5fbff8e2 0x7fff5fbff8b8 </p><p> 第2行打印的是两个数组开始的地址，下一行打印的是指针加1后的地 址，以此类推。注意，地址是十六进制的，因此dd比dc大1，a1比a0大1。 </p><p> 0x7fff5fbff8dc + 1是否是0x7fff5fbff8de? 0x7fff5fbff8a0 + 1是否是0x7fff5fbff8a8? </p><p> **<em>在C中，指针加1指的是增加一个存储单元。对数组而言，这意味 着把加1后的地址是下一个元素的地址，而不是下一个字节的地址（见图 10.3）。这是为什么必须声明指针所指向对象类型的原因之一。只知道地址 不够，因为计算机要知道储存对象需要多少字节（即使指针指向的是标量变 量，也要知道变量的类型，否则</em>pt 就无法正确地取回地址上的值）。 ***</p><p>这里的赋值是把dates首元素的地址赋给指针变量pti</p><p> ***指针加1，指针的值递增它所指向类型的大小（以字节为单位）。 ***</p><p> dates + 2 == &amp;date[2] // 相同的地址 </p><p>*(dates + 2) == dates[2] // 相同的值 </p><p> 了数组和指针的关系十分密切，可以使用指针标识数组的 元素和获得元素的值。从本质上看，同一个对象有两种表示法。实际上，C 语言标准在描述数组表示法时确实借助了指针。也就是说，定义ar[n]的意思 是*(ar + n)。可以认为*(ar + n)的意思是“到内存的ar位置，然后移动n个单 元，检索储存在那里的值”。 </p><p> 不要混淆 <em>(dates+2)和</em>dates+2。间接运算符（<em>）的优先级 高于+，所以</em>dates+2相当于(*dates)+2： </p><p> *(dates + 2) // dates第3个元素的值</p><p> *dates + 2 // dates第1个元素的值加2 </p><h2 id="程序清单10-9"><a href="#程序清单10-9" class="headerlink" title="程序清单10.9"></a>程序清单10.9</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MONTHS</span> <span class="token expression"><span class="token number">12</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> days<span class="token punctuation">[</span>MONTHS<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span>                        <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> MONTHS<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Month %2d has %d days.\n"</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>               <span class="token operator">*</span><span class="token punctuation">(</span>days <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//与 days[index]相同</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 这里，days是数组首元素的地址，days + index是元素days[index]的地 址，而*(days + index)则是该元素的值，相当于days[index]。for循环依次引用 数组中的每个元素，并打印各元素的内容。 </p><h1 id="10-4-函数、数组和指针"><a href="#10-4-函数、数组和指针" class="headerlink" title="10.4 函数、数组和指针"></a>10.4 函数、数组和指针</h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p> 注意 声明数组形参 </p><p> 因为数组名是该数组首元素的地址，作为实际参数的数组名要求形式参 数是一个与之匹配的指针。只有在这种情况下，C才会把int ar[]和int * ar解 释成一样。也就是说，ar是指向int的指针。由于函数原型可以省略参数名， 所以下面4种原型都是等价的： </p><p> int sum(int *ar, int n); </p><p> int sum(int *, int); </p><p> int sum(int ar[], int n);  </p><p> int sum(int [], int); </p><p> 但是，在函数定义中不能省略参数名。下面两种形式的函数定义等价： </p><p>示例：</p><p> 使用 sum()函数。该程序打印原始数 组的大小和表示该数组的函数形参的大小 </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> ar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> marbles<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span>                         <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> answer<span class="token punctuation">;</span>    answer <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>marbles<span class="token punctuation">,</span> SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The total number of marbles is %ld.\n"</span><span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The size of marbles is %zd bytes.\n"</span><span class="token punctuation">,</span>           <span class="token keyword">sizeof</span> marbles<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> ar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token comment">// 这个数组的大小是？</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        total <span class="token operator">+=</span> ar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The size of ar is %zd bytes.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> ar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><p> The size of ar is 8 bytes. //指向数组第一个元素的指针大小</p><p> The total number of marbles is 190. </p><p> The size of marbles is 40 bytes. </p><p> 注意，marbles的大小是40字节。这没问题，因为marbles内含10个int类 型的值，每个值占4字节，所以整个marbles的大小是40字节。但是，ar才8字 节。这是因为ar并不是数组本身，它是一个指向 marbles 数组首元素的指 针。我们的系统中用 8 字节储存地址，所以指针变量的大小是 8字节（其他 系统中地址的大小可能不是8字节）。简而言之，在程序清单10.10中， marbles是一个数组， ar是一个指向marbles数组首元素的指针，利用C中数组 和指针的特殊关系，可以用数组表示法来表示指针ar。 </p><h2 id="10-4-1-使用指针形参"><a href="#10-4-1-使用指针形参" class="headerlink" title="10.4.1 使用指针形参"></a>10.4.1 使用指针形参</h2><p> 函数要处理数组必须知道何时开始、何时结束。 </p><p>两种方法…… 第一种，传一个指针形参传一个整数形参，指针形参标志开始，整数形参标志数组大小</p><p>第二种传入两个指针形参一个标志数组开始，一个标志数组结束</p><p>示例演示第二种方法，同时该示例表明指针形参是变量，这意味着可以用索引表明访问数组中的哪一个元素</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">int</span> <span class="token function">sump</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> marbles<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span>                         <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> answer<span class="token punctuation">;</span>    answer <span class="token operator">=</span> <span class="token function">sump</span><span class="token punctuation">(</span>marbles<span class="token punctuation">,</span> marbles <span class="token operator">+</span> SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重点</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The total number of marbles is %ld.\n"</span><span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 使用指针算法 */</span><span class="token keyword">int</span> <span class="token function">sump</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        total <span class="token operator">+=</span> <span class="token operator">*</span>start<span class="token punctuation">;</span> <span class="token comment">// 把数组元素的值加起来</span>        start<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 让指针指向下一个元素</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 指针start开始指向marbles数组的首元素，所以赋值表达式total += <em>start 把首元素（20）加给total。然后，表达式start++递增指针变量start，使其指 向数组的下一个元素。</em>**因为start是指向int的指针，start递增1相当于其值递增 int类型的大小。 ***</p><h3 id="标记重点"><a href="#标记重点" class="headerlink" title="标记重点"></a>标记重点</h3><p> 注意，sump()函数用另一种方法结束加法循环。sum()函数把元素的个数 作为第2参数，并把该参数作为循环测试的一部分： </p><p> for( i = 0; i &lt; n; i++)  </p><p> 而sump()函数则使用第2个指针来结束循环： </p><p> while (start &lt; end) </p><p> 因为while循环的测试条件是一个不相等的关系，所以循环最后处理的 一个元素是end所指向位置的前一个元素。这意味着end指向的位置实际上在 数组最后一个元素的后面。C保证在给数组分配空间时，指向数组后面第一 个位置的指针仍是有效的指针。这使得 while循环的测试条件是有效的，因为 start在循环中最后的值是end[1]。注意，使用这种“越界”指针的函数调用 更为简洁：   </p><p> answer = sump(marbles, marbles + SIZE); </p><p> 因为下标从0开始，所以marbles + SIZE指向数组末尾的下一个位置。如 果end指向数组的最后一个元素而不是数组末尾的下一个位置，则必须使用 下面的代码： </p><p> answer = sump(marbles, marbles + SIZE - 1); </p><p> 这种写法既不简洁也不好记，很容易导致编程错误。顺带一提，虽然C 保证了marbles + SIZE有效，但是对marbles[SIZE]（即储存在该位置上的 值）未作任何保证，所以程序不能访问该位置。  </p><p> 还可以把循环体压缩成一行代码： total += *start++;  </p><p> <strong><em>一元运算符</em>和++的优先级相同，但结合律是从右往左</strong><em>，所以start++先 求值，然后才是</em>start。也就是说，指针start先递增后指向。使用后缀形式 （即start++而不是++start）意味着先把指针指向位置上的值加到total上，然 后再递增指针。如果使用*++start，顺序则反过来，先递增指针，再使用指 针指向位置上的值。如果使用(*start)++，则先使用start指向的值，再递增该 值，而不是递增指针。 </p><h2 id="10-4-2-指针表示法和数组表示法"><a href="#10-4-2-指针表示法和数组表示法" class="headerlink" title="10.4.2 指针表示法和数组表示法"></a>10.4.2 指针表示法和数组表示法</h2><p> 处理数组的函数实际上用指针作为参数，但是在编写 这样的函数时，可以选择是使用数组表示法还是指针表示法。 </p><p> 使用数组表示法，让函数是处理数组的这一意图更加明显。 </p><p> 至于C语言，ar[i]和*(ar+1)这两个表达式都是等价的。无论ar是数组名 还是指针变量，这两个表达式都没问题。但是，只有当ar是指针变量时，才 能使用ar++这样的表达式。 </p><p> 指针表示法（尤其与递增运算符一起使用时）更接近机器语言，因此一 些编译器在编译时能生成效率更高的代码。 </p><h1 id="10-5-指针操作"><a href="#10-5-指针操作" class="headerlink" title="10.5 指针操作"></a>10.5 指针操作</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p> ***赋值：可以把地址赋给指针。例如，用数组名、带地址运算符（&amp;）的 变量名、另一个指针进行赋值。在该例中，把urn数组的首地址赋给了ptr1， 该地址的编号恰好是0x7fff5fbff8d0。变量ptr2获得数组urn的第3个元素 （urn[2]）的地址。注意，地址应该和指针类型兼容。也就是说，不能把 double类型的地址赋给指向int的指针，至少要避免不明智的类型转换。 C99/C11已经强制不允许这样做。 ***</p><p>**<em>解引用：</em>运算符给出指针指向地址上储存的值。因此，*ptr1的初值是 100，该值储存在编号为0x7fff5fbff8d0的地址上。 ***</p><ul><li>**取址：和所有变量一样，指针变量也有自己的地址和值。对指针而言， &amp;运算符给出指针本身的地址。本例中，ptr1 储存在内存编号为 0x7fff5fbff8c8 的地址上，该存储单元储存的内容是0x7fff5fbff8d0，即urn的地 址。因此&amp;ptr1是指向ptr1的指针，而ptr1是指向utn[0]的指针。 ***</li></ul><p><em><strong>指针与整数相加：可以使用+运算符把指针与整数相加，或整数与指针 相加。无论哪种情况，整数都会和指针所指向类型的大小（以字节为单位） 相乘，然后把结果与初始地址相加。因此ptr1 +4与&amp;urn[4]等价。如果相加 的结果超出了初始指针指向的数组范围，计算结果则是未定义的。除非正好 超过数组末尾第一个位置，C保证该指针有效。</strong></em></p><ul><li>*<em>递增指针：递增指向数组元素的指针可以让该指针移动至数组的下一个 元素。因此，ptr1++相当于把ptr1的值加上4（我们的系统中int为4字节）， ptr1指向urn[1]（见图10.4，该图中使用了简化的地址）。现在ptr1的值是 0x7fff5fbff8d4（数组的下一个元素的地址），</em>ptr的值为200（即urn[1]的 值）。注意，ptr1本身的地址仍是 0x7fff5fbff8c8。毕竟，变量不会因为值发 生变化就移动位置。  ***</li></ul><p><em><strong>指针减去一个整数：可以使用-运算符从一个指针中减去一个整数。指 针必须是第1个运算对象，整数是第 2 个运算对象。该整数将乘以指针指向 类型的大小（以字节为单位），然后用初始地址减去乘积。所以ptr3 - 2与 &amp;urn[2]等价，因为ptr3指向的是&amp;arn[4]。如果相减的结果超出了初始指针所 指向数组的范围，计算结果则是未定义的。除非正好超过数组末尾第一个位 置，C保证该指针有效。</strong></em> </p><p> ***递减指针：当然，除了递增指针还可以递减指针。在本例中，递减ptr3 使其指向数组的第2个元素而不是第3个元素。前缀或后缀的递增和递减运算 符都可以使用。注意，在重置ptr1和ptr2前，它们都指向相同的元素urn[1]。 ***</p><p> ***指针求差：可以计算两个指针的差值。通常，求差的两个指针分别指向 同一个数组的不同元素，通过计算求出两元素之间的距离。差值的单位与数 组类型的单位相同。例如，程序清单10.13的输出中，ptr2 - ptr1得2，意思是 这两个指针所指向的两个元素相隔两个int，而不是2字节。只要两个指针都 指向相同的数组（或者其中一个指针指向数组后面的第 1 个地址），C 都能 保证相减运算有效。如果指向两个不同数组的指针进行求差运算可能会得出 一个值，或者导致运行时错误。 ***</p><ul><li><p><strong>比较：使用关系运算符可以比较两个指针的值，前提是两个指针都指向相同类型的对象。</strong>*</p></li><li><p><strong>注意，这里的减法有两种。可以用一个指针减去另一个指针得到一个整 数，或者用一个指针减去一个整数得到另一个指针。</strong>*</p></li></ul><p> ***在递增或递减指针时还要注意一些问题。编译器不会检查指针是否仍指 向数组元素。C 只能保证指向数组任意元素的指针和指向数组后面第 1 个位 置的指针有效。但是，如果递增或递减一个指针后超出了这个范围，则是未 定义的。另外，可以解引用指向数组任意元素的指针。但是，即使指针指向 数组后面一个位置是有效的，也能解引用这样的越界指针。 ***</p><ul><li>**创建一个指针 时，系统只分配了储存指针本身的内存，并未分配储存数据的内存。因此， 在使用指针之前，必须先用已分配的地址初始化它。 ***</li></ul><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">swape</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ap<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//这里是用指针做一些数据交换</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swape</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">swape</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ap<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token operator">*</span>ap<span class="token punctuation">;</span>    <span class="token operator">*</span>ap<span class="token operator">=</span><span class="token operator">*</span>bp<span class="token punctuation">;</span>    <span class="token operator">*</span>bp<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">//这里可以简单的理解为*代表获取的数值   &amp;表示获取的地址</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p %p %d\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">quezhi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>min<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> min<span class="token punctuation">,</span>max<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//这里面的sizeofa[]里面可以填范围之内的，因为这东西就是一个代表字节为长度的，同一个数组一个数占的位一样的</span>    <span class="token function">quezhi</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>min<span class="token punctuation">,</span><span class="token operator">&amp;</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span>min<span class="token punctuation">,</span>max<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">quezhi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>min<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>max<span class="token punctuation">)</span>         <span class="token comment">//这个还是指针的基本用法，找出最大的值和最小的值</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token operator">*</span>min<span class="token operator">=</span><span class="token operator">*</span>max<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>num<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">*</span>min<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>min<span class="token operator">=</span>a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">/* code */</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token operator">*</span>max<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>max<span class="token operator">=</span>a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//因为这里是循环所以会挑出最大的值</span>            <span class="token comment">/* code */</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span>  <span class="token function">jisuan</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//函数返回运算的状态（是否成功），运算的结果通过指针返回</span><span class="token punctuation">{</span>    <span class="token keyword">int</span>  a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">jisuan</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d/%d=%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">jisuan</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ret<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"错误!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* code */</span>   <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token operator">*</span>p<span class="token operator">=</span>a<span class="token operator">/</span>b<span class="token punctuation">;</span><span class="token comment">//这里有问题】</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//用指针可以干什么</span><span class="token comment">//1.需要传入较大的值时用作参数，比如穿数组</span><span class="token comment">//2.传入数组后对数组进行操作，*p++</span><span class="token comment">//3.函数返回不止一个结果  需要用函数来修改不止一个变量</span><span class="token comment">//4.动态内存的申请</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="作业："><a href="#作业：" class="headerlink" title="作业："></a>作业：</h1><p> 8.使用编程练习2中的拷贝函数，把一个内含7个元素的数组中第3～第5 个元素拷贝至内含3个元素的数组中。该函数本身不需要修改，只需要选择 合适的实际参数（实际参数不需要是数组名和数组大小，只需要是数组元素 的地址和待处理元素的个数）。 </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"拷贝完成\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3   %d \n"</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3   %d \n"</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3   %d \n"</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>b<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 9.编写一个程序，初始化一个double类型的3×5二维数组，使用一个处理 变长数组的函数将其拷贝至另一个二维数组中。还要编写一个以变长数组为 形参的函数以显示两个数组的内容。这两个函数应该能处理任意N×M数组 （如果编译器不支持变长数组，就使用传统C函数处理N×5的数组）。  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">3</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">double</span> x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">double</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span> <span class="token operator">=</span>     <span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">2.0</span><span class="token punctuation">,</span><span class="token number">3.0</span><span class="token punctuation">,</span><span class="token number">4.0</span><span class="token punctuation">,</span><span class="token number">5.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">6.0</span><span class="token punctuation">,</span><span class="token number">7.0</span><span class="token punctuation">,</span><span class="token number">8.0</span><span class="token punctuation">,</span><span class="token number">9.0</span><span class="token punctuation">,</span><span class="token number">10.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">11.0</span><span class="token punctuation">,</span><span class="token number">12.0</span><span class="token punctuation">,</span><span class="token number">13.0</span><span class="token punctuation">,</span><span class="token number">14.0</span><span class="token punctuation">,</span><span class="token number">15.0</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">copy_array</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"复制后b是\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_array</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">double</span> x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-5g"</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">copy_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">double</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
